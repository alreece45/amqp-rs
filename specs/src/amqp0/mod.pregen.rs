/// Generated by build script in amqp-specs
/// The file mod.pregen.rs is generated with: cargo build --features "amqp-pregen-specs"

/// The "build-xml" feature may be used to disable the use of the pregenerated file

// EDITORS BEWARE: Your modifications may be overridden

pub fn amqp0_9_1() -> Spec {
    Spec {
        name: "amqp",
        classes: {
                let mut v = Vec::with_capacity(6);
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(17);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-async",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 110,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-ok",
                                    index: 111,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "virtual-host",
                                            domain: "path",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-2",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "type",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-2",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-3",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "unbind",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("unbind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unbind-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(24);
                v.push(("bit", "bit"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("long", "long"));
                v.push(("longlong", "longlong"));
                v.push(("longstr", "longstr"));
                v.push(("message-count", "long"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("no-wait", "bit"));
                v.push(("octet", "octet"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));
                v.push(("short", "short"));
                v.push(("shortstr", "shortstr"));
                v.push(("table", "table"));
                v.push(("timestamp", "timestamp"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(4);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(18);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("no-consumers",
                        Constant {
                            name: "no-consumers",
                            value: 313,
                            class: Some("soft-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("precondition-failed",
                        Constant {
                            name: "precondition-failed",
                            value: 406,
                            class: Some("soft-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));
                v.push(("unexpected-frame",
                        Constant {
                            name: "unexpected-frame",
                            value: 505,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 9,
            revision: 1,
        },
    }
}
pub fn amqp0_9_0() -> Spec {
    Spec {
        name: "amqp",
        classes: {
                let mut v = Vec::with_capacity(12);
                v.push(("access",
                        Class {
                            name: "access",
                            index: 30,
                            methods: {
                                let mut v = Vec::with_capacity(2);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("request-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "realm",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "write",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "read",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "request-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(15);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "cluster-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "out-of-band",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Null);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "channel-id",
                                            domain: "channel-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "resume",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "channel-id",
                                            domain: "channel-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ping",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "pong",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "ok",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(11);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("redirect"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
name: "virtual-host",
domain: "path",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9/-_]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "capabilities",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "insist",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "redirect",
                                    index: 42,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "host",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("dtx",
                        Class {
                            name: "dtx",
                            index: 100,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "dtx-identifier",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "exchange",
domain: "exchange-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
name: "type",
domain: "shortstr",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "internal",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("file",
                        Class {
                            name: "file",
                            index: 70,
                            methods: {
                                let mut v = Vec::with_capacity(14);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("stage"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "staged-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "stage",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 60,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("message",
                        Class {
                            name: "message",
                            index: 120,
                            methods: {
                                let mut v = Vec::with_capacity(15);
                                v.push(ClassMethod {
                                    name: "transfer",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("reject"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(22);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "ttl",
                                            domain: "duration",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "priority",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "timestamp",
                                            domain: "timestamp",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-mode",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "expiration",
                                            domain: "timestamp",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "correlation-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-to",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-type",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-encoding",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "user-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "app-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "transaction-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "security-token",
                                            domain: "security-token",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "application-headers",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "body",
                                            domain: "content",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("empty"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "append",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "bytes",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "checkpoint",
                                    index: 90,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "resume",
                                    index: 100,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("offset"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 110,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ok",
                                    index: 500,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "empty",
                                    index: 510,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 520,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "code",
                                            domain: "reject-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "text",
                                            domain: "reject-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "offset",
                                    index: 530,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "value",
                                            domain: "offset",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "queue",
domain: "queue-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]*$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "unbind",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("unbind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unbind-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("stream",
                        Class {
                            name: "stream",
                            index: 80,
                            methods: {
                                let mut v = Vec::with_capacity(9);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consume-rate",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tunnel",
                        Class {
                            name: "tunnel",
                            index: 110,
                            methods: {
                                let mut v = Vec::with_capacity(1);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "meta-data",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(32);
                v.push(("access-ticket", "short"));
                v.push(("bit", "bit"));
                v.push(("channel-id", "longstr"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("destination", "shortstr"));
                v.push(("duration", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("known-hosts", "shortstr"));
                v.push(("long", "long"));
                v.push(("longlong", "longlong"));
                v.push(("longstr", "longstr"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("octet", "octet"));
                v.push(("offset", "longlong"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reference", "longstr"));
                v.push(("reject-code", "short"));
                v.push(("reject-text", "shortstr"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));
                v.push(("security-token", "longstr"));
                v.push(("short", "short"));
                v.push(("shortstr", "shortstr"));
                v.push(("table", "table"));
                v.push(("timestamp", "timestamp"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(8);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));
                v.push(("frame-oob-body",
                        Constant {
                            name: "frame-oob-body",
                            value: 6,
                            class: None,
                        }));
                v.push(("frame-oob-header",
                        Constant {
                            name: "frame-oob-header",
                            value: 5,
                            class: None,
                        }));
                v.push(("frame-oob-method",
                        Constant {
                            name: "frame-oob-method",
                            value: 4,
                            class: None,
                        }));
                v.push(("frame-trace",
                        Constant {
                            name: "frame-trace",
                            value: 7,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(19);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("no-consumers",
                        Constant {
                            name: "no-consumers",
                            value: 313,
                            class: Some("soft-error"),
                        }));
                v.push(("no-route",
                        Constant {
                            name: "no-route",
                            value: 312,
                            class: Some("soft-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-delivered",
                        Constant {
                            name: "not-delivered",
                            value: 310,
                            class: Some("soft-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("precondition-failed",
                        Constant {
                            name: "precondition-failed",
                            value: 406,
                            class: Some("soft-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 9,
            revision: 0,
        },
    }
}
pub fn amqp0_8_0() -> Spec {
    Spec {
        name: "amqp",
        classes: {
                let mut v = Vec::with_capacity(12);
                v.push(("access",
                        Class {
                            name: "access",
                            index: 30,
                            methods: {
                                let mut v = Vec::with_capacity(2);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("request-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "realm",
                                            domain: "path",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "write",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "read",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "request-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(15);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "cluster-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(7);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "out-of-band",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Null);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "alert",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "details",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(11);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("redirect"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
name: "virtual-host",
domain: "path",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9/-_]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "capabilities",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "insist",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "redirect",
                                    index: 50,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "host",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 61,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("dtx",
                        Class {
                            name: "dtx",
                            index: 100,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "dtx-identifier",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "exchange",
domain: "exchange-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
name: "type",
domain: "shortstr",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "internal",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("file",
                        Class {
                            name: "file",
                            index: 70,
                            methods: {
                                let mut v = Vec::with_capacity(14);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("stage"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "staged-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "stage",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 60,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(8);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "queue",
domain: "queue-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]*$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("stream",
                        Class {
                            name: "stream",
                            index: 80,
                            methods: {
                                let mut v = Vec::with_capacity(9);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consume-rate",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("test",
                        Class {
                            name: "test",
                            index: 120,
                            methods: {
                                let mut v = Vec::with_capacity(8);
                                v.push(ClassMethod {
                                    name: "integer",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("integer-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "integer-1",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-2",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-3",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-4",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "operation",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "integer-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "result",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "string",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("string-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "string-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-2",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "operation",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "string-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "result",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "table",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("table-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "table",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-op",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-op",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "table-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "integer-result",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-result",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "content",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("content-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "content-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "content-checksum",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tunnel",
                        Class {
                            name: "tunnel",
                            index: 110,
                            methods: {
                                let mut v = Vec::with_capacity(1);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "meta-data",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(15);
                v.push(("access-ticket", "short"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("known-hosts", "shortstr"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(8);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));
                v.push(("frame-oob-body",
                        Constant {
                            name: "frame-oob-body",
                            value: 6,
                            class: None,
                        }));
                v.push(("frame-oob-header",
                        Constant {
                            name: "frame-oob-header",
                            value: 5,
                            class: None,
                        }));
                v.push(("frame-oob-method",
                        Constant {
                            name: "frame-oob-method",
                            value: 4,
                            class: None,
                        }));
                v.push(("frame-trace",
                        Constant {
                            name: "frame-trace",
                            value: 7,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(16);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-delivered",
                        Constant {
                            name: "not-delivered",
                            value: 310,
                            class: Some("soft-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 8,
            revision: 0,
        },
    }
}
pub fn rabbitmq0_9_1() -> Spec {
    Spec {
        name: "rabbitmq",
        classes: {
                let mut v = Vec::with_capacity(7);
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(18);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: Some("SHOULD"),
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MAY"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-async",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 110,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-ok",
                                    index: 111,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "nack",
                                    index: 120,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("confirm",
                        Class {
                            name: "confirm",
                            index: 85,
                            methods: {
                                let mut v = Vec::with_capacity(2);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(12);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "virtual-host",
                                            domain: "path",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reserved-2",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "blocked",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reason",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unblocked",
                                    index: 61,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(8);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "type",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "internal",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "source",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "unbind",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("unbind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "source",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unbind-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "unbind",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("unbind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unbind-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "reserved-1",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: true,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-wait",
                                            domain: "no-wait",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "message-count",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(24);
                v.push(("bit", "bit"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("long", "long"));
                v.push(("longlong", "longlong"));
                v.push(("longstr", "longstr"));
                v.push(("message-count", "long"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("no-wait", "bit"));
                v.push(("octet", "octet"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));
                v.push(("short", "short"));
                v.push(("shortstr", "shortstr"));
                v.push(("table", "table"));
                v.push(("timestamp", "timestamp"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(4);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(18);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("no-consumers",
                        Constant {
                            name: "no-consumers",
                            value: 313,
                            class: Some("soft-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("precondition-failed",
                        Constant {
                            name: "precondition-failed",
                            value: 406,
                            class: Some("soft-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));
                v.push(("unexpected-frame",
                        Constant {
                            name: "unexpected-frame",
                            value: 505,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 9,
            revision: 1,
        },
    }
}
pub fn qpid0_9_0() -> Spec {
    Spec {
        name: "qpid",
        classes: {
                let mut v = Vec::with_capacity(12);
                v.push(("access",
                        Class {
                            name: "access",
                            index: 30,
                            methods: {
                                let mut v = Vec::with_capacity(2);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("request-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "realm",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "write",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "read",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "request-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(17);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "cluster-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-sync",
                                    index: 102,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("recover-sync-ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-sync-ok",
                                    index: 101,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "out-of-band",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Null);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "channel-id",
                                            domain: "channel-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "resume",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "channel-id",
                                            domain: "channel-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ping",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "pong",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "ok",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(11);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("redirect"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
name: "virtual-host",
domain: "path",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9/-_]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "capabilities",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "insist",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "redirect",
                                    index: 42,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "host",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("dtx",
                        Class {
                            name: "dtx",
                            index: 100,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "dtx-identifier",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "exchange",
domain: "exchange-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
name: "type",
domain: "shortstr",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "internal",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "bound",
                                    index: 22,
                                    chassis_client: None,
                                    chassis_server: Some("SHOULD"),
                                    response: Some("bound-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bound-ok",
                                    index: 23,
                                    chassis_client: Some("SHOULD"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("file",
                        Class {
                            name: "file",
                            index: 70,
                            methods: {
                                let mut v = Vec::with_capacity(14);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("stage"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "staged-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "stage",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 60,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("message",
                        Class {
                            name: "message",
                            index: 120,
                            methods: {
                                let mut v = Vec::with_capacity(15);
                                v.push(ClassMethod {
                                    name: "transfer",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("reject"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(22);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "ttl",
                                            domain: "duration",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "priority",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "timestamp",
                                            domain: "timestamp",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-mode",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "expiration",
                                            domain: "timestamp",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "correlation-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-to",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-type",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-encoding",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "user-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "app-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "transaction-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "security-token",
                                            domain: "security-token",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "application-headers",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "body",
                                            domain: "content",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("empty"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "destination",
                                            domain: "destination",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "append",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "bytes",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "checkpoint",
                                    index: 90,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "resume",
                                    index: 100,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("offset"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reference",
                                            domain: "reference",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 110,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ok",
                                    index: 500,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "empty",
                                    index: 510,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 520,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "code",
                                            domain: "reject-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "text",
                                            domain: "reject-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "offset",
                                    index: 530,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "value",
                                            domain: "offset",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(10);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "queue",
domain: "queue-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]*$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "unbind",
                                    index: 50,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("unbind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "unbind-ok",
                                    index: 51,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("stream",
                        Class {
                            name: "stream",
                            index: 80,
                            methods: {
                                let mut v = Vec::with_capacity(9);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consume-rate",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "filter",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tunnel",
                        Class {
                            name: "tunnel",
                            index: 110,
                            methods: {
                                let mut v = Vec::with_capacity(1);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "meta-data",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(32);
                v.push(("access-ticket", "short"));
                v.push(("bit", "bit"));
                v.push(("channel-id", "longstr"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("destination", "shortstr"));
                v.push(("duration", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("known-hosts", "shortstr"));
                v.push(("long", "long"));
                v.push(("longlong", "longlong"));
                v.push(("longstr", "longstr"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("octet", "octet"));
                v.push(("offset", "longlong"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reference", "longstr"));
                v.push(("reject-code", "short"));
                v.push(("reject-text", "shortstr"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));
                v.push(("security-token", "longstr"));
                v.push(("short", "short"));
                v.push(("shortstr", "shortstr"));
                v.push(("table", "table"));
                v.push(("timestamp", "timestamp"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(8);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));
                v.push(("frame-oob-body",
                        Constant {
                            name: "frame-oob-body",
                            value: 6,
                            class: None,
                        }));
                v.push(("frame-oob-header",
                        Constant {
                            name: "frame-oob-header",
                            value: 5,
                            class: None,
                        }));
                v.push(("frame-oob-method",
                        Constant {
                            name: "frame-oob-method",
                            value: 4,
                            class: None,
                        }));
                v.push(("frame-trace",
                        Constant {
                            name: "frame-trace",
                            value: 7,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(19);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("no-consumers",
                        Constant {
                            name: "no-consumers",
                            value: 313,
                            class: Some("soft-error"),
                        }));
                v.push(("no-route",
                        Constant {
                            name: "no-route",
                            value: 312,
                            class: Some("soft-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-delivered",
                        Constant {
                            name: "not-delivered",
                            value: 310,
                            class: Some("soft-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("precondition-failed",
                        Constant {
                            name: "precondition-failed",
                            value: 406,
                            class: Some("soft-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 9,
            revision: 0,
        },
    }
}
pub fn qpid0_8_0() -> Spec {
    Spec {
        name: "qpid",
        classes: {
                let mut v = Vec::with_capacity(12);
                v.push(("access",
                        Class {
                            name: "access",
                            index: 30,
                            methods: {
                                let mut v = Vec::with_capacity(2);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("request-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "realm",
                                            domain: "path",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "write",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "read",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "request-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("basic",
                        Class {
                            name: "basic",
                            index: 60,
                            methods: {
                                let mut v = Vec::with_capacity(16);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get",
                                    index: 70,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("get-empty"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-ok",
                                    index: 71,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "get-empty",
                                    index: 72,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "cluster-id",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 80,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("recover-ok"),
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "recover-ok",
                                    index: 101,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("channel",
                        Class {
                            name: "channel",
                            index: 20,
                            methods: {
                                let mut v = Vec::with_capacity(7);
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "out-of-band",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Null);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "flow",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("flow-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "flow-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "active",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "alert",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "details",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("connection",
                        Class {
                            name: "connection",
                            index: 10,
                            methods: {
                                let mut v = Vec::with_capacity(11);
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "version-major",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "version-minor",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "server-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanisms",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locales",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 11,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "client-properties",
                                            domain: "peer-properties",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mechanism",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "locale",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("secure-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "challenge",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "secure-ok",
                                    index: 21,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "response",
                                            domain: "longstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: Some("tune-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "tune-ok",
                                    index: 31,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "channel-max",
                                            domain: "short",
                                            assertions: {
                                                let mut v = Vec::with_capacity(2);
                                                v.push(ClassMethodFieldAssertion::NotNull);
                                                v.push(ClassMethodFieldAssertion::ChannelMax);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "frame-max",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "heartbeat",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("redirect"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
name: "virtual-host",
domain: "path",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9/-_]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "capabilities",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "insist",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "redirect",
                                    index: 50,
                                    chassis_client: Some("MAY"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "host",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "known-hosts",
                                            domain: "known-hosts",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("close-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "class-id",
                                            domain: "class-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "method-id",
                                            domain: "method-id",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "close-ok",
                                    index: 61,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("dtx",
                        Class {
                            name: "dtx",
                            index: 100,
                            methods: {
                                let mut v = Vec::with_capacity(4);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "start",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MAY"),
                                    response: Some("start-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "dtx-identifier",
                                            domain: "shortstr",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "start-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));
                v.push(("exchange",
                        Class {
                            name: "exchange",
                            index: 40,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(9);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "exchange",
domain: "exchange-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
name: "type",
domain: "shortstr",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]+$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "internal",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "bound",
                                    index: 22,
                                    chassis_client: None,
                                    chassis_server: Some("SHOULD"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bound-ok",
                                    index: 23,
                                    chassis_client: Some("SHOULD"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("file",
                        Class {
                            name: "file",
                            index: 70,
                            methods: {
                                let mut v = Vec::with_capacity(14);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(7);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-ack",
                                            domain: "no-ack",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("open-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "content-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "open-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("stage"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "staged-size",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "stage",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 60,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 70,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 80,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "redelivered",
                                            domain: "redelivered",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "identifier",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "ack",
                                    index: 90,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "multiple",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "reject",
                                    index: 100,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "requeue",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("queue",
                        Class {
                            name: "queue",
                            index: 50,
                            methods: {
                                let mut v = Vec::with_capacity(8);
                                v.push(ClassMethod {
                                    name: "declare",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("declare-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(8);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
name: "queue",
domain: "queue-name",
assertions: {
let mut v = Vec::with_capacity(1);
v.push(ClassMethodFieldAssertion::Regexp("^[a-zA-Z0-9-_.:]*$"));

v
},
is_reserved: false
});
                                        v.push(ClassMethodField {
                                            name: "passive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "durable",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "auto-delete",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "declare-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("bind-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "arguments",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "bind-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "purge",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("purge-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "purge-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("delete-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-unused",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "if-empty",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "delete-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "message-count",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("stream",
                        Class {
                            name: "stream",
                            index: 80,
                            methods: {
                                let mut v = Vec::with_capacity(9);
                                v.push(ClassMethod {
                                    name: "qos",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("qos-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "prefetch-size",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "prefetch-count",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consume-rate",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "global",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "qos-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "consume",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("consume-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(6);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "no-local",
                                            domain: "no-local",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exclusive",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "consume-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("cancel-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "nowait",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "cancel-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "publish",
                                    index: 40,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "ticket",
                                            domain: "access-ticket",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "mandatory",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "immediate",
                                            domain: "bit",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "return",
                                    index: 50,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "reply-code",
                                            domain: "reply-code",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "reply-text",
                                            domain: "reply-text",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "routing-key",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "deliver",
                                    index: 60,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(4);
                                        v.push(ClassMethodField {
                                            name: "consumer-tag",
                                            domain: "consumer-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "delivery-tag",
                                            domain: "delivery-tag",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "exchange",
                                            domain: "exchange-name",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "queue",
                                            domain: "queue-name",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::NotNull);

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("test",
                        Class {
                            name: "test",
                            index: 120,
                            methods: {
                                let mut v = Vec::with_capacity(8);
                                v.push(ClassMethod {
                                    name: "integer",
                                    index: 10,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("integer-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(5);
                                        v.push(ClassMethodField {
                                            name: "integer-1",
                                            domain: "octet",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-2",
                                            domain: "short",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-3",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-4",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "operation",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "integer-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "result",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "string",
                                    index: 20,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("string-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "string-1",
                                            domain: "shortstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-2",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "operation",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "string-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "result",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "table",
                                    index: 30,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("table-ok"),
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(3);
                                        v.push(ClassMethodField {
                                            name: "table",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "integer-op",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-op",
                                            domain: "octet",
                                            assertions: {
                                                let mut v = Vec::with_capacity(1);
                                                v.push(ClassMethodFieldAssertion::Enum({
                                                    let mut v = Vec::with_capacity(3);
                                                    v.push("name");
                                                    v.push("name");
                                                    v.push("name");

                                                    v
                                                }));

                                                v
                                            },
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "table-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(2);
                                        v.push(ClassMethodField {
                                            name: "integer-result",
                                            domain: "longlong",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });
                                        v.push(ClassMethodField {
                                            name: "string-result",
                                            domain: "longstr",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });
                                v.push(ClassMethod {
                                    name: "content",
                                    index: 40,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: Some("content-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "content-ok",
                                    index: 41,
                                    chassis_client: Some("MUST"),
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: true,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "content-checksum",
                                            domain: "long",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tunnel",
                        Class {
                            name: "tunnel",
                            index: 110,
                            methods: {
                                let mut v = Vec::with_capacity(1);
                                v.push(ClassMethod {
                                    name: "request",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: None,
                                    is_synchronous: false,
                                    fields: {
                                        let mut v = Vec::with_capacity(1);
                                        v.push(ClassMethodField {
                                            name: "meta-data",
                                            domain: "table",
                                            assertions: vec![],
                                            is_reserved: false,
                                        });

                                        v
                                    },
                                });

                                v
                            },
                        }));
                v.push(("tx",
                        Class {
                            name: "tx",
                            index: 90,
                            methods: {
                                let mut v = Vec::with_capacity(6);
                                v.push(ClassMethod {
                                    name: "select",
                                    index: 10,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("select-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "select-ok",
                                    index: 11,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit",
                                    index: 20,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("commit-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "commit-ok",
                                    index: 21,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback",
                                    index: 30,
                                    chassis_client: None,
                                    chassis_server: Some("MUST"),
                                    response: Some("rollback-ok"),
                                    is_synchronous: true,
                                    fields: vec![],
                                });
                                v.push(ClassMethod {
                                    name: "rollback-ok",
                                    index: 31,
                                    chassis_client: Some("MUST"),
                                    chassis_server: None,
                                    response: None,
                                    is_synchronous: true,
                                    fields: vec![],
                                });

                                v
                            },
                        }));

                v
            }
            .into_iter()
            .collect(),
        constants: {
                let mut v = Vec::with_capacity(2);
                v.push(("frame-end",
                        Constant {
                            name: "frame-end",
                            value: 206,
                            class: None,
                        }));
                v.push(("frame-min-size",
                        Constant {
                            name: "frame-min-size",
                            value: 4096,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        domains: {
                let mut v = Vec::with_capacity(15);
                v.push(("access-ticket", "short"));
                v.push(("class-id", "short"));
                v.push(("consumer-tag", "shortstr"));
                v.push(("delivery-tag", "longlong"));
                v.push(("exchange-name", "shortstr"));
                v.push(("known-hosts", "shortstr"));
                v.push(("method-id", "short"));
                v.push(("no-ack", "bit"));
                v.push(("no-local", "bit"));
                v.push(("path", "shortstr"));
                v.push(("peer-properties", "table"));
                v.push(("queue-name", "shortstr"));
                v.push(("redelivered", "bit"));
                v.push(("reply-code", "short"));
                v.push(("reply-text", "shortstr"));

                v
            }
            .into_iter()
            .collect(),
        frame_types: {
                let mut v = Vec::with_capacity(8);
                v.push(("frame-body",
                        Constant {
                            name: "frame-body",
                            value: 3,
                            class: None,
                        }));
                v.push(("frame-header",
                        Constant {
                            name: "frame-header",
                            value: 2,
                            class: None,
                        }));
                v.push(("frame-heartbeat",
                        Constant {
                            name: "frame-heartbeat",
                            value: 8,
                            class: None,
                        }));
                v.push(("frame-method",
                        Constant {
                            name: "frame-method",
                            value: 1,
                            class: None,
                        }));
                v.push(("frame-oob-body",
                        Constant {
                            name: "frame-oob-body",
                            value: 6,
                            class: None,
                        }));
                v.push(("frame-oob-header",
                        Constant {
                            name: "frame-oob-header",
                            value: 5,
                            class: None,
                        }));
                v.push(("frame-oob-method",
                        Constant {
                            name: "frame-oob-method",
                            value: 4,
                            class: None,
                        }));
                v.push(("frame-trace",
                        Constant {
                            name: "frame-trace",
                            value: 7,
                            class: None,
                        }));

                v
            }
            .into_iter()
            .collect(),
        response_codes: {
                let mut v = Vec::with_capacity(16);
                v.push(("access-refused",
                        Constant {
                            name: "access-refused",
                            value: 403,
                            class: Some("soft-error"),
                        }));
                v.push(("channel-error",
                        Constant {
                            name: "channel-error",
                            value: 504,
                            class: Some("hard-error"),
                        }));
                v.push(("command-invalid",
                        Constant {
                            name: "command-invalid",
                            value: 503,
                            class: Some("hard-error"),
                        }));
                v.push(("connection-forced",
                        Constant {
                            name: "connection-forced",
                            value: 320,
                            class: Some("hard-error"),
                        }));
                v.push(("content-too-large",
                        Constant {
                            name: "content-too-large",
                            value: 311,
                            class: Some("soft-error"),
                        }));
                v.push(("frame-error",
                        Constant {
                            name: "frame-error",
                            value: 501,
                            class: Some("hard-error"),
                        }));
                v.push(("internal-error",
                        Constant {
                            name: "internal-error",
                            value: 541,
                            class: Some("hard-error"),
                        }));
                v.push(("invalid-path",
                        Constant {
                            name: "invalid-path",
                            value: 402,
                            class: Some("hard-error"),
                        }));
                v.push(("not-allowed",
                        Constant {
                            name: "not-allowed",
                            value: 530,
                            class: Some("hard-error"),
                        }));
                v.push(("not-delivered",
                        Constant {
                            name: "not-delivered",
                            value: 310,
                            class: Some("soft-error"),
                        }));
                v.push(("not-found",
                        Constant {
                            name: "not-found",
                            value: 404,
                            class: Some("soft-error"),
                        }));
                v.push(("not-implemented",
                        Constant {
                            name: "not-implemented",
                            value: 540,
                            class: Some("hard-error"),
                        }));
                v.push(("reply-success",
                        Constant {
                            name: "reply-success",
                            value: 200,
                            class: None,
                        }));
                v.push(("resource-error",
                        Constant {
                            name: "resource-error",
                            value: 506,
                            class: Some("hard-error"),
                        }));
                v.push(("resource-locked",
                        Constant {
                            name: "resource-locked",
                            value: 405,
                            class: Some("soft-error"),
                        }));
                v.push(("syntax-error",
                        Constant {
                            name: "syntax-error",
                            value: 502,
                            class: Some("hard-error"),
                        }));

                v
            }
            .into_iter()
            .collect(),
        version: Version {
            minor: 8,
            revision: 0,
        },
    }
}
pub fn specs() -> Vec<Spec> {
    vec![amqp0_9_1(), amqp0_9_0(), amqp0_8_0(), rabbitmq0_9_1(), qpid0_9_0(), qpid0_8_0()]
}
