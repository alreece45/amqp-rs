var searchIndex = {};
searchIndex["amqp_xmlspec"] = {"doc":"","items":[[0,"amqp0_9_1","amqp_xmlspec","",null,null],[3,"Table","amqp_xmlspec::amqp0_9_1","",null,null],[0,"frame","","",null,null],[4,"Type","amqp_xmlspec::amqp0_9_1::frame","",null,null],[13,"Method","","",0,null],[13,"Header","","",0,null],[13,"Body","","",0,null],[13,"Heartbeat","","",0,null],[17,"TYPE_METHOD","","",null,null],[17,"TYPE_HEADER","","",null,null],[17,"TYPE_BODY","","",null,null],[17,"TYPE_HEARTBEAT","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"from_id","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"id","","",0,null],[0,"response","amqp_xmlspec::amqp0_9_1","",null,null],[4,"ErrorClass","amqp_xmlspec::amqp0_9_1::response","",null,null],[13,"Hard","","",1,null],[13,"Soft","","",1,null],[4,"Type","","",null,null],[13,"Success","","",2,null],[13,"Redirect","","",2,null],[13,"ClientError","","",2,null],[13,"ServerError","","",2,null],[0,"redirect","","",null,null],[4,"Type","amqp_xmlspec::amqp0_9_1::response::redirect","",null,null],[13,"ContentTooLarge","","",3,null],[13,"NoConsumers","","",3,null],[13,"ConnectionForced","","",3,null],[17,"TYPE_CONTENT_TOO_LARGE","","",null,null],[17,"TYPE_NO_CONSUMERS","","",null,null],[17,"TYPE_CONNECTION_FORCED","","",null,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"from_id","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"id","","",3,null],[11,"error_class","","",3,null],[0,"client_error","amqp_xmlspec::amqp0_9_1::response","",null,null],[4,"Type","amqp_xmlspec::amqp0_9_1::response::client_error","",null,null],[13,"InvalidPath","","",4,null],[13,"AccessRefused","","",4,null],[13,"NotFound","","",4,null],[13,"ResourceLocked","","",4,null],[13,"PreconditionFailed","","",4,null],[17,"TYPE_PATH_INVALID","","",null,null],[17,"TYPE_ACCESS_REFUSED","","",null,null],[17,"TYPE_NOT_FOUND","","",null,null],[17,"TYPE_RESOURCE_LOCKED","","",null,null],[17,"TYPE_PRECONDITION_FAILED","","",null,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"from_id","","",4,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"id","","",4,null],[11,"error_class","","",4,null],[0,"server_error","amqp_xmlspec::amqp0_9_1::response","",null,null],[4,"Type","amqp_xmlspec::amqp0_9_1::response::server_error","",null,null],[13,"Frame","","",5,null],[13,"Syntax","","",5,null],[13,"CommandInvalid","","",5,null],[13,"Channel","","",5,null],[13,"UnexpectedFrame","","",5,null],[13,"Resource","","",5,null],[13,"NotAllowed","","",5,null],[13,"NotImplemented","","",5,null],[13,"Internal","","",5,null],[17,"TYPE_FRAME","","",null,null],[17,"TYPE_SYNTAX","","",null,null],[17,"TYPE_COMMAND_INVALID","","",null,null],[17,"TYPE_CHANNEL","","",null,null],[17,"TYPE_UNEXPECTED_FRAME","","",null,null],[17,"TYPE_RESOURCE","","",null,null],[17,"TYPE_NOT_ALLOWED","","",null,null],[17,"TYPE_NOT_IMPLEMENTED","","",null,null],[17,"TYPE_INTERNAL","","",null,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"from_id","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"id","","",5,null],[11,"error_class","","",5,null],[17,"REPLY_SUCCESS","amqp_xmlspec::amqp0_9_1::response","",null,null],[8,"Error","","",null,null],[10,"error_class","","",6,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"from_id","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"id","","",2,null],[11,"error_class","","",2,null],[0,"class","amqp_xmlspec::amqp0_9_1","",null,null],[0,"connection","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"StartMethod","amqp_xmlspec::amqp0_9_1::class::connection","",null,null],[3,"StartOkMethod","","",null,null],[3,"SecureMethod","","",null,null],[3,"SecureOkMethod","","",null,null],[3,"TuneMethod","","",null,null],[3,"TuneOkMethod","","",null,null],[3,"OpenMethod","","",null,null],[3,"OpenOkMethod","","",null,null],[3,"CloseMethod","","",null,null],[3,"CloseOk","","",null,null],[17,"METHOD_START","","",null,null],[17,"METHOD_START_OK","","",null,null],[17,"METHOD_SECURE","","",null,null],[17,"METHOD_SECURE_OK","","",null,null],[17,"METHOD_TUNE","","",null,null],[17,"METHOD_TUNE_OK","","",null,null],[17,"METHOD_OPEN","","",null,null],[17,"METHOD_OPEN_OK","","",null,null],[17,"METHOD_CLOSE","","",null,null],[17,"METHOD_CLOSE_OK","","",null,null],[11,"new","","",7,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"table"},{"name":"a"},{"name":"b"}],"output":{"name":"self"}}],[11,"version_major","","",7,null],[11,"version_minor","","",7,null],[11,"server_properties","","",7,null],[11,"mechanisms","","",7,null],[11,"locales","","",7,null],[11,"new","","",8,{"inputs":[{"name":"table"},{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"self"}}],[11,"client_properties","","",8,null],[11,"mechanism","","",8,null],[11,"response","","",8,null],[11,"locale","","",8,null],[11,"new","","",9,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"challenge","","",9,null],[11,"new","","",10,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"response","","",10,null],[11,"new","","",11,{"inputs":[{"name":"u16"},{"name":"u32"},{"name":"u16"}],"output":{"name":"self"}}],[11,"channel_max","","",11,null],[11,"frame_max","","",11,null],[11,"heartbeat","","",11,null],[11,"new","","",12,{"inputs":[{"name":"u16"},{"name":"u32"},{"name":"u16"}],"output":{"name":"self"}}],[11,"channel_max","","",12,null],[11,"frame_max","","",12,null],[11,"heartbeat","","",12,null],[11,"new","","",13,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"virtual_host","","",13,null],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"u16"},{"name":"a"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"reply_code","","",15,null],[11,"reply_text","","",15,null],[11,"class_id","","",15,null],[11,"method_id","","",15,null],[0,"channel","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"OpenMethod","amqp_xmlspec::amqp0_9_1::class::channel","",null,null],[3,"OpenOkMethod","","",null,null],[3,"FlowMethod","","",null,null],[3,"FlowOkMethod","","",null,null],[3,"CloseMethod","","",null,null],[3,"CloseOk","","",null,null],[17,"METHOD_OPEN","","",null,null],[17,"METHOD_OPEN_OK","","",null,null],[17,"METHOD_FLOW","","",null,null],[17,"METHOD_FLOW_OK","","",null,null],[17,"METHOD_CLOSE","","",null,null],[17,"METHOD_CLOSE_OK","","",null,null],[11,"new","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",18,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"active","","",18,null],[11,"new","","",19,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"active","","",19,null],[11,"new","","",20,{"inputs":[{"name":"u16"},{"name":"a"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"reply_code","","",20,null],[11,"reply_text","","",20,null],[11,"class_id","","",20,null],[11,"method_id","","",20,null],[0,"exchange","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"DeclareMethod","amqp_xmlspec::amqp0_9_1::class::exchange","",null,null],[3,"DeclareOk","","",null,null],[3,"DeleteMethod","","",null,null],[3,"DeleteOk","","",null,null],[17,"METHOD_DECLARE","","",null,null],[17,"METHOD_DECLARE_OK","","",null,null],[17,"METHOD_DELETE","","",null,null],[17,"METHOD_DELETE_OK","","",null,null],[11,"new","","",21,{"inputs":[{"name":"a"},{"name":"b"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"table"}],"output":{"name":"self"}}],[11,"exchange","","",21,null],[11,"ty","","",21,null],[11,"passive","","",21,null],[11,"durable","","",21,null],[11,"no_wait","","",21,null],[11,"arguments","","",21,null],[11,"new","","",22,{"inputs":[{"name":"a"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"exchange","","",22,null],[11,"if_unused","","",22,null],[11,"no_wait","","",22,null],[0,"queue","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"DeclareMethod","amqp_xmlspec::amqp0_9_1::class::queue","",null,null],[3,"DeclareOkMethod","","",null,null],[3,"BindMethod","","",null,null],[3,"BindOk","","",null,null],[3,"UnbindMethod","","",null,null],[3,"UnbindOk","","",null,null],[3,"PurgeMethod","","",null,null],[3,"PurgeOkMethod","","",null,null],[3,"DeleteMethod","","",null,null],[3,"DeleteOkMethod","","",null,null],[17,"METHOD_DECLARE","","",null,null],[17,"METHOD_DECLARE_OK","","",null,null],[17,"METHOD_BIND","","",null,null],[17,"METHOD_BIND_OK","","",null,null],[17,"METHOD_UNBIND","","",null,null],[17,"METHOD_UNBIND_OK","","",null,null],[17,"METHOD_PURGE","","",null,null],[17,"METHOD_PURGE_OK","","",null,null],[17,"METHOD_DELETE","","",null,null],[17,"METHOD_DELETE_OK","","",null,null],[11,"new","","",23,{"inputs":[{"name":"a"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"table"}],"output":{"name":"self"}}],[11,"queue","","",23,null],[11,"passive","","",23,null],[11,"durable","","",23,null],[11,"exclusive","","",23,null],[11,"auto_delete","","",23,null],[11,"no_wait","","",23,null],[11,"arguments","","",23,null],[11,"new","","",24,{"inputs":[{"name":"a"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"queue","","",24,null],[11,"message_count","","",24,null],[11,"consumer_count","","",24,null],[11,"new","","",25,{"inputs":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"bool"},{"name":"table"}],"output":{"name":"self"}}],[11,"queue","","",25,null],[11,"exchange","","",25,null],[11,"routing_key","","",25,null],[11,"no_wait","","",25,null],[11,"arguments","","",25,null],[11,"new","","",26,{"inputs":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"table"}],"output":{"name":"self"}}],[11,"queue","","",26,null],[11,"exchange","","",26,null],[11,"routing_key","","",26,null],[11,"arguments","","",26,null],[11,"new","","",27,{"inputs":[{"name":"a"},{"name":"bool"}],"output":{"name":"self"}}],[11,"queue","","",27,null],[11,"no_wait","","",27,null],[11,"new","","",28,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"message_count","","",28,null],[11,"new","","",29,{"inputs":[{"name":"a"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"queue","","",29,null],[11,"if_unused","","",29,null],[11,"if_empty","","",29,null],[11,"no_wait","","",29,null],[11,"new","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"message_count","","",30,null],[0,"basic","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"QosMethod","amqp_xmlspec::amqp0_9_1::class::basic","",null,null],[3,"QosOk","","",null,null],[3,"ConsumeMethod","","",null,null],[3,"ConsumeOkMethod","","",null,null],[3,"CancelMethod","","",null,null],[3,"CancelOkMethod","","",null,null],[3,"PublishMethod","","",null,null],[3,"ReturnMethod","","",null,null],[3,"DeliverMethod","","",null,null],[3,"GetMethod","","",null,null],[3,"GetOkMethod","","",null,null],[3,"GetEmptyMethod","","",null,null],[3,"AckMethod","","",null,null],[3,"RejectMethod","","",null,null],[3,"RecoverAsyncMethod","","",null,null],[3,"RecoverMethod","","",null,null],[3,"RecoverOk","","",null,null],[17,"METHOD_QOS","","",null,null],[17,"METHOD_QOS_OK","","",null,null],[17,"METHOD_CONSUME","","",null,null],[17,"METHOD_CONSUME_OK","","",null,null],[17,"METHOD_CANCEL","","",null,null],[17,"METHOD_CANCEL_OK","","",null,null],[17,"METHOD_PUBLISH","","",null,null],[17,"METHOD_RETURN","","",null,null],[17,"METHOD_DELIVER","","",null,null],[17,"METHOD_GET","","",null,null],[17,"METHOD_GET_OK","","",null,null],[17,"METHOD_GET_EMPTY","","",null,null],[17,"METHOD_ACK","","",null,null],[17,"METHOD_REJECT","","",null,null],[17,"METHOD_RECOVER_ASYNC","","",null,null],[17,"METHOD_RECOVER","","",null,null],[17,"METHOD_RECOVER_OK","","",null,null],[11,"new","","",31,{"inputs":[{"name":"u32"},{"name":"u16"},{"name":"bool"}],"output":{"name":"self"}}],[11,"prefetch_size","","",31,null],[11,"prefetch_count","","",31,null],[11,"global","","",31,null],[11,"new","","",32,{"inputs":[{"name":"a"},{"name":"b"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"table"}],"output":{"name":"self"}}],[11,"queue","","",32,null],[11,"consumer_tag","","",32,null],[11,"no_local","","",32,null],[11,"no_ack","","",32,null],[11,"exclusive","","",32,null],[11,"no_wait","","",32,null],[11,"arguments","","",32,null],[11,"new","","",33,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"consumer_tag","","",33,null],[11,"new","","",34,{"inputs":[{"name":"a"},{"name":"bool"}],"output":{"name":"self"}}],[11,"consumer_tag","","",34,null],[11,"no_wait","","",34,null],[11,"new","","",35,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"consumer_tag","","",35,null],[11,"new","","",36,{"inputs":[{"name":"a"},{"name":"b"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"exchange","","",36,null],[11,"routing_key","","",36,null],[11,"mandatory","","",36,null],[11,"immediate","","",36,null],[11,"new","","",37,{"inputs":[{"name":"u16"},{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"self"}}],[11,"reply_code","","",37,null],[11,"reply_text","","",37,null],[11,"exchange","","",37,null],[11,"routing_key","","",37,null],[11,"new","","",38,{"inputs":[{"name":"a"},{"name":"u64"},{"name":"bool"},{"name":"b"},{"name":"c"}],"output":{"name":"self"}}],[11,"consumer_tag","","",38,null],[11,"delivery_tag","","",38,null],[11,"redelivered","","",38,null],[11,"exchange","","",38,null],[11,"routing_key","","",38,null],[11,"new","","",39,{"inputs":[{"name":"a"},{"name":"bool"}],"output":{"name":"self"}}],[11,"queue","","",39,null],[11,"no_ack","","",39,null],[11,"new","","",40,{"inputs":[{"name":"u64"},{"name":"bool"},{"name":"a"},{"name":"b"},{"name":"u32"}],"output":{"name":"self"}}],[11,"delivery_tag","","",40,null],[11,"redelivered","","",40,null],[11,"exchange","","",40,null],[11,"routing_key","","",40,null],[11,"message_count","","",40,null],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",42,{"inputs":[{"name":"u64"},{"name":"bool"}],"output":{"name":"self"}}],[11,"delivery_tag","","",42,null],[11,"multiple","","",42,null],[11,"new","","",43,{"inputs":[{"name":"u64"},{"name":"bool"}],"output":{"name":"self"}}],[11,"delivery_tag","","",43,null],[11,"requeue","","",43,null],[11,"new","","",44,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"requeue","","",44,null],[11,"new","","",45,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"requeue","","",45,null],[0,"transaction","amqp_xmlspec::amqp0_9_1::class","",null,null],[3,"Select","amqp_xmlspec::amqp0_9_1::class::transaction","",null,null],[3,"SelectOk","","",null,null],[3,"Commit","","",null,null],[3,"CommitOk","","",null,null],[3,"Rollback","","",null,null],[3,"RollbackOk","","",null,null],[17,"METHOD_SELECT","","",null,null],[17,"METHOD_SELECT_OK","","",null,null],[17,"METHOD_COMMIT","","",null,null],[17,"METHOD_COMMIT_OK","","",null,null],[17,"METHOD_ROLLBACK","","",null,null],[17,"METHOD_ROLLBACK_OK","","",null,null],[17,"CLASS_CONNECTION","amqp_xmlspec::amqp0_9_1::class","",null,null],[17,"CLASS_CHANNEL","","",null,null],[17,"CLASS_EXCHANGE","","",null,null],[17,"CLASS_QUEUE","","",null,null],[17,"CLASS_BASIC","","",null,null],[17,"CLASS_TX","","",null,null],[17,"FRAME_MIN_SIZE","amqp_xmlspec::amqp0_9_1","",null,null],[17,"FRAME_END","","",null,null]],"paths":[[4,"Type"],[4,"ErrorClass"],[4,"Type"],[4,"Type"],[4,"Type"],[4,"Type"],[8,"Error"],[3,"StartMethod"],[3,"StartOkMethod"],[3,"SecureMethod"],[3,"SecureOkMethod"],[3,"TuneMethod"],[3,"TuneOkMethod"],[3,"OpenMethod"],[3,"OpenOkMethod"],[3,"CloseMethod"],[3,"OpenMethod"],[3,"OpenOkMethod"],[3,"FlowMethod"],[3,"FlowOkMethod"],[3,"CloseMethod"],[3,"DeclareMethod"],[3,"DeleteMethod"],[3,"DeclareMethod"],[3,"DeclareOkMethod"],[3,"BindMethod"],[3,"UnbindMethod"],[3,"PurgeMethod"],[3,"PurgeOkMethod"],[3,"DeleteMethod"],[3,"DeleteOkMethod"],[3,"QosMethod"],[3,"ConsumeMethod"],[3,"ConsumeOkMethod"],[3,"CancelMethod"],[3,"CancelOkMethod"],[3,"PublishMethod"],[3,"ReturnMethod"],[3,"DeliverMethod"],[3,"GetMethod"],[3,"GetOkMethod"],[3,"GetEmptyMethod"],[3,"AckMethod"],[3,"RejectMethod"],[3,"RecoverAsyncMethod"],[3,"RecoverMethod"]]};
searchIndex["amqp_xmlgen"] = {"doc":"","items":[[4,"Error","amqp_xmlgen","",null,null],[13,"Io","","",0,null],[13,"UnknownType","","",0,null],[13,"InvalidValue","","",0,null],[0,"amqp0","","",null,null],[3,"Protocol","amqp_xmlgen::amqp0","",null,null],[11,"new","","",1,{"inputs":[{"name":"protocol"}],"output":{"name":"self"}}],[11,"parsed_protocol","","",1,null],[11,"map_constant","","",1,null],[11,"map_domain","","",1,null],[11,"map_error_class_enum_name","","",1,null],[11,"map_group_enum_name","","",1,null],[11,"map_group_constant_name","","",1,null],[11,"map_value","","",1,null],[11,"write_rust","","",1,null],[8,"WriteRust","amqp_xmlgen","",null,null],[10,"write_rust","","",2,null],[8,"WrittenBy","","",null,null],[10,"write_rust_for","","",3,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Error"],[3,"Protocol"],[8,"WriteRust"],[8,"WrittenBy"]]};
searchIndex["inflections"] = {"doc":"This is a library which allows anyone to change various properties of their\nstrings with a heavy emphasis on performance. Allows programmers to\nmanipulate a single programatic name consistently in multiple contexts.","items":[[0,"case","inflections","Utilities to change the case of a string to another case. Supports “lower\ncase,” “UPPER CASE,” “sentence case,” “Title Case,” “camelCase,”\n“PascalCase,” “kebab-case,” “Train-Case,” “snake_case,” and\n“CONSTANT_CASE.”",null,null],[5,"to_lower_case","inflections::case","Converts any case into lower case ignoring seperators.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_lower_case","","Check to see if a string is completely lower case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_upper_case","","Converts any case into UPPER CASE ignoring seperators.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_upper_case","","Check to see if a string is completely UPPER CASE.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_sentence_case","","Converts any case into traditional sentence case without capitalizing the\nfirst letter.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_sentence_case","","Check to see if a string is sentence case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_title_case","","Converts any case into title case where *every* word is capitalized.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_title_case","","Check to see if a string is Title Case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_camel_case","","Converts any case into camelCase.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_camel_case","","Check to see if a string is camelCase.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_pascal_case","","Converts any case into PascalCase.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_pascal_case","","Check to see if a string is PascalCase.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_kebab_case","","Converts any case into kebab-case.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_kebab_case","","Check to see if a string is kebab-case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_train_case","","Converts any case into Train-Case.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_train_case","","Check to see if a string is Train-Case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_snake_case","","Converts any case into snake_case.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_snake_case","","Check to see if a string is snake_case.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_constant_case","","Converts any case into CONSTANT_CASE.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_constant_case","","Check to see if a string is CONSTANT_CASE.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[8,"Inflect","inflections","A trait which proxies the other methods from this crate in a method syntax\non `&amp;str` and `String`. The only ways these methods change is the string\nparameter becomes `&amp;self`.",null,null],[10,"to_sentence_case","","",0,null],[10,"is_sentence_case","","",0,null],[10,"to_title_case","","",0,null],[10,"is_title_case","","",0,null],[10,"to_camel_case","","",0,null],[10,"is_camel_case","","",0,null],[10,"to_pascal_case","","",0,null],[10,"is_pascal_case","","",0,null],[10,"to_kebab_case","","",0,null],[10,"is_kebab_case","","",0,null],[10,"to_train_case","","",0,null],[10,"is_train_case","","",0,null],[10,"to_snake_case","","",0,null],[10,"is_snake_case","","",0,null],[10,"to_constant_case","","",0,null],[10,"is_constant_case","","",0,null]],"paths":[[8,"Inflect"]]};
searchIndex["amqp_xmlparse"] = {"doc":"","items":[[0,"amqp0","amqp_xmlparse","",null,null],[3,"Class","amqp_xmlparse::amqp0","",null,null],[3,"Constant","","",null,null],[3,"Domain","","",null,null],[3,"Field","","",null,null],[3,"Method","","",null,null],[3,"Protocol","","",null,null],[4,"Parser","","",null,null],[13,"Start","","",0,null],[13,"Idle","","",0,null],[13,"Child","","",0,null],[13,"Finished","","",0,null],[4,"VoidParser","","",null,null],[13,"Parsing","","",1,null],[13,"Finished","","",1,null],[4,"ParseError","","",null,null],[13,"ExpectedAttribute","","",2,null],[13,"ExpectedElementStart","","",2,null],[13,"ExpectedAmqpRoot","","",2,null],[13,"ExpectedEnd","","",2,null],[13,"Io","","",2,null],[13,"Xml","","",2,null],[5,"parse","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"name","","",3,null],[11,"index","","",3,null],[11,"methods","","",3,null],[11,"fmt","","",4,null],[11,"name","","",4,null],[11,"domain","","",4,null],[11,"is_optional","","",4,null],[11,"is_reserved","","",4,null],[11,"fmt","","",5,null],[11,"new","","",5,{"inputs":[{"name":"n"},{"name":"i"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","",5,null],[11,"name","","",5,null],[11,"fields","","",5,null],[11,"fmt","","",6,null],[11,"name","","",6,null],[11,"value","","",6,null],[11,"class","","",6,null],[11,"fmt","","",7,null],[11,"name","","",7,null],[11,"mapping","","",7,null],[11,"fmt","","",8,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"domain","","",8,null],[11,"classes","","",8,null],[11,"constants","","",8,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",0,null],[11,"from","","",8,{"inputs":[{"name":"parser"}],"output":{"name":"protocol"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",1,null],[11,"new","","",1,{"inputs":[],"output":{"name":"voidparser"}}],[11,"parse","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"xmlerror"}],"output":{"name":"self"}}]],"paths":[[4,"Parser"],[4,"VoidParser"],[4,"ParseError"],[3,"Class"],[3,"Field"],[3,"Method"],[3,"Constant"],[3,"Domain"],[3,"Protocol"]]};
searchIndex["xml"] = {"doc":"This crate currently provides almost XML 1.0/1.1-compliant pull parser.","items":[[3,"ParserConfig","xml","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",0,null],[3,"EmitterConfig","","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `&quot;\\n&quot;`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `&quot;  &quot;`\n(two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names.\nDefault is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments,\nif necessary. Default is true.",1,null],[0,"macros","","Contains several macros used in this crate.",null,null],[0,"name","","Contains XML qualified names manipulation types and functions.",null,null],[3,"Name","xml::name","Represents a qualified XML name.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",2,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",2,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",2,null],[3,"ReprDisplay","","A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is\ndisplayed in an XML document.",null,null],[3,"OwnedName","","An owned variant of `Name`.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",3,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",3,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",3,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"from","","",2,null],[11,"fmt","","",2,null],[11,"to_owned","","Returns an owned variant of the qualified name.",2,null],[11,"local","","Returns a new `Name` instance representing plain local name.",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"prefixed","","Returns a new `Name` instance with the given local name and prefix.",2,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"name"}}],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",2,{"inputs":[{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"name"}}],[11,"to_repr","","Returns a correct XML representation of this local name and prefix.",2,null],[11,"repr_display","","Returns a structure which can be displayed with `std::fmt` machinery to obtain this\nlocal name and prefix.",2,null],[11,"prefix_repr","","Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.",2,null],[11,"fmt","","",4,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",3,null],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",3,{"inputs":[{"name":"s"}],"output":{"name":"ownedname"}}],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",3,{"inputs":[{"name":"s1"},{"name":"s2"},{"name":"option"}],"output":{"name":"ownedname"}}],[11,"prefix_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",3,null],[11,"namespace_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",3,null],[11,"from","","",3,{"inputs":[{"name":"name"}],"output":{"name":"ownedname"}}],[11,"from_str","","Parses the given string slice into a qualified name.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"attribute","xml","Contains XML attributes manipulation types and functions.",null,null],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute.",null,null],[12,"name","","Attribute name.",5,null],[12,"value","","Attribute value.",5,null],[3,"OwnedAttribute","","An owned version of an XML attribute.",null,null],[12,"name","","Attribute name.",6,null],[12,"value","","Attribute value.",6,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"to_owned","","Creates an owned attribute out of this borrowed one.",5,null],[11,"new","","Creates a borrowed attribute using the provided borrowed name and a borrowed string value.",5,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"attribute"}}],[11,"fmt","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"borrow","","Returns a borrowed `Attribute` out of this owned one.",6,null],[11,"new","","Creates a new owned attribute using the provided owned name and an owned string value.",6,{"inputs":[{"name":"ownedname"},{"name":"s"}],"output":{"name":"ownedattribute"}}],[11,"fmt","","",6,null],[0,"common","xml","Contains common types and functions used throughout the library.",null,null],[3,"TextPosition","xml::common","Represents a position inside some textual document.",null,null],[12,"row","","Row, counting from 0",7,null],[12,"column","","Column, counting from 0",7,null],[4,"XmlVersion","","XML version enumeration.",null,null],[13,"Version10","","XML version 1.0.",8,null],[13,"Version11","","XML version 1.1.",8,null],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[8,"Position","","Get the position in the document corresponding to the object",null,null],[10,"position","","Returns the current position or a position corresponding to the object.",9,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","Creates a new position initialized to the beginning of the document",7,{"inputs":[],"output":{"name":"textposition"}}],[11,"advance","","Advances the position in a line",7,null],[11,"advance_to_tab","","Advances the position in a line to the next tab position",7,null],[11,"new_line","","Advances the position to the beginning of the next line",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"position","","",7,null],[11,"eq","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[0,"escape","xml","Contains functions for performing XML special characters escaping.",null,null],[5,"escape_str_attribute","xml::escape","Performs escaping of common XML characters inside an attribute value.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[5,"escape_str_pcdata","","Performs escaping of common XML characters inside PCDATA.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[0,"namespace","xml","Contains namespace manipulation types and functions.",null,null],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs.",null,null],[12,"0","","",10,null],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces.",null,null],[12,"0","","",11,null],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack.",null,null],[3,"CheckedTarget","","A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.",null,null],[6,"NamespaceMappings","","An alias for iterator type for namespace mappings contained in a namespace.",null,null],[6,"UriMapping","","A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.",null,null],[17,"NS_XMLNS_PREFIX","","Designates prefix for namespace definitions.",null,null],[17,"NS_XMLNS_URI","","Designates the standard URI for `xmlns` prefix.",null,null],[17,"NS_XML_PREFIX","","Designates prefix for a namespace containing several special predefined attributes.",null,null],[17,"NS_XML_URI","","Designates the standard URI for `xml` prefix.",null,null],[17,"NS_NO_PREFIX","","Designates the absence of prefix in a qualified name.",null,null],[17,"NS_EMPTY_URI","","Designates an empty namespace URI, which is equivalent to absence of namespace.",null,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"empty","","Returns an empty namespace.",10,{"inputs":[],"output":{"name":"namespace"}}],[11,"is_empty","","Checks whether this namespace is empty.",10,null],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but default mappings.",10,null],[11,"contains","","Checks whether this namespace mapping contains the given prefix.",10,null],[11,"put","","Puts a mapping into this namespace.",10,null],[11,"force_put","","Puts a mapping into this namespace forcefully.",10,null],[11,"get","","Queries the namespace for the given prefix.",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"empty","","Returns an empty namespace stack.",11,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"default","","Returns a namespace stack with default items in it.",11,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"push_empty","","Adds an empty namespace to the top of this stack.",11,null],[11,"pop","","Removes the topmost namespace in this stack.",11,null],[11,"try_pop","","Removes the topmost namespace in this stack.",11,null],[11,"peek_mut","","Borrows the topmost namespace mutably, leaving the stack intact.",11,null],[11,"peek","","Borrows the topmost namespace immutably, leaving the stack intact.",11,null],[11,"put_checked","","Puts a mapping into the topmost namespace if this stack does not already contain one.",11,null],[11,"put","","Puts a mapping into the topmost namespace in this stack.",11,null],[11,"get","","Performs a search for the given prefix in the whole stack.",11,null],[11,"squash","","Combines this stack of namespaces into a single namespace.",11,null],[11,"checked_target","","Returns an object which implements `Extend` using `put_checked()` instead of `put()`.",11,null],[11,"iter","","Returns an iterator over all mappings in this namespace stack.",11,null],[11,"next","","",12,null],[11,"extend","","",10,null],[11,"extend","","",11,null],[11,"extend","","",13,null],[0,"reader","xml","Contains high-level interface for a pull-based XML parser.",null,null],[3,"ParserConfig","xml::reader","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",0,null],[3,"Error","","An XML parsing error.",null,null],[3,"EventReader","","A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.",null,null],[3,"Events","","An iterator over XML events created from some type implementing `Read`.",null,null],[4,"XmlEvent","","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",14,null],[12,"version","xml::reader::XmlEvent","XML version.",14,null],[12,"encoding","","XML document encoding.",14,null],[12,"standalone","","XML standalone declaration.",14,null],[13,"EndDocument","xml::reader","Denotes to the end of the document stream.",14,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",14,null],[12,"name","xml::reader::XmlEvent","Processing instruction target.",14,null],[12,"data","","Processing instruction content.",14,null],[13,"StartElement","xml::reader","Denotes a beginning of an XML element.",14,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",14,null],[12,"attributes","","A list of attributes associated with the element.",14,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",14,null],[13,"EndElement","xml::reader","Denotes an end of an XML element.",14,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",14,null],[13,"CData","xml::reader","Denotes CDATA content.",14,null],[13,"Comment","","Denotes a comment.",14,null],[13,"Characters","","Denotes character data outside of tags.",14,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",14,null],[4,"ErrorKind","","",null,null],[13,"Syntax","","",15,null],[13,"Io","","",15,null],[13,"Utf8","","",15,null],[13,"UnexpectedEof","","",15,null],[11,"fmt","xml","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","Returns a new config with default values.",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"create_reader","","Creates an XML reader with this configuration.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",0,null],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",0,null],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"clone","xml::reader","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"as_writer_event","","Obtains a writer event from this reader event.",14,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"position","","",16,null],[11,"msg","","Returns a reference to a message which is contained inside this error.",16,null],[11,"kind","","",16,null],[11,"description","","",16,null],[11,"from","","",16,null],[11,"from","","",16,{"inputs":[{"name":"charreaderror"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",15,null],[11,"eq","","",15,null],[6,"Result","","A result type yielded by `XmlReader`.",null,null],[11,"new","","Creates a new reader, consuming the given stream.",17,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"new_with_config","","Creates a new reader with the provded configuration, consuming the given stream.",17,{"inputs":[{"name":"r"},{"name":"parserconfig"}],"output":{"name":"eventreader"}}],[11,"next","","Pulls and returns next XML event from the stream.",17,null],[11,"source","","",17,null],[11,"source_mut","","",17,null],[11,"into_inner","","Unwraps this `EventReader`, returning the underlying reader.",17,null],[11,"position","","Returns the position of the last event produced by the reader.",17,null],[11,"into_iter","","",17,null],[11,"into_inner","","Unwraps the iterator, returning the internal `EventReader`.",18,null],[11,"next","","",18,null],[11,"from_str","","A convenience method to create an `XmlReader` from a string slice.",17,{"inputs":[{"name":"str"}],"output":{"name":"eventreader"}}],[0,"writer","xml","Contains high-level interface for an events-based XML emitter.",null,null],[3,"EmitterConfig","xml::writer","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `&quot;\\n&quot;`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `&quot;  &quot;`\n(two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names.\nDefault is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments,\nif necessary. Default is true.",1,null],[3,"EventWriter","","A wrapper around an `std::io::Write` instance which emits XML document according to provided\nevents.",null,null],[4,"Error","","An error which may be returned by `XmlWriter` when writing XML events.",null,null],[13,"Io","","An I/O error occured in the underlying `Write` instance.",19,null],[13,"DocumentStartAlreadyEmitted","","Document declaration has already been written to the output stream.",19,null],[13,"LastElementNameNotAvailable","","The name of the last opening element is not available.",19,null],[13,"EndElementNameIsNotEqualToLastStartElementName","","The name of the last opening element is not equal to the name of the provided\nclosing element.",19,null],[13,"EndElementNameIsNotSpecified","","End element name is not specified when it is needed, for example, when automatic\nclosing is not enabled in configuration.",19,null],[11,"fmt","","",19,null],[11,"from","","",19,{"inputs":[{"name":"error"}],"output":{"name":"emittererror"}}],[11,"fmt","","",19,null],[11,"fmt","xml","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","Creates an emitter configuration with default values.",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"create_writer","","Creates an XML writer with this configuration.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",1,null],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",1,null],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",1,null],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",1,null],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",1,null],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",1,null],[11,"keep_element_names_stack","","Sets the field to the provided value and returns updated config object.",1,null],[11,"autopad_comments","","Sets the field to the provided value and returns updated config object.",1,null],[0,"events","xml::writer","Contains `XmlEvent` datatype, instances of which are consumed by the writer.",null,null],[3,"EndElementBuilder","xml::writer::events","",null,null],[3,"StartElementBuilder","","A builder for a starting element event.",null,null],[4,"XmlEvent","","A part of an XML output stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",20,null],[12,"version","xml::writer::events::XmlEvent","XML version.",20,null],[12,"encoding","","XML document encoding.",20,null],[12,"standalone","","XML standalone declaration.",20,null],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",20,null],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",20,null],[12,"data","","Processing instruction content.",20,null],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",20,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",20,null],[12,"attributes","","A list of attributes associated with the element.",20,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",20,null],[13,"EndElement","xml::writer::events","Denotes an end of an XML element.",20,null],[12,"name","xml::writer::events::XmlEvent","Optional qualified name of the element.",20,null],[13,"CData","xml::writer::events","Denotes CDATA content.",20,null],[13,"Comment","","Denotes a comment.",20,null],[13,"Characters","","Denotes character data outside of tags.",20,null],[11,"processing_instruction","","Returns an writer event for a processing instruction.",20,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"xmlevent"}}],[11,"start_element","","Returns a builder for a starting element.",20,{"inputs":[{"name":"s"}],"output":{"name":"startelementbuilder"}}],[11,"end_element","","Returns a builder for an closing element.",20,{"inputs":[],"output":{"name":"endelementbuilder"}}],[11,"cdata","","Returns a CDATA event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"characters","","Returns a regular characters (PCDATA) event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"comment","","Returns a comment event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"name","","Sets the name of this closing element.",21,null],[11,"from","","",20,{"inputs":[{"name":"endelementbuilder"}],"output":{"name":"xmlevent"}}],[11,"attr","","Sets an attribute value of this element to the given string.",22,null],[11,"ns","","Adds a namespace to the current namespace context.",22,null],[11,"default_ns","","Adds a default namespace mapping to the current namespace context.",22,null],[11,"from","","",20,{"inputs":[{"name":"startelementbuilder"}],"output":{"name":"xmlevent"}}],[6,"Result","xml::writer","A result type yielded by `XmlWriter`.",null,null],[11,"new","","Creates a new `EventWriter` out of an `std::io::Write` instance using the default\nconfiguration.",23,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"new_with_config","","Creates a new `EventWriter` out of an `std::io::Write` instance using the provided\nconfiguration.",23,{"inputs":[{"name":"w"},{"name":"emitterconfig"}],"output":{"name":"eventwriter"}}],[11,"write","","Writes the next piece of XML document according to the provided event.",23,null],[11,"into_inner","","Unwraps this `EventWriter`, returning the underlying writer.",23,null]],"paths":[[3,"ParserConfig"],[3,"EmitterConfig"],[3,"Name"],[3,"OwnedName"],[3,"ReprDisplay"],[3,"Attribute"],[3,"OwnedAttribute"],[3,"TextPosition"],[4,"XmlVersion"],[8,"Position"],[3,"Namespace"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"CheckedTarget"],[4,"XmlEvent"],[4,"ErrorKind"],[3,"Error"],[3,"EventReader"],[3,"Events"],[4,"Error"],[4,"XmlEvent"],[3,"EndElementBuilder"],[3,"StartElementBuilder"],[3,"EventWriter"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
