// Generated by build.rs script in amqp0-parser-nom
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-parser"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-parser"
//
// EDITORS BEWARE: Your modifications may be overridden
#![allow(unused_variables)]

use nom::{IResult, be_u8, be_u16, be_u32, be_u64};

// Class basic
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Ack {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
multiple: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Ack::new(delivery_tag, multiple))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Cancel<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Cancel::new(consumer_tag, no_wait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::CancelOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::amqp9_1::basic::CancelOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Consume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
consumer_tag: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::amqp9_1::basic::Consume::new(queue, consumer_tag, flag1.0, flag1.1, flag1.2, flag1.3, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::ConsumeOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::amqp9_1::basic::ConsumeOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Deliver<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::amqp9_1::basic::Deliver::new(consumer_tag, delivery_tag, redelivered, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Get<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
no_ack: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Get::new(queue, no_ack))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::GetEmpty {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,call!(::common::shortstr) >>
(::primitives::amqp9_1::basic::GetEmpty::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::GetOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
message_count: be_u32 >>
(::primitives::amqp9_1::basic::GetOk::new(delivery_tag, redelivered, exchange, routing_key, message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Publish<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::amqp9_1::basic::Publish::new(exchange, routing_key, flag1.0, flag1.1))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Qos {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Qos::new(prefetch_size, prefetch_count, global))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::QosOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::basic::QosOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Recover {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Recover::new(requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::RecoverAsync {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::RecoverAsync::new(requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::RecoverOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::basic::RecoverOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Reject {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::basic::Reject::new(delivery_tag, requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::Return<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::amqp9_1::basic::Return::new(reply_code, reply_text, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::basic::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

80 => map!(
call!(<::primitives::amqp9_1::basic::Ack as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Ack
) | // map
30 => map!(
call!(<::primitives::amqp9_1::basic::Cancel as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Cancel
) | // map
31 => map!(
call!(<::primitives::amqp9_1::basic::CancelOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::CancelOk
) | // map
20 => map!(
call!(<::primitives::amqp9_1::basic::Consume as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Consume
) | // map
21 => map!(
call!(<::primitives::amqp9_1::basic::ConsumeOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::ConsumeOk
) | // map
60 => map!(
call!(<::primitives::amqp9_1::basic::Deliver as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Deliver
) | // map
70 => map!(
call!(<::primitives::amqp9_1::basic::Get as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Get
) | // map
72 => map!(
call!(<::primitives::amqp9_1::basic::GetEmpty as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::GetEmpty
) | // map
71 => map!(
call!(<::primitives::amqp9_1::basic::GetOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::GetOk
) | // map
40 => map!(
call!(<::primitives::amqp9_1::basic::Publish as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Publish
) | // map
10 => map!(
call!(<::primitives::amqp9_1::basic::Qos as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Qos
) | // map
11 => map!(
call!(<::primitives::amqp9_1::basic::QosOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::QosOk
) | // map
110 => map!(
call!(<::primitives::amqp9_1::basic::Recover as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Recover
) | // map
100 => map!(
call!(<::primitives::amqp9_1::basic::RecoverAsync as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::RecoverAsync
) | // map
111 => map!(
call!(<::primitives::amqp9_1::basic::RecoverOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::RecoverOk
) | // map
90 => map!(
call!(<::primitives::amqp9_1::basic::Reject as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Reject
) | // map
50 => map!(
call!(<::primitives::amqp9_1::basic::Return as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::basic::ClassMethod::Return
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::basic::SpecMethod<'a>
// Class channel
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::Close<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::amqp9_1::channel::Close::new(reply_code, reply_text, class_id, method_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::CloseOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::channel::CloseOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::Flow {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,active: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::channel::Flow::new(active))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::FlowOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,active: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::channel::FlowOk::new(active))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::Open {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,call!(::common::shortstr) >>
(::primitives::amqp9_1::channel::Open::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::OpenOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,call!(::common::longstr) >>
(::primitives::amqp9_1::channel::OpenOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::channel::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

40 => map!(
call!(<::primitives::amqp9_1::channel::Close as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::Close
) | // map
41 => map!(
call!(<::primitives::amqp9_1::channel::CloseOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::CloseOk
) | // map
20 => map!(
call!(<::primitives::amqp9_1::channel::Flow as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::Flow
) | // map
21 => map!(
call!(<::primitives::amqp9_1::channel::FlowOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::FlowOk
) | // map
10 => map!(
call!(<::primitives::amqp9_1::channel::Open as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::Open
) | // map
11 => map!(
call!(<::primitives::amqp9_1::channel::OpenOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::channel::ClassMethod::OpenOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::channel::SpecMethod<'a>
// Class connection
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::Close<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::amqp9_1::connection::Close::new(reply_code, reply_text, class_id, method_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::CloseOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::connection::CloseOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::Open<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,virtual_host: call!(::common::shortstr) >>
call!(::common::shortstr) >>
bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::connection::Open::new(virtual_host))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::OpenOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,call!(::common::shortstr) >>
(::primitives::amqp9_1::connection::OpenOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::Secure<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,challenge: call!(::common::longstr) >>
(::primitives::amqp9_1::connection::Secure::new(challenge))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::SecureOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,response: call!(::common::longstr) >>
(::primitives::amqp9_1::connection::SecureOk::new(response))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::Start<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,version_major: be_u8 >>
version_minor: be_u8 >>
server_properties: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
mechanisms: call!(::common::longstr) >>
locales: call!(::common::longstr) >>
(::primitives::amqp9_1::connection::Start::new(version_major, version_minor, server_properties, mechanisms, locales))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::StartOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,client_properties: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
mechanism: call!(::common::shortstr) >>
response: call!(::common::longstr) >>
locale: call!(::common::shortstr) >>
(::primitives::amqp9_1::connection::StartOk::new(client_properties, mechanism, response, locale))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::Tune {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::amqp9_1::connection::Tune::new(channel_max, frame_max, heartbeat))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::TuneOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::amqp9_1::connection::TuneOk::new(channel_max, frame_max, heartbeat))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::connection::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

50 => map!(
call!(<::primitives::amqp9_1::connection::Close as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::Close
) | // map
51 => map!(
call!(<::primitives::amqp9_1::connection::CloseOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::CloseOk
) | // map
40 => map!(
call!(<::primitives::amqp9_1::connection::Open as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::Open
) | // map
41 => map!(
call!(<::primitives::amqp9_1::connection::OpenOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::OpenOk
) | // map
20 => map!(
call!(<::primitives::amqp9_1::connection::Secure as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::Secure
) | // map
21 => map!(
call!(<::primitives::amqp9_1::connection::SecureOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::SecureOk
) | // map
10 => map!(
call!(<::primitives::amqp9_1::connection::Start as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::Start
) | // map
11 => map!(
call!(<::primitives::amqp9_1::connection::StartOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::StartOk
) | // map
30 => map!(
call!(<::primitives::amqp9_1::connection::Tune as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::Tune
) | // map
31 => map!(
call!(<::primitives::amqp9_1::connection::TuneOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::connection::ClassMethod::TuneOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::connection::SpecMethod<'a>
// Class exchange
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::exchange::Declare<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
exchange: call!(::common::shortstr) >>
ty: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::amqp9_1::exchange::Declare::new(exchange, ty, flag1.0, flag1.1, flag1.2, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::exchange::DeclareOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::exchange::DeclareOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::exchange::Delete<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
exchange: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::amqp9_1::exchange::Delete::new(exchange, flag1.0, flag1.1))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::exchange::DeleteOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::exchange::DeleteOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::exchange::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::amqp9_1::exchange::Declare as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::exchange::ClassMethod::Declare
) | // map
11 => map!(
call!(<::primitives::amqp9_1::exchange::DeclareOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::exchange::ClassMethod::DeclareOk
) | // map
20 => map!(
call!(<::primitives::amqp9_1::exchange::Delete as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::exchange::ClassMethod::Delete
) | // map
21 => map!(
call!(<::primitives::amqp9_1::exchange::DeleteOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::exchange::ClassMethod::DeleteOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::exchange::SpecMethod<'a>
// Class queue
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::Bind<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::amqp9_1::queue::Bind::new(queue, exchange, routing_key, no_wait, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::BindOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::queue::BindOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::Declare<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::amqp9_1::queue::Declare::new(queue, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::DeclareOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,queue: call!(::common::shortstr) >>
message_count: be_u32 >>
consumer_count: be_u32 >>
(::primitives::amqp9_1::queue::DeclareOk::new(queue, message_count, consumer_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::Delete<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::amqp9_1::queue::Delete::new(queue, flag1.0, flag1.1, flag1.2))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::DeleteOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,message_count: be_u32 >>
(::primitives::amqp9_1::queue::DeleteOk::new(message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::Purge<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
(::primitives::amqp9_1::queue::Purge::new(queue, no_wait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::PurgeOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,message_count: be_u32 >>
(::primitives::amqp9_1::queue::PurgeOk::new(message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::Unbind<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::amqp9_1::queue::Unbind::new(queue, exchange, routing_key, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::UnbindOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::queue::UnbindOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::queue::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

20 => map!(
call!(<::primitives::amqp9_1::queue::Bind as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::Bind
) | // map
21 => map!(
call!(<::primitives::amqp9_1::queue::BindOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::BindOk
) | // map
10 => map!(
call!(<::primitives::amqp9_1::queue::Declare as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::Declare
) | // map
11 => map!(
call!(<::primitives::amqp9_1::queue::DeclareOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::DeclareOk
) | // map
40 => map!(
call!(<::primitives::amqp9_1::queue::Delete as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::Delete
) | // map
41 => map!(
call!(<::primitives::amqp9_1::queue::DeleteOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::DeleteOk
) | // map
30 => map!(
call!(<::primitives::amqp9_1::queue::Purge as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::Purge
) | // map
31 => map!(
call!(<::primitives::amqp9_1::queue::PurgeOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::PurgeOk
) | // map
50 => map!(
call!(<::primitives::amqp9_1::queue::Unbind as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::Unbind
) | // map
51 => map!(
call!(<::primitives::amqp9_1::queue::UnbindOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::queue::ClassMethod::UnbindOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::queue::SpecMethod<'a>
// Class tx
impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::Commit {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::Commit::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::CommitOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::CommitOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::Rollback {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::Rollback::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::RollbackOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::RollbackOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::Select {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::Select::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::SelectOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::amqp9_1::tx::SelectOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::tx::ClassMethod {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

20 => map!(
call!(<::primitives::amqp9_1::tx::Commit as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::Commit
) | // map
21 => map!(
call!(<::primitives::amqp9_1::tx::CommitOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::CommitOk
) | // map
30 => map!(
call!(<::primitives::amqp9_1::tx::Rollback as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::Rollback
) | // map
31 => map!(
call!(<::primitives::amqp9_1::tx::RollbackOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::RollbackOk
) | // map
10 => map!(
call!(<::primitives::amqp9_1::tx::Select as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::Select
) | // map
11 => map!(
call!(<::primitives::amqp9_1::tx::SelectOk as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::tx::ClassMethod::SelectOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::tx::SpecMethod<'a>

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::SpecMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

60 => map!(
call!(<::primitives::amqp9_1::BasicMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Basic
) | // map
20 => map!(
call!(<::primitives::amqp9_1::ChannelMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Channel
) | // map
10 => map!(
call!(<::primitives::amqp9_1::ConnectionMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Connection
) | // map
40 => map!(
call!(<::primitives::amqp9_1::ExchangeMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Exchange
) | // map
50 => map!(
call!(<::primitives::amqp9_1::QueueMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Queue
) | // map
90 => map!(
call!(<::primitives::amqp9_1::TxMethod as ::NomBytes>::nom_bytes, pool),
::primitives::amqp9_1::SpecMethod::Tx
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::amqp9_1::SpecMethod<'a>

impl<'a> ::NomBytes<'a> for ::primitives::amqp9_1::Frame<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u8,

3 => do_parse!(
channel: be_u16 >>
payload: map!(length_bytes!(be_u32), ::primitives::amqp9_1::FramePayload::Body) >>
(::primitives::amqp9_1::Frame::new(channel, payload))

) | // do_parse
8 => do_parse!(
payload: value!(
::primitives::amqp9_1::FramePayload::Heartbeat,
tag!(b"\x00\x00\xCE")
) >>channel: value!(0) >>(::primitives::amqp9_1::Frame::new(channel, payload))

) | // do_parse
1 => do_parse!(
channel: be_u16 >>
payload: map!(
length_value!(
be_u32,
call!(<::primitives::amqp9_1::SpecMethod as ::NomBytes>::nom_bytes, pool)
),
::primitives::amqp9_1::FramePayload::Method
) >> // map
(::primitives::amqp9_1::Frame::new(channel, payload))

) // do_parse
) // switch!
} // fn nom_bytes
} // impl NomBytes for ::primitives::amqp9_1::Frame<'a>
