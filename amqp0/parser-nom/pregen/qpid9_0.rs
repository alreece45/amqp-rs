// Generated by build.rs script in amqp0-parser-nom
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-parser"
// To format and replace the pre-generated files, use: cargo --features="amqp0-build-parser"
//
// EDITORS BEWARE: Your modifications may be overridden
#![allow(unused_variables)]

use nom::{IResult, be_u8, be_u16, be_u32, be_u64};

// Class access
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::access::Request<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,realm: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::qpid9_0::access::Request::new(realm, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::access::RequestOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
(::primitives::qpid9_0::access::RequestOk::new(ticket))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::access::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::access::Request as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::access::ClassMethod::Request
) | // map
11 => map!(
call!(<::primitives::qpid9_0::access::RequestOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::access::ClassMethod::RequestOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::access::SpecMethod<'a>
// Class basic
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Qos {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Qos::new(prefetch_size, prefetch_count, global))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::QosOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::basic::QosOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Consume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
consumer_tag: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::basic::Consume::new(ticket, queue, consumer_tag, flag1.0, flag1.1, flag1.2, flag1.3, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::ConsumeOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::basic::ConsumeOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Cancel<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
nowait: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Cancel::new(consumer_tag, nowait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::CancelOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::basic::CancelOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Publish<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::qpid9_0::basic::Publish::new(ticket, exchange, routing_key, flag1.0, flag1.1))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Return<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::qpid9_0::basic::Return::new(reply_code, reply_text, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Deliver<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::qpid9_0::basic::Deliver::new(consumer_tag, delivery_tag, redelivered, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Get<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
no_ack: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Get::new(ticket, queue, no_ack))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::GetOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
message_count: be_u32 >>
(::primitives::qpid9_0::basic::GetOk::new(delivery_tag, redelivered, exchange, routing_key, message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::GetEmpty<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,cluster_id: call!(::common::shortstr) >>
(::primitives::qpid9_0::basic::GetEmpty::new(cluster_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Ack {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
multiple: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Ack::new(delivery_tag, multiple))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Reject {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Reject::new(delivery_tag, requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::Recover {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::Recover::new(requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::RecoverSync {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::basic::RecoverSync::new(requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::RecoverSyncOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::basic::RecoverSyncOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::basic::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::basic::Qos as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Qos
) | // map
11 => map!(
call!(<::primitives::qpid9_0::basic::QosOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::QosOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::basic::Consume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Consume
) | // map
21 => map!(
call!(<::primitives::qpid9_0::basic::ConsumeOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::ConsumeOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::basic::Cancel as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Cancel
) | // map
31 => map!(
call!(<::primitives::qpid9_0::basic::CancelOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::CancelOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::basic::Publish as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Publish
) | // map
50 => map!(
call!(<::primitives::qpid9_0::basic::Return as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Return
) | // map
60 => map!(
call!(<::primitives::qpid9_0::basic::Deliver as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Deliver
) | // map
70 => map!(
call!(<::primitives::qpid9_0::basic::Get as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Get
) | // map
71 => map!(
call!(<::primitives::qpid9_0::basic::GetOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::GetOk
) | // map
72 => map!(
call!(<::primitives::qpid9_0::basic::GetEmpty as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::GetEmpty
) | // map
80 => map!(
call!(<::primitives::qpid9_0::basic::Ack as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Ack
) | // map
90 => map!(
call!(<::primitives::qpid9_0::basic::Reject as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Reject
) | // map
100 => map!(
call!(<::primitives::qpid9_0::basic::Recover as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::Recover
) | // map
102 => map!(
call!(<::primitives::qpid9_0::basic::RecoverSync as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::RecoverSync
) | // map
101 => map!(
call!(<::primitives::qpid9_0::basic::RecoverSyncOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::basic::ClassMethod::RecoverSyncOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::basic::SpecMethod<'a>
// Class channel
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Open<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,out_of_band: call!(::common::shortstr) >>
(::primitives::qpid9_0::channel::Open::new(out_of_band))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::OpenOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_id: call!(::common::longstr) >>
(::primitives::qpid9_0::channel::OpenOk::new(channel_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Flow {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,active: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::channel::Flow::new(active))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::FlowOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,active: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::channel::FlowOk::new(active))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Close<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::qpid9_0::channel::Close::new(reply_code, reply_text, class_id, method_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::CloseOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::channel::CloseOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Resume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_id: call!(::common::longstr) >>
(::primitives::qpid9_0::channel::Resume::new(channel_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Ping {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::channel::Ping::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Pong {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::channel::Pong::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::Ok {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::channel::Ok::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::channel::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::channel::Open as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Open
) | // map
11 => map!(
call!(<::primitives::qpid9_0::channel::OpenOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::OpenOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::channel::Flow as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Flow
) | // map
21 => map!(
call!(<::primitives::qpid9_0::channel::FlowOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::FlowOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::channel::Close as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Close
) | // map
41 => map!(
call!(<::primitives::qpid9_0::channel::CloseOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::CloseOk
) | // map
50 => map!(
call!(<::primitives::qpid9_0::channel::Resume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Resume
) | // map
60 => map!(
call!(<::primitives::qpid9_0::channel::Ping as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Ping
) | // map
70 => map!(
call!(<::primitives::qpid9_0::channel::Pong as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Pong
) | // map
80 => map!(
call!(<::primitives::qpid9_0::channel::Ok as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::channel::ClassMethod::Ok
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::channel::SpecMethod<'a>
// Class connection
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Start<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,version_major: be_u8 >>
version_minor: be_u8 >>
server_properties: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
mechanisms: call!(::common::longstr) >>
locales: call!(::common::longstr) >>
(::primitives::qpid9_0::connection::Start::new(version_major, version_minor, server_properties, mechanisms, locales))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::StartOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,client_properties: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
mechanism: call!(::common::shortstr) >>
response: call!(::common::longstr) >>
locale: call!(::common::shortstr) >>
(::primitives::qpid9_0::connection::StartOk::new(client_properties, mechanism, response, locale))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Secure<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,challenge: call!(::common::longstr) >>
(::primitives::qpid9_0::connection::Secure::new(challenge))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::SecureOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,response: call!(::common::longstr) >>
(::primitives::qpid9_0::connection::SecureOk::new(response))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Tune {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::qpid9_0::connection::Tune::new(channel_max, frame_max, heartbeat))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::TuneOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::qpid9_0::connection::TuneOk::new(channel_max, frame_max, heartbeat))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Open<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,virtual_host: call!(::common::shortstr) >>
capabilities: call!(::common::shortstr) >>
insist: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::connection::Open::new(virtual_host, capabilities, insist))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::OpenOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,known_hosts: call!(::common::shortstr) >>
(::primitives::qpid9_0::connection::OpenOk::new(known_hosts))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Redirect<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,host: call!(::common::shortstr) >>
known_hosts: call!(::common::shortstr) >>
(::primitives::qpid9_0::connection::Redirect::new(host, known_hosts))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::Close<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::qpid9_0::connection::Close::new(reply_code, reply_text, class_id, method_id))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::CloseOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::connection::CloseOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::connection::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::connection::Start as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Start
) | // map
11 => map!(
call!(<::primitives::qpid9_0::connection::StartOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::StartOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::connection::Secure as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Secure
) | // map
21 => map!(
call!(<::primitives::qpid9_0::connection::SecureOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::SecureOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::connection::Tune as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Tune
) | // map
31 => map!(
call!(<::primitives::qpid9_0::connection::TuneOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::TuneOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::connection::Open as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Open
) | // map
41 => map!(
call!(<::primitives::qpid9_0::connection::OpenOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::OpenOk
) | // map
42 => map!(
call!(<::primitives::qpid9_0::connection::Redirect as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Redirect
) | // map
50 => map!(
call!(<::primitives::qpid9_0::connection::Close as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::Close
) | // map
51 => map!(
call!(<::primitives::qpid9_0::connection::CloseOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::connection::ClassMethod::CloseOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::connection::SpecMethod<'a>
// Class dtx
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::dtx::Select {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::dtx::Select::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::dtx::SelectOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::dtx::SelectOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::dtx::Start<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,dtx_identifier: call!(::common::shortstr) >>
(::primitives::qpid9_0::dtx::Start::new(dtx_identifier))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::dtx::StartOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::dtx::StartOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::dtx::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::dtx::Select as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::dtx::ClassMethod::Select
) | // map
11 => map!(
call!(<::primitives::qpid9_0::dtx::SelectOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::dtx::ClassMethod::SelectOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::dtx::Start as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::dtx::ClassMethod::Start
) | // map
21 => map!(
call!(<::primitives::qpid9_0::dtx::StartOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::dtx::ClassMethod::StartOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::dtx::SpecMethod<'a>
// Class exchange
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::Declare<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
exchange: call!(::common::shortstr) >>
ty: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::exchange::Declare::new(ticket, exchange, ty, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::DeclareOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::exchange::DeclareOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::Delete<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
exchange: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::qpid9_0::exchange::Delete::new(ticket, exchange, flag1.0, flag1.1))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::DeleteOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::exchange::DeleteOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::Bound<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
queue: call!(::common::shortstr) >>
(::primitives::qpid9_0::exchange::Bound::new(exchange, routing_key, queue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::BoundOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
(::primitives::qpid9_0::exchange::BoundOk::new(reply_code, reply_text))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::exchange::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::exchange::Declare as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::Declare
) | // map
11 => map!(
call!(<::primitives::qpid9_0::exchange::DeclareOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::DeclareOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::exchange::Delete as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::Delete
) | // map
21 => map!(
call!(<::primitives::qpid9_0::exchange::DeleteOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::DeleteOk
) | // map
22 => map!(
call!(<::primitives::qpid9_0::exchange::Bound as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::Bound
) | // map
23 => map!(
call!(<::primitives::qpid9_0::exchange::BoundOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::exchange::ClassMethod::BoundOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::exchange::SpecMethod<'a>
// Class file
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Qos {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::file::Qos::new(prefetch_size, prefetch_count, global))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::QosOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::file::QosOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Consume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
consumer_tag: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
filter: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::file::Consume::new(ticket, queue, consumer_tag, flag1.0, flag1.1, flag1.2, flag1.3, filter))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::ConsumeOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::file::ConsumeOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Cancel<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
nowait: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::file::Cancel::new(consumer_tag, nowait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::CancelOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::file::CancelOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Open<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,identifier: call!(::common::shortstr) >>
content_size: be_u64 >>
(::primitives::qpid9_0::file::Open::new(identifier, content_size))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::OpenOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,staged_size: be_u64 >>
(::primitives::qpid9_0::file::OpenOk::new(staged_size))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Stage {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::file::Stage::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Publish<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
identifier: call!(::common::shortstr) >>
(::primitives::qpid9_0::file::Publish::new(ticket, exchange, routing_key, flag1.0, flag1.1, identifier))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Return<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::qpid9_0::file::Return::new(reply_code, reply_text, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Deliver<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
identifier: call!(::common::shortstr) >>
(::primitives::qpid9_0::file::Deliver::new(consumer_tag, delivery_tag, redelivered, exchange, routing_key, identifier))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Ack {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
multiple: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::file::Ack::new(delivery_tag, multiple))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::Reject {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,delivery_tag: be_u64 >>
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::file::Reject::new(delivery_tag, requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::file::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::file::Qos as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Qos
) | // map
11 => map!(
call!(<::primitives::qpid9_0::file::QosOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::QosOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::file::Consume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Consume
) | // map
21 => map!(
call!(<::primitives::qpid9_0::file::ConsumeOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::ConsumeOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::file::Cancel as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Cancel
) | // map
31 => map!(
call!(<::primitives::qpid9_0::file::CancelOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::CancelOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::file::Open as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Open
) | // map
41 => map!(
call!(<::primitives::qpid9_0::file::OpenOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::OpenOk
) | // map
50 => map!(
call!(<::primitives::qpid9_0::file::Stage as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Stage
) | // map
60 => map!(
call!(<::primitives::qpid9_0::file::Publish as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Publish
) | // map
70 => map!(
call!(<::primitives::qpid9_0::file::Return as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Return
) | // map
80 => map!(
call!(<::primitives::qpid9_0::file::Deliver as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Deliver
) | // map
90 => map!(
call!(<::primitives::qpid9_0::file::Ack as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Ack
) | // map
100 => map!(
call!(<::primitives::qpid9_0::file::Reject as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::file::ClassMethod::Reject
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::file::SpecMethod<'a>
// Class message
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Transfer<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
destination: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
ttl: be_u64 >>
priority: be_u8 >>
timestamp: be_u64 >>
delivery_mode: be_u8 >>
expiration: be_u64 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
message_id: call!(::common::shortstr) >>
correlation_id: call!(::common::shortstr) >>
reply_to: call!(::common::shortstr) >>
content_type: call!(::common::shortstr) >>
content_encoding: call!(::common::shortstr) >>
user_id: call!(::common::shortstr) >>
app_id: call!(::common::shortstr) >>
transaction_id: call!(::common::shortstr) >>
security_token: call!(::common::longstr) >>
application_headers: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
body: length_bytes!(be_u32) >>
(::primitives::qpid9_0::message::Transfer::new(ticket, destination, flag1.0, flag1.1, ttl, priority, timestamp, delivery_mode, expiration, exchange, routing_key, message_id, correlation_id, reply_to, content_type, content_encoding, user_id, app_id, transaction_id, security_token, application_headers, body))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Consume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
destination: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
filter: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::message::Consume::new(ticket, queue, destination, flag1.0, flag1.1, flag1.2, filter))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Cancel<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,destination: call!(::common::shortstr) >>
(::primitives::qpid9_0::message::Cancel::new(destination))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Get<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
destination: call!(::common::shortstr) >>
no_ack: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::message::Get::new(ticket, queue, destination, no_ack))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Recover {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::message::Recover::new(requeue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Open<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reference: call!(::common::longstr) >>
(::primitives::qpid9_0::message::Open::new(reference))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Close<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reference: call!(::common::longstr) >>
(::primitives::qpid9_0::message::Close::new(reference))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Append<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reference: call!(::common::longstr) >>
bytes: call!(::common::longstr) >>
(::primitives::qpid9_0::message::Append::new(reference, bytes))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Checkpoint<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reference: call!(::common::longstr) >>
identifier: call!(::common::shortstr) >>
(::primitives::qpid9_0::message::Checkpoint::new(reference, identifier))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Resume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reference: call!(::common::longstr) >>
identifier: call!(::common::shortstr) >>
(::primitives::qpid9_0::message::Resume::new(reference, identifier))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Qos {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::message::Qos::new(prefetch_size, prefetch_count, global))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Ok {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::message::Ok::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Empty {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::message::Empty::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Reject<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,code: be_u16 >>
text: call!(::common::shortstr) >>
(::primitives::qpid9_0::message::Reject::new(code, text))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::Offset {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,value: be_u64 >>
(::primitives::qpid9_0::message::Offset::new(value))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::message::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::message::Transfer as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Transfer
) | // map
20 => map!(
call!(<::primitives::qpid9_0::message::Consume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Consume
) | // map
30 => map!(
call!(<::primitives::qpid9_0::message::Cancel as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Cancel
) | // map
40 => map!(
call!(<::primitives::qpid9_0::message::Get as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Get
) | // map
50 => map!(
call!(<::primitives::qpid9_0::message::Recover as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Recover
) | // map
60 => map!(
call!(<::primitives::qpid9_0::message::Open as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Open
) | // map
70 => map!(
call!(<::primitives::qpid9_0::message::Close as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Close
) | // map
80 => map!(
call!(<::primitives::qpid9_0::message::Append as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Append
) | // map
90 => map!(
call!(<::primitives::qpid9_0::message::Checkpoint as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Checkpoint
) | // map
100 => map!(
call!(<::primitives::qpid9_0::message::Resume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Resume
) | // map
110 => map!(
call!(<::primitives::qpid9_0::message::Qos as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Qos
) | // map
500 => map!(
call!(<::primitives::qpid9_0::message::Ok as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Ok
) | // map
510 => map!(
call!(<::primitives::qpid9_0::message::Empty as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Empty
) | // map
520 => map!(
call!(<::primitives::qpid9_0::message::Reject as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Reject
) | // map
530 => map!(
call!(<::primitives::qpid9_0::message::Offset as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::message::ClassMethod::Offset
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::message::SpecMethod<'a>
// Class queue
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::Declare<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::queue::Declare::new(ticket, queue, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::DeclareOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,queue: call!(::common::shortstr) >>
message_count: be_u32 >>
consumer_count: be_u32 >>
(::primitives::qpid9_0::queue::DeclareOk::new(queue, message_count, consumer_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::Bind<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
nowait: bits!(call!(::common::bool_bit)) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::queue::Bind::new(ticket, queue, exchange, routing_key, nowait, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::BindOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::queue::BindOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::Unbind<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
arguments: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::queue::Unbind::new(ticket, queue, exchange, routing_key, arguments))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::UnbindOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::queue::UnbindOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::Purge<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
nowait: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::queue::Purge::new(ticket, queue, nowait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::PurgeOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,message_count: be_u32 >>
(::primitives::qpid9_0::queue::PurgeOk::new(message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::Delete<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::qpid9_0::queue::Delete::new(ticket, queue, flag1.0, flag1.1, flag1.2))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::DeleteOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,message_count: be_u32 >>
(::primitives::qpid9_0::queue::DeleteOk::new(message_count))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::queue::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::queue::Declare as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::Declare
) | // map
11 => map!(
call!(<::primitives::qpid9_0::queue::DeclareOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::DeclareOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::queue::Bind as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::Bind
) | // map
21 => map!(
call!(<::primitives::qpid9_0::queue::BindOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::BindOk
) | // map
50 => map!(
call!(<::primitives::qpid9_0::queue::Unbind as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::Unbind
) | // map
51 => map!(
call!(<::primitives::qpid9_0::queue::UnbindOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::UnbindOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::queue::Purge as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::Purge
) | // map
31 => map!(
call!(<::primitives::qpid9_0::queue::PurgeOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::PurgeOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::queue::Delete as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::Delete
) | // map
41 => map!(
call!(<::primitives::qpid9_0::queue::DeleteOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::queue::ClassMethod::DeleteOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::queue::SpecMethod<'a>
// Class stream
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Qos {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
consume_rate: be_u32 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::stream::Qos::new(prefetch_size, prefetch_count, consume_rate, global))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::QosOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::stream::QosOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Consume<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
queue: call!(::common::shortstr) >>
consumer_tag: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
filter: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::stream::Consume::new(ticket, queue, consumer_tag, flag1.0, flag1.1, flag1.2, filter))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::ConsumeOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::stream::ConsumeOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Cancel<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
nowait: bits!(call!(::common::bool_bit)) >>
(::primitives::qpid9_0::stream::Cancel::new(consumer_tag, nowait))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::CancelOk<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
(::primitives::qpid9_0::stream::CancelOk::new(consumer_tag))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Publish<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,ticket: be_u16 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::qpid9_0::stream::Publish::new(ticket, exchange, routing_key, flag1.0, flag1.1))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Return<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::qpid9_0::stream::Return::new(reply_code, reply_text, exchange, routing_key))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::Deliver<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,consumer_tag: call!(::common::shortstr) >>
delivery_tag: be_u64 >>
exchange: call!(::common::shortstr) >>
queue: call!(::common::shortstr) >>
(::primitives::qpid9_0::stream::Deliver::new(consumer_tag, delivery_tag, exchange, queue))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::stream::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::stream::Qos as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Qos
) | // map
11 => map!(
call!(<::primitives::qpid9_0::stream::QosOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::QosOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::stream::Consume as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Consume
) | // map
21 => map!(
call!(<::primitives::qpid9_0::stream::ConsumeOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::ConsumeOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::stream::Cancel as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Cancel
) | // map
31 => map!(
call!(<::primitives::qpid9_0::stream::CancelOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::CancelOk
) | // map
40 => map!(
call!(<::primitives::qpid9_0::stream::Publish as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Publish
) | // map
50 => map!(
call!(<::primitives::qpid9_0::stream::Return as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Return
) | // map
60 => map!(
call!(<::primitives::qpid9_0::stream::Deliver as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::stream::ClassMethod::Deliver
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::stream::SpecMethod<'a>
// Class tunnel
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tunnel::Request<'a> {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,meta_data: apply!(<::primitives::field::TableEntries as ::NomBytes>::nom_bytes, pool) >>
(::primitives::qpid9_0::tunnel::Request::new(meta_data))
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tunnel::ClassMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::tunnel::Request as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tunnel::ClassMethod::Request
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::tunnel::SpecMethod<'a>
// Class tx
impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::Select {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::Select::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::SelectOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::SelectOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::Commit {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::Commit::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::CommitOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::CommitOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::Rollback {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::Rollback::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::RollbackOk {
type Output = Self;
fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
do_parse!(input,(::primitives::qpid9_0::tx::RollbackOk::new())
) // do_parse!
} // fn nom_bytes
} // impl NomBytes

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::tx::ClassMethod {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

10 => map!(
call!(<::primitives::qpid9_0::tx::Select as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::Select
) | // map
11 => map!(
call!(<::primitives::qpid9_0::tx::SelectOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::SelectOk
) | // map
20 => map!(
call!(<::primitives::qpid9_0::tx::Commit as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::Commit
) | // map
21 => map!(
call!(<::primitives::qpid9_0::tx::CommitOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::CommitOk
) | // map
30 => map!(
call!(<::primitives::qpid9_0::tx::Rollback as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::Rollback
) | // map
31 => map!(
call!(<::primitives::qpid9_0::tx::RollbackOk as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::tx::ClassMethod::RollbackOk
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::tx::SpecMethod<'a>

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::SpecMethod<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u16,

30 => map!(
call!(<::primitives::qpid9_0::AccessMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Access
) | // map
60 => map!(
call!(<::primitives::qpid9_0::BasicMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Basic
) | // map
20 => map!(
call!(<::primitives::qpid9_0::ChannelMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Channel
) | // map
10 => map!(
call!(<::primitives::qpid9_0::ConnectionMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Connection
) | // map
100 => map!(
call!(<::primitives::qpid9_0::DtxMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Dtx
) | // map
40 => map!(
call!(<::primitives::qpid9_0::ExchangeMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Exchange
) | // map
70 => map!(
call!(<::primitives::qpid9_0::FileMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::File
) | // map
120 => map!(
call!(<::primitives::qpid9_0::MessageMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Message
) | // map
50 => map!(
call!(<::primitives::qpid9_0::QueueMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Queue
) | // map
80 => map!(
call!(<::primitives::qpid9_0::StreamMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Stream
) | // map
110 => map!(
call!(<::primitives::qpid9_0::TunnelMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Tunnel
) | // map
90 => map!(
call!(<::primitives::qpid9_0::TxMethod as ::NomBytes>::nom_bytes, pool),
::primitives::qpid9_0::SpecMethod::Tx
) // map!
) // switch!
} // fn nom_bytes
} // impl ::NomBytes for ::primitives::qpid9_0::SpecMethod<'a>

impl<'a> ::NomBytes<'a> for ::primitives::qpid9_0::Frame<'a> {
type Output = Self;
fn nom_bytes<'pool, P>(input: &'a [u8], pool: &'pool mut P)  -> IResult<&'a [u8], Self>
where P: ::pool::ParserPool
{
switch!(input, be_u8,

3 => do_parse!(
channel: be_u16 >>
payload: map!(length_bytes!(be_u32), ::primitives::qpid9_0::FramePayload::Body) >>
(::primitives::qpid9_0::Frame::new(channel, payload))

) | // do_parse
8 => do_parse!(
payload: value!(
::primitives::qpid9_0::FramePayload::Heartbeat,
tag!(b"\x00\x00\xCE")
) >>channel: value!(0) >>(::primitives::qpid9_0::Frame::new(channel, payload))

) | // do_parse
1 => do_parse!(
channel: be_u16 >>
payload: map!(
length_value!(
be_u32,
call!(<::primitives::qpid9_0::SpecMethod as ::NomBytes>::nom_bytes, pool)
),
::primitives::qpid9_0::FramePayload::Method
) >> // map
(::primitives::qpid9_0::Frame::new(channel, payload))

) | // do_parse
6 => do_parse!(
channel: be_u16 >>
payload: map!(length_bytes!(be_u32), ::primitives::qpid9_0::FramePayload::OobBody) >>
(::primitives::qpid9_0::Frame::new(channel, payload))

) | // do_parse
4 => do_parse!(
channel: be_u16 >>
payload: map!(
length_value!(
be_u32,
call!(<::primitives::qpid9_0::SpecMethod as ::NomBytes>::nom_bytes, pool)
),
::primitives::qpid9_0::FramePayload::OobMethod
) >> // map
(::primitives::qpid9_0::Frame::new(channel, payload))

) | // do_parse
7 => do_parse!(
channel: be_u16 >>
payload: map!(length_bytes!(be_u32), ::primitives::qpid9_0::FramePayload::Trace) >>
(::primitives::qpid9_0::Frame::new(channel, payload))

) // do_parse
) // switch!
} // fn nom_bytes
} // impl NomBytes for ::primitives::qpid9_0::Frame<'a>
