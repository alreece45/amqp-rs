// Generated by build.rs script in amqp0-parser-nom
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-parser"
// To format and replace the pre-generated files, use: cargo --features="amqp0-build-parser"
//
// EDITORS BEWARE: Your modifications may be overridden

use nom::{IResult, be_u8, be_u16, be_u32, be_u64};

// basic Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Qos {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
prefetch_size: be_u32 >>
prefetch_count: be_u16 >>
global: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Qos::new(prefetch_size, prefetch_count, global))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::QosOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::basic::QosOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Consume<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
consumer_tag: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::basic::Consume::new(queue, consumer_tag, flag1.0, flag1.1, flag1.2, flag1.3, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::ConsumeOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
consumer_tag: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::basic::ConsumeOk::new(consumer_tag))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Cancel<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
consumer_tag: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Cancel::new(consumer_tag, no_wait))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::CancelOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
consumer_tag: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::basic::CancelOk::new(consumer_tag))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Publish<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::rabbitmq9_1::basic::Publish::new(exchange, routing_key, flag1.0, flag1.1))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Return<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::basic::Return::new(reply_code, reply_text, exchange, routing_key))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Deliver<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
consumer_tag: call!(::common::shortstr) >>
delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::basic::Deliver::new(consumer_tag, delivery_tag, redelivered, exchange, routing_key))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Get<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
no_ack: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Get::new(queue, no_ack))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::GetOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
delivery_tag: be_u64 >>
redelivered: bits!(call!(::common::bool_bit)) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
message_count: be_u32 >>
(::primitives::rabbitmq9_1::basic::GetOk::new(delivery_tag, redelivered, exchange, routing_key, message_count))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::GetEmpty {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::basic::GetEmpty::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Ack {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
delivery_tag: be_u64 >>
multiple: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Ack::new(delivery_tag, multiple))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Reject {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
delivery_tag: be_u64 >>
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Reject::new(delivery_tag, requeue))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::RecoverAsync {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::RecoverAsync::new(requeue))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Recover {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
requeue: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::basic::Recover::new(requeue))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::RecoverOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::basic::RecoverOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::basic::Nack {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
delivery_tag: be_u64 >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::rabbitmq9_1::basic::Nack::new(delivery_tag, flag1.0, flag1.1))
)
    }
}

// channel Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::Open {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::channel::Open::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::OpenOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
call!(::common::longstr) >>
(::primitives::rabbitmq9_1::channel::OpenOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::Flow {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
active: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::channel::Flow::new(active))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::FlowOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
active: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::channel::FlowOk::new(active))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::Close<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::rabbitmq9_1::channel::Close::new(reply_code, reply_text, class_id, method_id))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::channel::CloseOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::channel::CloseOk::new())
)
    }
}

// confirm Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::confirm::Select {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
nowait: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::confirm::Select::new(nowait))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::confirm::SelectOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::confirm::SelectOk::new())
)
    }
}

// connection Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Start<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
version_major: be_u8 >>
version_minor: be_u8 >>
server_properties: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
mechanisms: call!(::common::longstr) >>
locales: call!(::common::longstr) >>
(::primitives::rabbitmq9_1::connection::Start::new(version_major, version_minor, server_properties, mechanisms, locales))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::StartOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
client_properties: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
mechanism: call!(::common::shortstr) >>
response: call!(::common::longstr) >>
locale: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::connection::StartOk::new(client_properties, mechanism, response, locale))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Secure<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
challenge: call!(::common::longstr) >>
(::primitives::rabbitmq9_1::connection::Secure::new(challenge))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::SecureOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
response: call!(::common::longstr) >>
(::primitives::rabbitmq9_1::connection::SecureOk::new(response))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Tune {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::rabbitmq9_1::connection::Tune::new(channel_max, frame_max, heartbeat))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::TuneOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
channel_max: be_u16 >>
frame_max: be_u32 >>
heartbeat: be_u16 >>
(::primitives::rabbitmq9_1::connection::TuneOk::new(channel_max, frame_max, heartbeat))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Open<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
virtual_host: call!(::common::shortstr) >>
call!(::common::shortstr) >>
bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::connection::Open::new(virtual_host))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::OpenOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::connection::OpenOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Close<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
reply_code: be_u16 >>
reply_text: call!(::common::shortstr) >>
class_id: be_u16 >>
method_id: be_u16 >>
(::primitives::rabbitmq9_1::connection::Close::new(reply_code, reply_text, class_id, method_id))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::CloseOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::connection::CloseOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Blocked<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
reason: call!(::common::shortstr) >>
(::primitives::rabbitmq9_1::connection::Blocked::new(reason))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::connection::Unblocked {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::connection::Unblocked::new())
)
    }
}

// exchange Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::Declare<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
exchange: call!(::common::shortstr) >>
ty: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::exchange::Declare::new(exchange, ty, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::DeclareOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::exchange::DeclareOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::Delete<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
exchange: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::rabbitmq9_1::exchange::Delete::new(exchange, flag1.0, flag1.1))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::DeleteOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::exchange::DeleteOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::Bind<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
destination: call!(::common::shortstr) >>
source: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::exchange::Bind::new(destination, source, routing_key, no_wait, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::BindOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::exchange::BindOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::Unbind<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
destination: call!(::common::shortstr) >>
source: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::exchange::Unbind::new(destination, source, routing_key, no_wait, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::exchange::UnbindOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::exchange::UnbindOk::new())
)
    }
}

// queue Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::Declare<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::queue::Declare::new(queue, flag1.0, flag1.1, flag1.2, flag1.3, flag1.4, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::DeclareOk<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
queue: call!(::common::shortstr) >>
message_count: be_u32 >>
consumer_count: be_u32 >>
(::primitives::rabbitmq9_1::queue::DeclareOk::new(queue, message_count, consumer_count))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::Bind<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::queue::Bind::new(queue, exchange, routing_key, no_wait, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::BindOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::queue::BindOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::Unbind<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], pool: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
exchange: call!(::common::shortstr) >>
routing_key: call!(::common::shortstr) >>
arguments: apply!(<::primitives::field::Table as ::NomBytes>::nom_bytes, pool) >>
(::primitives::rabbitmq9_1::queue::Unbind::new(queue, exchange, routing_key, arguments))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::UnbindOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::queue::UnbindOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::Purge<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
no_wait: bits!(call!(::common::bool_bit)) >>
(::primitives::rabbitmq9_1::queue::Purge::new(queue, no_wait))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::PurgeOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
message_count: be_u32 >>
(::primitives::rabbitmq9_1::queue::PurgeOk::new(message_count))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::Delete<'a> {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
be_u16 >>
queue: call!(::common::shortstr) >>
flag1: bits!(tuple!(
call!(::common::bool_bit),
call!(::common::bool_bit),
call!(::common::bool_bit)
)) >>
(::primitives::rabbitmq9_1::queue::Delete::new(queue, flag1.0, flag1.1, flag1.2))
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::queue::DeleteOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
message_count: be_u32 >>
(::primitives::rabbitmq9_1::queue::DeleteOk::new(message_count))
)
    }
}

// tx Class
impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::Select {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::Select::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::SelectOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::SelectOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::Commit {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::Commit::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::CommitOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::CommitOk::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::Rollback {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::Rollback::new())
)
    }
}

impl<'a> ::NomBytes<'a> for ::primitives::rabbitmq9_1::tx::RollbackOk {
    fn nom_bytes<'b, P>(input: &'a [u8], _: &'b mut P) -> IResult<&'a [u8], Self>
        where P: ::pool::ParserPool
    {
        do_parse!(input,
(::primitives::rabbitmq9_1::tx::RollbackOk::new())
)
    }
}

