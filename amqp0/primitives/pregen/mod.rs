// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-build-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden

pub mod amqp9_1;
pub mod amqp9_0;
pub mod amqp8_0;
pub mod rabbitmq9_1;
pub mod qpid9_0;
pub mod qpid8_0;

// Frame types ids shared among multiple specs
//
pub const FRAME_METHOD: u8 = 1;
pub const FRAME_HEADER: u8 = 2;
pub const FRAME_BODY: u8 = 3;
pub const FRAME_OOB_METHOD: u8 = 4;
pub const FRAME_OOB_HEADER: u8 = 5;
pub const FRAME_OOB_BODY: u8 = 6;
pub const FRAME_TRACE: u8 = 7;
pub const FRAME_HEARTBEAT: u8 = 8;

// Index values for classes shared among multiple specs
//
// Sometimes, the index value is repeated in different classes, but these are not reused
// within a single protocol
//
// Classes are currently only considered common if they are used in more than one
// spec. This behavior *may* change in the future as more specs are added.
//
pub const CLASS_CONNECTION: u16 = 10;
pub const CLASS_CHANNEL: u16 = 20;
pub const CLASS_ACCESS: u16 = 30;
pub const CLASS_EXCHANGE: u16 = 40;
pub const CLASS_QUEUE: u16 = 50;
pub const CLASS_BASIC: u16 = 60;
pub const CLASS_FILE: u16 = 70;
pub const CLASS_STREAM: u16 = 80;
pub const CLASS_CONFIRM: u16 = 85;
pub const CLASS_TX: u16 = 90;
pub const CLASS_DTX: u16 = 100;
pub const CLASS_TUNNEL: u16 = 110;
pub const CLASS_TEST: u16 = 120;
pub const CLASS_MESSAGE: u16 = 120;

// Index values for methods common among the different specs
//
// Methods are only considered common when:
//
//   * The index value is consistent across all of the specs
//   * The method is used in more than one primalgen.spec
//
// This may change in the future-- in that case, methods *may* be removed, or
// one of the requirements may be relaxed.
//
pub const METHOD_ACCESS_REQUEST: u16 = 10;
pub const METHOD_ACCESS_REQUEST_OK: u16 = 11;

pub const METHOD_BASIC_QOS: u16 = 10;
pub const METHOD_BASIC_QOS_OK: u16 = 11;
pub const METHOD_BASIC_CONSUME: u16 = 20;
pub const METHOD_BASIC_CONSUME_OK: u16 = 21;
pub const METHOD_BASIC_CANCEL: u16 = 30;
pub const METHOD_BASIC_CANCEL_OK: u16 = 31;
pub const METHOD_BASIC_PUBLISH: u16 = 40;
pub const METHOD_BASIC_RETURN: u16 = 50;
pub const METHOD_BASIC_DELIVER: u16 = 60;
pub const METHOD_BASIC_GET: u16 = 70;
pub const METHOD_BASIC_GET_OK: u16 = 71;
pub const METHOD_BASIC_GET_EMPTY: u16 = 72;
pub const METHOD_BASIC_ACK: u16 = 80;
pub const METHOD_BASIC_REJECT: u16 = 90;
pub const METHOD_BASIC_RECOVER_ASYNC: u16 = 100;
pub const METHOD_BASIC_RECOVER_SYNC_OK: u16 = 101;
pub const METHOD_BASIC_RECOVER_SYNC: u16 = 102;
pub const METHOD_BASIC_NACK: u16 = 120;

pub const METHOD_CHANNEL_OPEN: u16 = 10;
pub const METHOD_CHANNEL_OPEN_OK: u16 = 11;
pub const METHOD_CHANNEL_FLOW: u16 = 20;
pub const METHOD_CHANNEL_FLOW_OK: u16 = 21;
pub const METHOD_CHANNEL_ALERT: u16 = 30;
pub const METHOD_CHANNEL_CLOSE: u16 = 40;
pub const METHOD_CHANNEL_CLOSE_OK: u16 = 41;
pub const METHOD_CHANNEL_RESUME: u16 = 50;
pub const METHOD_CHANNEL_PING: u16 = 60;
pub const METHOD_CHANNEL_PONG: u16 = 70;
pub const METHOD_CHANNEL_OK: u16 = 80;

pub const METHOD_CONFIRM_SELECT: u16 = 10;
pub const METHOD_CONFIRM_SELECT_OK: u16 = 11;

pub const METHOD_CONNECTION_START: u16 = 10;
pub const METHOD_CONNECTION_START_OK: u16 = 11;
pub const METHOD_CONNECTION_SECURE: u16 = 20;
pub const METHOD_CONNECTION_SECURE_OK: u16 = 21;
pub const METHOD_CONNECTION_TUNE: u16 = 30;
pub const METHOD_CONNECTION_TUNE_OK: u16 = 31;
pub const METHOD_CONNECTION_OPEN: u16 = 40;
pub const METHOD_CONNECTION_OPEN_OK: u16 = 41;
pub const METHOD_CONNECTION_BLOCKED: u16 = 60;
pub const METHOD_CONNECTION_UNBLOCKED: u16 = 61;

pub const METHOD_DTX_SELECT: u16 = 10;
pub const METHOD_DTX_SELECT_OK: u16 = 11;
pub const METHOD_DTX_START: u16 = 20;
pub const METHOD_DTX_START_OK: u16 = 21;

pub const METHOD_EXCHANGE_DECLARE: u16 = 10;
pub const METHOD_EXCHANGE_DECLARE_OK: u16 = 11;
pub const METHOD_EXCHANGE_DELETE: u16 = 20;
pub const METHOD_EXCHANGE_DELETE_OK: u16 = 21;
pub const METHOD_EXCHANGE_BOUND: u16 = 22;
pub const METHOD_EXCHANGE_BOUND_OK: u16 = 23;
pub const METHOD_EXCHANGE_BIND: u16 = 30;
pub const METHOD_EXCHANGE_BIND_OK: u16 = 31;
pub const METHOD_EXCHANGE_UNBIND: u16 = 40;
pub const METHOD_EXCHANGE_UNBIND_OK: u16 = 51;

pub const METHOD_FILE_QOS: u16 = 10;
pub const METHOD_FILE_QOS_OK: u16 = 11;
pub const METHOD_FILE_CONSUME: u16 = 20;
pub const METHOD_FILE_CONSUME_OK: u16 = 21;
pub const METHOD_FILE_CANCEL: u16 = 30;
pub const METHOD_FILE_CANCEL_OK: u16 = 31;
pub const METHOD_FILE_OPEN: u16 = 40;
pub const METHOD_FILE_OPEN_OK: u16 = 41;
pub const METHOD_FILE_STAGE: u16 = 50;
pub const METHOD_FILE_PUBLISH: u16 = 60;
pub const METHOD_FILE_RETURN: u16 = 70;
pub const METHOD_FILE_DELIVER: u16 = 80;
pub const METHOD_FILE_ACK: u16 = 90;
pub const METHOD_FILE_REJECT: u16 = 100;

pub const METHOD_MESSAGE_TRANSFER: u16 = 10;
pub const METHOD_MESSAGE_CONSUME: u16 = 20;
pub const METHOD_MESSAGE_CANCEL: u16 = 30;
pub const METHOD_MESSAGE_GET: u16 = 40;
pub const METHOD_MESSAGE_RECOVER: u16 = 50;
pub const METHOD_MESSAGE_OPEN: u16 = 60;
pub const METHOD_MESSAGE_CLOSE: u16 = 70;
pub const METHOD_MESSAGE_APPEND: u16 = 80;
pub const METHOD_MESSAGE_CHECKPOINT: u16 = 90;
pub const METHOD_MESSAGE_RESUME: u16 = 100;
pub const METHOD_MESSAGE_QOS: u16 = 110;
pub const METHOD_MESSAGE_OK: u16 = 500;
pub const METHOD_MESSAGE_EMPTY: u16 = 510;
pub const METHOD_MESSAGE_REJECT: u16 = 520;
pub const METHOD_MESSAGE_OFFSET: u16 = 530;

pub const METHOD_QUEUE_DECLARE: u16 = 10;
pub const METHOD_QUEUE_DECLARE_OK: u16 = 11;
pub const METHOD_QUEUE_BIND: u16 = 20;
pub const METHOD_QUEUE_BIND_OK: u16 = 21;
pub const METHOD_QUEUE_PURGE: u16 = 30;
pub const METHOD_QUEUE_PURGE_OK: u16 = 31;
pub const METHOD_QUEUE_DELETE: u16 = 40;
pub const METHOD_QUEUE_DELETE_OK: u16 = 41;
pub const METHOD_QUEUE_UNBIND: u16 = 50;
pub const METHOD_QUEUE_UNBIND_OK: u16 = 51;

pub const METHOD_STREAM_QOS: u16 = 10;
pub const METHOD_STREAM_QOS_OK: u16 = 11;
pub const METHOD_STREAM_CONSUME: u16 = 20;
pub const METHOD_STREAM_CONSUME_OK: u16 = 21;
pub const METHOD_STREAM_CANCEL: u16 = 30;
pub const METHOD_STREAM_CANCEL_OK: u16 = 31;
pub const METHOD_STREAM_PUBLISH: u16 = 40;
pub const METHOD_STREAM_RETURN: u16 = 50;
pub const METHOD_STREAM_DELIVER: u16 = 60;

pub const METHOD_TEST_INTEGER: u16 = 10;
pub const METHOD_TEST_INTEGER_OK: u16 = 11;
pub const METHOD_TEST_STRING: u16 = 20;
pub const METHOD_TEST_STRING_OK: u16 = 21;
pub const METHOD_TEST_TABLE: u16 = 30;
pub const METHOD_TEST_TABLE_OK: u16 = 31;
pub const METHOD_TEST_CONTENT: u16 = 40;
pub const METHOD_TEST_CONTENT_OK: u16 = 41;

pub const METHOD_TUNNEL_REQUEST: u16 = 10;

pub const METHOD_TX_SELECT: u16 = 10;
pub const METHOD_TX_SELECT_OK: u16 = 11;
pub const METHOD_TX_COMMIT: u16 = 20;
pub const METHOD_TX_COMMIT_OK: u16 = 21;
pub const METHOD_TX_ROLLBACK: u16 = 30;
pub const METHOD_TX_ROLLBACK_OK: u16 = 31;

// Index values for methods common among the different specs
//
// Methods are only considered common when:
//
//   * The index value is consistent across all of the specs
//   * The method is used in more than one primalgen.spec
//
// This may change in the future-- in that case, methods *may* be removed, or
// one of the requirements may be relaxed.
//

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Amqp9_1;
impl<'a> ::Protocol<'a> for Amqp9_1 {
    type Frame = amqp9_1::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x09\x01"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Amqp9_1

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Amqp9_0;
impl<'a> ::Protocol<'a> for Amqp9_0 {
    type Frame = amqp9_0::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x09\x00"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Amqp9_0

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Amqp8_0;
impl<'a> ::Protocol<'a> for Amqp8_0 {
    type Frame = amqp8_0::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x08\x00"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Amqp8_0

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Rabbitmq9_1;
impl<'a> ::Protocol<'a> for Rabbitmq9_1 {
    type Frame = rabbitmq9_1::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x09\x01"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Rabbitmq9_1

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Qpid9_0;
impl<'a> ::Protocol<'a> for Qpid9_0 {
    type Frame = qpid9_0::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x09\x00"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Qpid9_0

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Qpid8_0;
impl<'a> ::Protocol<'a> for Qpid8_0 {
    type Frame = qpid8_0::Frame<'a>;
    fn protocol_header() -> &'static [u8] {
        b"AMQP\x00\x00\x08\x00"
    } // fn protocol_header()
} // impl ::Protocol<'a> for Qpid8_0
