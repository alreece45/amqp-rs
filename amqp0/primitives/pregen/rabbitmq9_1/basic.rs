// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden

// generated by primalgen::codegen::spec_module::class_mod::ClassModuleWriter
#![allow(too_many_arguments)]


// Generated by primalgen::spec::frame_payload_enum::ClassEnumWriter
#[derive(Debug)]
pub struct Header<'a> {
    content_type: Option<::std::borrow::Cow<'a, str>>,
    content_encoding: Option<::std::borrow::Cow<'a, str>>,
    headers: Option<::field::TableEntries<'a>>,
    delivery_mode: Option<u8>,
    priority: Option<u8>,
    correlation_id: Option<::std::borrow::Cow<'a, str>>,
    reply_to: Option<::std::borrow::Cow<'a, str>>,
    expiration: Option<::std::borrow::Cow<'a, str>>,
    message_id: Option<::std::borrow::Cow<'a, str>>,
    timestamp: Option<u64>,
    ty: Option<::std::borrow::Cow<'a, str>>,
    user_id: Option<::std::borrow::Cow<'a, str>>,
    app_id: Option<::std::borrow::Cow<'a, str>>,
    reserved: Option<::std::borrow::Cow<'a, str>>,
} // struct Header

impl<'a> Header<'a> {
    impl_properties! {
(content_type, content_type_mut, set_content_type, take_content_type) -> Option< Cow<str> >,
(content_encoding, content_encoding_mut, set_content_encoding, take_content_encoding) -> Option< Cow<str> >,
(headers, headers_mut, set_headers, take_headers) -> Option< &::field::TableEntries<'a> >,
(delivery_mode, delivery_mode_mut, set_delivery_mode, take_delivery_mode) -> Option< u8 >,
(priority, priority_mut, set_priority, take_priority) -> Option< u8 >,
(correlation_id, correlation_id_mut, set_correlation_id, take_correlation_id) -> Option< Cow<str> >,
(reply_to, reply_to_mut, set_reply_to, take_reply_to) -> Option< Cow<str> >,
(expiration, expiration_mut, set_expiration, take_expiration) -> Option< Cow<str> >,
(message_id, message_id_mut, set_message_id, take_message_id) -> Option< Cow<str> >,
(timestamp, timestamp_mut, set_timestamp, take_timestamp) -> Option< u64 >,
(ty, ty_mut, set_ty, take_ty) -> Option< Cow<str> >,
(user_id, user_id_mut, set_user_id, take_user_id) -> Option< Cow<str> >,
(app_id, app_id_mut, set_app_id, take_app_id) -> Option< Cow<str> >,
(reserved, reserved_mut, set_reserved, take_reserved) -> Option< Cow<str> >,
} // impl_properties
} // impl Headers

impl<'a> ::Encodable for Header<'a> {
    fn encoded_size(&self) -> usize {
        unimplemented!()
    } // fn encoded_size
} // impl ::Encodable for Header<'a>
impl ::method::basic::AckMethod for ::Rabbitmq9_1 {
    type Payload = Ack;
} // impl ::method::basic::AckMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Ack {
    delivery_tag: u64,
    multiple: bool,
} // struct Ack

impl Ack {
    pub fn new(delivery_tag: u64, multiple: bool) -> Self {
        Ack {
            delivery_tag: delivery_tag,
            multiple: multiple,
        } // Ack
    } // fn new()
    impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(multiple, set_multiple) -> bool,
} // impl_properties
} // impl Ack
impl Default for Ack {
    fn default() -> Self {
        Ack::new(0, false)
    } // fn default()
} // impl Default for Ack

impl ::Encodable for Ack {
    fn encoded_size(&self) -> usize {
        9
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for Ack {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        80
    } // fn method_id()
} // impl ::Payload for Ack
impl ::method::basic::SetAckMethodFields for Ack {
    fn set_delivery_tag(&mut self, delivery_tag: u64) {
        self.set_delivery_tag(delivery_tag)
    } // set_delivery_tag()
    fn set_multiple(&mut self, multiple: bool) {
        self.set_multiple(multiple)
    } // set_multiple()
} // impl ::method::basic::SetAckMethodFields for Ack
impl<'a> ::method::basic::CancelMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Cancel<'a>;
} // impl<'a> ::method::basic::CancelMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Cancel<'a> {
    consumer_tag: ::std::borrow::Cow<'a, str>,
    no_wait: bool,
} // struct Cancel<'a>

impl<'a> Cancel<'a> {
    pub fn new<C>(consumer_tag: C, no_wait: bool) -> Self
        where C: Into<::std::borrow::Cow<'a, str>>
    {
        Cancel {
            consumer_tag: consumer_tag.into(),
            no_wait: no_wait,
        } // Cancel
    } // fn new()
    impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(no_wait, set_no_wait) -> bool,
} // impl_properties
} // impl<'a> Cancel<'a>
impl<'a> Default for Cancel<'a> {
    fn default() -> Self {
        Cancel::new("", false)
    } // fn default()
} // impl Default for Cancel

impl<'a> ::Encodable for Cancel<'a> {
    fn encoded_size(&self) -> usize {
        [2, ::Encodable::encoded_size(&self.consumer_tag)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Cancel<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        30
    } // fn method_id()
} // impl ::Payload for Cancel
impl<'a> ::method::basic::SetCancelMethodFields<'a> for Cancel<'a> {
    fn set_consumer_tag<V>(&mut self, consumer_tag: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_consumer_tag(consumer_tag.into())
    } // set_consumer_tag()
    fn set_no_wait(&mut self, no_wait: bool) {
        self.set_no_wait(no_wait)
    } // set_no_wait()
} // impl<'a> ::method::basic::SetCancelMethodFields<'a> for Cancel<'a>
impl<'a> ::method::basic::CancelOkMethod<'a> for ::Rabbitmq9_1 {
    type Payload = CancelOk<'a>;
} // impl<'a> ::method::basic::CancelOkMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct CancelOk<'a> {
    consumer_tag: ::std::borrow::Cow<'a, str>,
} // struct CancelOk<'a>

impl<'a> CancelOk<'a> {
    pub fn new<C>(consumer_tag: C) -> Self
        where C: Into<::std::borrow::Cow<'a, str>>
    {
        CancelOk { consumer_tag: consumer_tag.into() } // CancelOk
    } // fn new()
    impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
} // impl<'a> CancelOk<'a>
impl<'a> Default for CancelOk<'a> {
    fn default() -> Self {
        CancelOk::new("")
    } // fn default()
} // impl Default for CancelOk

impl<'a> ::Encodable for CancelOk<'a> {
    fn encoded_size(&self) -> usize {
        [1, ::Encodable::encoded_size(&self.consumer_tag)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for CancelOk<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        31
    } // fn method_id()
} // impl ::Payload for CancelOk
impl<'a> ::method::basic::SetCancelOkMethodFields<'a> for CancelOk<'a> {
    fn set_consumer_tag<V>(&mut self, consumer_tag: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_consumer_tag(consumer_tag.into())
    } // set_consumer_tag()
} // impl<'a> ::method::basic::SetCancelOkMethodFields<'a> for CancelOk<'a>
impl<'a> ::method::basic::ConsumeMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Consume<'a>;
} // impl<'a> ::method::basic::ConsumeMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Consume<'a> {
    queue: ::std::borrow::Cow<'a, str>,
    consumer_tag: ::std::borrow::Cow<'a, str>,
    no_local: bool,
    no_ack: bool,
    exclusive: bool,
    no_wait: bool,
    arguments: ::field::TableEntries<'a>,
} // struct Consume<'a>

impl<'a> Consume<'a> {
    pub fn new<Q, C, A>(queue: Q,
                        consumer_tag: C,
                        no_local: bool,
                        no_ack: bool,
                        exclusive: bool,
                        no_wait: bool,
                        arguments: A)
                        -> Self
        where Q: Into<::std::borrow::Cow<'a, str>>,
              C: Into<::std::borrow::Cow<'a, str>>,
              A: Into<::field::TableEntries<'a>>
    {
        Consume {
            queue: queue.into(),
            consumer_tag: consumer_tag.into(),
            no_local: no_local,
            no_ack: no_ack,
            exclusive: exclusive,
            no_wait: no_wait,
            arguments: arguments.into(),
        } // Consume
    } // fn new()
    impl_properties! {
(queue, queue_mut, set_queue) -> Cow<str>,
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(no_local, set_no_local) -> bool,
(no_ack, set_no_ack) -> bool,
(exclusive, set_exclusive) -> bool,
(no_wait, set_no_wait) -> bool,
(arguments, arguments_mut, set_arguments) -> &::field::TableEntries<'a>,
} // impl_properties
} // impl<'a> Consume<'a>
impl<'a> Default for Consume<'a> {
    fn default() -> Self {
        Consume::new("",
                     "",
                     false,
                     false,
                     false,
                     false,
                     ::field::TableEntries::new())
    } // fn default()
} // impl Default for Consume

impl<'a> ::Encodable for Consume<'a> {
    fn encoded_size(&self) -> usize {
        [5,
         ::Encodable::encoded_size(&self.queue),
         ::Encodable::encoded_size(&self.consumer_tag),
         ::Encodable::encoded_size(&self.arguments)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Consume<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        20
    } // fn method_id()
} // impl ::Payload for Consume
impl<'a> ::method::basic::SetConsumeMethodFields<'a> for Consume<'a> {
    fn set_queue<V>(&mut self, queue: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_queue(queue.into())
    } // set_queue()
    fn set_consumer_tag<V>(&mut self, consumer_tag: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_consumer_tag(consumer_tag.into())
    } // set_consumer_tag()
    fn set_no_local(&mut self, no_local: bool) {
        self.set_no_local(no_local)
    } // set_no_local()
    fn set_no_ack(&mut self, no_ack: bool) {
        self.set_no_ack(no_ack)
    } // set_no_ack()
    fn set_exclusive(&mut self, exclusive: bool) {
        self.set_exclusive(exclusive)
    } // set_exclusive()
    fn set_no_wait(&mut self, no_wait: bool) {
        self.set_no_wait(no_wait)
    } // set_no_wait()
    fn set_arguments<V>(&mut self, arguments: V)
        where V: Into<::field::TableEntries<'a>>
    {
        self.set_arguments(arguments.into())
    } // set_arguments()
} // impl<'a> ::method::basic::SetConsumeMethodFields<'a> for Consume<'a>
impl<'a> ::method::basic::ConsumeOkMethod<'a> for ::Rabbitmq9_1 {
    type Payload = ConsumeOk<'a>;
} // impl<'a> ::method::basic::ConsumeOkMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct ConsumeOk<'a> {
    consumer_tag: ::std::borrow::Cow<'a, str>,
} // struct ConsumeOk<'a>

impl<'a> ConsumeOk<'a> {
    pub fn new<C>(consumer_tag: C) -> Self
        where C: Into<::std::borrow::Cow<'a, str>>
    {
        ConsumeOk { consumer_tag: consumer_tag.into() } // ConsumeOk
    } // fn new()
    impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
} // impl<'a> ConsumeOk<'a>
impl<'a> Default for ConsumeOk<'a> {
    fn default() -> Self {
        ConsumeOk::new("")
    } // fn default()
} // impl Default for ConsumeOk

impl<'a> ::Encodable for ConsumeOk<'a> {
    fn encoded_size(&self) -> usize {
        [1, ::Encodable::encoded_size(&self.consumer_tag)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for ConsumeOk<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        21
    } // fn method_id()
} // impl ::Payload for ConsumeOk
impl<'a> ::method::basic::SetConsumeOkMethodFields<'a> for ConsumeOk<'a> {
    fn set_consumer_tag<V>(&mut self, consumer_tag: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_consumer_tag(consumer_tag.into())
    } // set_consumer_tag()
} // impl<'a> ::method::basic::SetConsumeOkMethodFields<'a> for ConsumeOk<'a>
impl<'a> ::method::basic::DeliverMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Deliver<'a>;
} // impl<'a> ::method::basic::DeliverMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Deliver<'a> {
    consumer_tag: ::std::borrow::Cow<'a, str>,
    delivery_tag: u64,
    redelivered: bool,
    exchange: ::std::borrow::Cow<'a, str>,
    routing_key: ::std::borrow::Cow<'a, str>,
} // struct Deliver<'a>

impl<'a> Deliver<'a> {
    pub fn new<C, E, R>(consumer_tag: C,
                        delivery_tag: u64,
                        redelivered: bool,
                        exchange: E,
                        routing_key: R)
                        -> Self
        where C: Into<::std::borrow::Cow<'a, str>>,
              E: Into<::std::borrow::Cow<'a, str>>,
              R: Into<::std::borrow::Cow<'a, str>>
    {
        Deliver {
            consumer_tag: consumer_tag.into(),
            delivery_tag: delivery_tag,
            redelivered: redelivered,
            exchange: exchange.into(),
            routing_key: routing_key.into(),
        } // Deliver
    } // fn new()
    impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(delivery_tag, set_delivery_tag) -> u64,
(redelivered, set_redelivered) -> bool,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
} // impl<'a> Deliver<'a>
impl<'a> Default for Deliver<'a> {
    fn default() -> Self {
        Deliver::new("", 0, false, "", "")
    } // fn default()
} // impl Default for Deliver

impl<'a> ::Encodable for Deliver<'a> {
    fn encoded_size(&self) -> usize {
        [12,
         ::Encodable::encoded_size(&self.consumer_tag),
         ::Encodable::encoded_size(&self.exchange),
         ::Encodable::encoded_size(&self.routing_key)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Deliver<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        60
    } // fn method_id()
} // impl ::Payload for Deliver
impl<'a> ::method::basic::SetDeliverMethodFields<'a> for Deliver<'a> {
    fn set_consumer_tag<V>(&mut self, consumer_tag: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_consumer_tag(consumer_tag.into())
    } // set_consumer_tag()
    fn set_delivery_tag(&mut self, delivery_tag: u64) {
        self.set_delivery_tag(delivery_tag)
    } // set_delivery_tag()
    fn set_redelivered(&mut self, redelivered: bool) {
        self.set_redelivered(redelivered)
    } // set_redelivered()
    fn set_exchange<V>(&mut self, exchange: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_exchange(exchange.into())
    } // set_exchange()
    fn set_routing_key<V>(&mut self, routing_key: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_routing_key(routing_key.into())
    } // set_routing_key()
} // impl<'a> ::method::basic::SetDeliverMethodFields<'a> for Deliver<'a>
impl<'a> ::method::basic::GetMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Get<'a>;
} // impl<'a> ::method::basic::GetMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Get<'a> {
    queue: ::std::borrow::Cow<'a, str>,
    no_ack: bool,
} // struct Get<'a>

impl<'a> Get<'a> {
    pub fn new<Q>(queue: Q, no_ack: bool) -> Self
        where Q: Into<::std::borrow::Cow<'a, str>>
    {
        Get {
            queue: queue.into(),
            no_ack: no_ack,
        } // Get
    } // fn new()
    impl_properties! {
(queue, queue_mut, set_queue) -> Cow<str>,
(no_ack, set_no_ack) -> bool,
} // impl_properties
} // impl<'a> Get<'a>
impl<'a> Default for Get<'a> {
    fn default() -> Self {
        Get::new("", false)
    } // fn default()
} // impl Default for Get

impl<'a> ::Encodable for Get<'a> {
    fn encoded_size(&self) -> usize {
        [4, ::Encodable::encoded_size(&self.queue)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Get<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        70
    } // fn method_id()
} // impl ::Payload for Get
impl<'a> ::method::basic::SetGetMethodFields<'a> for Get<'a> {
    fn set_queue<V>(&mut self, queue: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_queue(queue.into())
    } // set_queue()
    fn set_no_ack(&mut self, no_ack: bool) {
        self.set_no_ack(no_ack)
    } // set_no_ack()
} // impl<'a> ::method::basic::SetGetMethodFields<'a> for Get<'a>
impl<'a> ::method::basic::GetEmptyMethod<'a> for ::Rabbitmq9_1 {
    type Payload = GetEmpty;
} // impl<'a> ::method::basic::GetEmptyMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct GetEmpty;

impl GetEmpty {
    pub fn new() -> Self {
        GetEmpty
    } // fn new()
} // impl GetEmpty
impl Default for GetEmpty {
    fn default() -> Self {
        GetEmpty::new()
    } // fn default()
} // impl Default for GetEmpty

impl ::Encodable for GetEmpty {
    fn encoded_size(&self) -> usize {
        [1].iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for GetEmpty {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        72
    } // fn method_id()
} // impl ::Payload for GetEmpty
impl<'a> ::method::basic::SetGetEmptyMethodFields<'a> for GetEmpty {} // impl<'a> ::method::basic::SetGetEmptyMethodFields<'a> for GetEmpty
impl<'a> ::method::basic::GetOkMethod<'a> for ::Rabbitmq9_1 {
    type Payload = GetOk<'a>;
} // impl<'a> ::method::basic::GetOkMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct GetOk<'a> {
    delivery_tag: u64,
    redelivered: bool,
    exchange: ::std::borrow::Cow<'a, str>,
    routing_key: ::std::borrow::Cow<'a, str>,
    message_count: u32,
} // struct GetOk<'a>

impl<'a> GetOk<'a> {
    pub fn new<E, R>(delivery_tag: u64,
                     redelivered: bool,
                     exchange: E,
                     routing_key: R,
                     message_count: u32)
                     -> Self
        where E: Into<::std::borrow::Cow<'a, str>>,
              R: Into<::std::borrow::Cow<'a, str>>
    {
        GetOk {
            delivery_tag: delivery_tag,
            redelivered: redelivered,
            exchange: exchange.into(),
            routing_key: routing_key.into(),
            message_count: message_count,
        } // GetOk
    } // fn new()
    impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(redelivered, set_redelivered) -> bool,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(message_count, set_message_count) -> u32,
} // impl_properties
} // impl<'a> GetOk<'a>
impl<'a> Default for GetOk<'a> {
    fn default() -> Self {
        GetOk::new(0, false, "", "", 0)
    } // fn default()
} // impl Default for GetOk

impl<'a> ::Encodable for GetOk<'a> {
    fn encoded_size(&self) -> usize {
        [15,
         ::Encodable::encoded_size(&self.exchange),
         ::Encodable::encoded_size(&self.routing_key)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for GetOk<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        71
    } // fn method_id()
} // impl ::Payload for GetOk
impl<'a> ::method::basic::SetGetOkMethodFields<'a> for GetOk<'a> {
    fn set_delivery_tag(&mut self, delivery_tag: u64) {
        self.set_delivery_tag(delivery_tag)
    } // set_delivery_tag()
    fn set_redelivered(&mut self, redelivered: bool) {
        self.set_redelivered(redelivered)
    } // set_redelivered()
    fn set_exchange<V>(&mut self, exchange: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_exchange(exchange.into())
    } // set_exchange()
    fn set_routing_key<V>(&mut self, routing_key: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_routing_key(routing_key.into())
    } // set_routing_key()
    fn set_message_count(&mut self, message_count: u32) {
        self.set_message_count(message_count)
    } // set_message_count()
} // impl<'a> ::method::basic::SetGetOkMethodFields<'a> for GetOk<'a>
impl ::method::basic::NackMethod for ::Rabbitmq9_1 {
    type Payload = Nack;
} // impl ::method::basic::NackMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Nack {
    delivery_tag: u64,
    multiple: bool,
    requeue: bool,
} // struct Nack

impl Nack {
    pub fn new(delivery_tag: u64, multiple: bool, requeue: bool) -> Self {
        Nack {
            delivery_tag: delivery_tag,
            multiple: multiple,
            requeue: requeue,
        } // Nack
    } // fn new()
    impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(multiple, set_multiple) -> bool,
(requeue, set_requeue) -> bool,
} // impl_properties
} // impl Nack
impl Default for Nack {
    fn default() -> Self {
        Nack::new(0, false, false)
    } // fn default()
} // impl Default for Nack

impl ::Encodable for Nack {
    fn encoded_size(&self) -> usize {
        9
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for Nack {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        120
    } // fn method_id()
} // impl ::Payload for Nack
impl ::method::basic::SetNackMethodFields for Nack {
    fn set_delivery_tag(&mut self, delivery_tag: u64) {
        self.set_delivery_tag(delivery_tag)
    } // set_delivery_tag()
    fn set_multiple(&mut self, multiple: bool) {
        self.set_multiple(multiple)
    } // set_multiple()
    fn set_requeue(&mut self, requeue: bool) {
        self.set_requeue(requeue)
    } // set_requeue()
} // impl ::method::basic::SetNackMethodFields for Nack
impl<'a> ::method::basic::PublishMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Publish<'a>;
} // impl<'a> ::method::basic::PublishMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Publish<'a> {
    exchange: ::std::borrow::Cow<'a, str>,
    routing_key: ::std::borrow::Cow<'a, str>,
    mandatory: bool,
    immediate: bool,
} // struct Publish<'a>

impl<'a> Publish<'a> {
    pub fn new<E, R>(exchange: E, routing_key: R, mandatory: bool, immediate: bool) -> Self
        where E: Into<::std::borrow::Cow<'a, str>>,
              R: Into<::std::borrow::Cow<'a, str>>
    {
        Publish {
            exchange: exchange.into(),
            routing_key: routing_key.into(),
            mandatory: mandatory,
            immediate: immediate,
        } // Publish
    } // fn new()
    impl_properties! {
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(mandatory, set_mandatory) -> bool,
(immediate, set_immediate) -> bool,
} // impl_properties
} // impl<'a> Publish<'a>
impl<'a> Default for Publish<'a> {
    fn default() -> Self {
        Publish::new("", "", false, false)
    } // fn default()
} // impl Default for Publish

impl<'a> ::Encodable for Publish<'a> {
    fn encoded_size(&self) -> usize {
        [5, ::Encodable::encoded_size(&self.exchange), ::Encodable::encoded_size(&self.routing_key)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Publish<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        40
    } // fn method_id()
} // impl ::Payload for Publish
impl<'a> ::method::basic::SetPublishMethodFields<'a> for Publish<'a> {
    fn set_exchange<V>(&mut self, exchange: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_exchange(exchange.into())
    } // set_exchange()
    fn set_routing_key<V>(&mut self, routing_key: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_routing_key(routing_key.into())
    } // set_routing_key()
    fn set_mandatory(&mut self, mandatory: bool) {
        self.set_mandatory(mandatory)
    } // set_mandatory()
    fn set_immediate(&mut self, immediate: bool) {
        self.set_immediate(immediate)
    } // set_immediate()
} // impl<'a> ::method::basic::SetPublishMethodFields<'a> for Publish<'a>
impl ::method::basic::QosMethod for ::Rabbitmq9_1 {
    type Payload = Qos;
} // impl ::method::basic::QosMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Qos {
    prefetch_size: u32,
    prefetch_count: u16,
    global: bool,
} // struct Qos

impl Qos {
    pub fn new(prefetch_size: u32, prefetch_count: u16, global: bool) -> Self {
        Qos {
            prefetch_size: prefetch_size,
            prefetch_count: prefetch_count,
            global: global,
        } // Qos
    } // fn new()
    impl_properties! {
(prefetch_size, set_prefetch_size) -> u32,
(prefetch_count, set_prefetch_count) -> u16,
(global, set_global) -> bool,
} // impl_properties
} // impl Qos
impl Default for Qos {
    fn default() -> Self {
        Qos::new(0, 0, false)
    } // fn default()
} // impl Default for Qos

impl ::Encodable for Qos {
    fn encoded_size(&self) -> usize {
        7
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for Qos {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        10
    } // fn method_id()
} // impl ::Payload for Qos
impl ::method::basic::SetQosMethodFields for Qos {
    fn set_prefetch_size(&mut self, prefetch_size: u32) {
        self.set_prefetch_size(prefetch_size)
    } // set_prefetch_size()
    fn set_prefetch_count(&mut self, prefetch_count: u16) {
        self.set_prefetch_count(prefetch_count)
    } // set_prefetch_count()
    fn set_global(&mut self, global: bool) {
        self.set_global(global)
    } // set_global()
} // impl ::method::basic::SetQosMethodFields for Qos
impl ::method::basic::QosOkMethod for ::Rabbitmq9_1 {
    type Payload = QosOk;
} // impl ::method::basic::QosOkMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct QosOk;

impl QosOk {
    pub fn new() -> Self {
        QosOk
    } // fn new()
} // impl QosOk
impl Default for QosOk {
    fn default() -> Self {
        QosOk::new()
    } // fn default()
} // impl Default for QosOk

impl ::Encodable for QosOk {
    fn encoded_size(&self) -> usize {
        0
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for QosOk {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        11
    } // fn method_id()
} // impl ::Payload for QosOk
impl ::method::basic::RecoverMethod for ::Rabbitmq9_1 {
    type Payload = Recover;
} // impl ::method::basic::RecoverMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Recover {
    requeue: bool,
} // struct Recover

impl Recover {
    pub fn new(requeue: bool) -> Self {
        Recover { requeue: requeue } // Recover
    } // fn new()
    impl_properties! {
(requeue, set_requeue) -> bool,
} // impl_properties
} // impl Recover
impl Default for Recover {
    fn default() -> Self {
        Recover::new(false)
    } // fn default()
} // impl Default for Recover

impl ::Encodable for Recover {
    fn encoded_size(&self) -> usize {
        1
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for Recover {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        110
    } // fn method_id()
} // impl ::Payload for Recover
impl ::method::basic::SetRecoverMethodFields for Recover {
    fn set_requeue(&mut self, requeue: bool) {
        self.set_requeue(requeue)
    } // set_requeue()
} // impl ::method::basic::SetRecoverMethodFields for Recover
impl ::method::basic::RecoverAsyncMethod for ::Rabbitmq9_1 {
    type Payload = RecoverAsync;
} // impl ::method::basic::RecoverAsyncMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct RecoverAsync {
    requeue: bool,
} // struct RecoverAsync

impl RecoverAsync {
    pub fn new(requeue: bool) -> Self {
        RecoverAsync { requeue: requeue } // RecoverAsync
    } // fn new()
    impl_properties! {
(requeue, set_requeue) -> bool,
} // impl_properties
} // impl RecoverAsync
impl Default for RecoverAsync {
    fn default() -> Self {
        RecoverAsync::new(false)
    } // fn default()
} // impl Default for RecoverAsync

impl ::Encodable for RecoverAsync {
    fn encoded_size(&self) -> usize {
        1
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for RecoverAsync {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        100
    } // fn method_id()
} // impl ::Payload for RecoverAsync
impl ::method::basic::SetRecoverAsyncMethodFields for RecoverAsync {
    fn set_requeue(&mut self, requeue: bool) {
        self.set_requeue(requeue)
    } // set_requeue()
} // impl ::method::basic::SetRecoverAsyncMethodFields for RecoverAsync
impl ::method::basic::RecoverOkMethod for ::Rabbitmq9_1 {
    type Payload = RecoverOk;
} // impl ::method::basic::RecoverOkMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct RecoverOk;

impl RecoverOk {
    pub fn new() -> Self {
        RecoverOk
    } // fn new()
} // impl RecoverOk
impl Default for RecoverOk {
    fn default() -> Self {
        RecoverOk::new()
    } // fn default()
} // impl Default for RecoverOk

impl ::Encodable for RecoverOk {
    fn encoded_size(&self) -> usize {
        0
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for RecoverOk {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        111
    } // fn method_id()
} // impl ::Payload for RecoverOk
impl ::method::basic::RejectMethod for ::Rabbitmq9_1 {
    type Payload = Reject;
} // impl ::method::basic::RejectMethod for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Reject {
    delivery_tag: u64,
    requeue: bool,
} // struct Reject

impl Reject {
    pub fn new(delivery_tag: u64, requeue: bool) -> Self {
        Reject {
            delivery_tag: delivery_tag,
            requeue: requeue,
        } // Reject
    } // fn new()
    impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(requeue, set_requeue) -> bool,
} // impl_properties
} // impl Reject
impl Default for Reject {
    fn default() -> Self {
        Reject::new(0, false)
    } // fn default()
} // impl Default for Reject

impl ::Encodable for Reject {
    fn encoded_size(&self) -> usize {
        9
    } // fn encoded_size()
} // impl Encodable

impl ::ProtocolMethodPayload for Reject {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        90
    } // fn method_id()
} // impl ::Payload for Reject
impl ::method::basic::SetRejectMethodFields for Reject {
    fn set_delivery_tag(&mut self, delivery_tag: u64) {
        self.set_delivery_tag(delivery_tag)
    } // set_delivery_tag()
    fn set_requeue(&mut self, requeue: bool) {
        self.set_requeue(requeue)
    } // set_requeue()
} // impl ::method::basic::SetRejectMethodFields for Reject
impl<'a> ::method::basic::ReturnMethod<'a> for ::Rabbitmq9_1 {
    type Payload = Return<'a>;
} // impl<'a> ::method::basic::ReturnMethod<'a> for ::Rabbitmq9_1

// generated by primalgen::codegen::spec-module::class_mod::method_struct
#[derive(Debug)]
pub struct Return<'a> {
    reply_code: u16,
    reply_text: ::std::borrow::Cow<'a, str>,
    exchange: ::std::borrow::Cow<'a, str>,
    routing_key: ::std::borrow::Cow<'a, str>,
} // struct Return<'a>

impl<'a> Return<'a> {
    pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
        where R: Into<::std::borrow::Cow<'a, str>>,
              E: Into<::std::borrow::Cow<'a, str>>,
              R0: Into<::std::borrow::Cow<'a, str>>
    {
        Return {
            reply_code: reply_code,
            reply_text: reply_text.into(),
            exchange: exchange.into(),
            routing_key: routing_key.into(),
        } // Return
    } // fn new()
    impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
} // impl<'a> Return<'a>
impl<'a> Default for Return<'a> {
    fn default() -> Self {
        Return::new(0, "", "", "")
    } // fn default()
} // impl Default for Return

impl<'a> ::Encodable for Return<'a> {
    fn encoded_size(&self) -> usize {
        [5,
         ::Encodable::encoded_size(&self.reply_text),
         ::Encodable::encoded_size(&self.exchange),
         ::Encodable::encoded_size(&self.routing_key)]
            .iter()
            .sum()
    } // fn encoded_size()
} // impl Encodable

impl<'a> ::ProtocolMethodPayload for Return<'a> {
    fn class_id(&self) -> u16 {
        60
    } // fn class_id()
    fn method_id(&self) -> u16 {
        50
    } // fn method_id()
} // impl ::Payload for Return
impl<'a> ::method::basic::SetReturnMethodFields<'a> for Return<'a> {
    fn set_reply_code(&mut self, reply_code: u16) {
        self.set_reply_code(reply_code)
    } // set_reply_code()
    fn set_reply_text<V>(&mut self, reply_text: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_reply_text(reply_text.into())
    } // set_reply_text()
    fn set_exchange<V>(&mut self, exchange: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_exchange(exchange.into())
    } // set_exchange()
    fn set_routing_key<V>(&mut self, routing_key: V)
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        self.set_routing_key(routing_key.into())
    } // set_routing_key()
} // impl<'a> ::method::basic::SetReturnMethodFields<'a> for Return<'a>

#[derive(Debug)]
pub enum ClassMethod<'a> {
    Ack(Ack),
    Cancel(Cancel<'a>),
    CancelOk(CancelOk<'a>),
    Consume(Consume<'a>),
    ConsumeOk(ConsumeOk<'a>),
    Deliver(Deliver<'a>),
    Get(Get<'a>),
    GetEmpty(GetEmpty),
    GetOk(GetOk<'a>),
    Nack(Nack),
    Publish(Publish<'a>),
    Qos(Qos),
    QosOk(QosOk),
    Recover(Recover),
    RecoverAsync(RecoverAsync),
    RecoverOk(RecoverOk),
    Reject(Reject),
    Return(Return<'a>),
} // enum ClassMethod


impl<'a> ::Encodable for ClassMethod<'a> {
    fn encoded_size(&self) -> usize {
        match *self {
            ClassMethod::Ack(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Cancel(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::CancelOk(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Consume(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::ConsumeOk(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Deliver(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Get(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::GetEmpty(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::GetOk(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Nack(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Publish(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Qos(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::QosOk(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Recover(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::RecoverAsync(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::RecoverOk(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Reject(ref method) => ::Encodable::encoded_size(method),
            ClassMethod::Return(ref method) => ::Encodable::encoded_size(method),

        } // match *self

    } // fn encoded_size
} // impl ::Encodable for ClassMethod<'a>

impl<'a> ::ProtocolMethodPayload for ClassMethod<'a> {
    fn class_id(&self) -> u16 {
        match *self {
            ClassMethod::Ack(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Cancel(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::CancelOk(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Consume(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::ConsumeOk(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Deliver(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Get(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::GetEmpty(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::GetOk(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Nack(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Publish(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Qos(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::QosOk(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Recover(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::RecoverAsync(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::RecoverOk(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Reject(ref method) => ::ProtocolMethodPayload::class_id(method),
            ClassMethod::Return(ref method) => ::ProtocolMethodPayload::class_id(method),

        } // match *self

    } // fn class_id

    fn method_id(&self) -> u16 {
        match *self {
            ClassMethod::Ack(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Cancel(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::CancelOk(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Consume(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::ConsumeOk(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Deliver(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Get(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::GetEmpty(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::GetOk(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Nack(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Publish(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Qos(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::QosOk(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Recover(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::RecoverAsync(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::RecoverOk(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Reject(ref method) => ::ProtocolMethodPayload::method_id(method),
            ClassMethod::Return(ref method) => ::ProtocolMethodPayload::method_id(method),

        } // match *self

    } // fn method_id
} // impl ProtocolMethodPayload for ClassMethod
