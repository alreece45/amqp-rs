// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-build-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
#![allow(too_many_arguments)]

// Class Constants
pub const CLASS_ACCESS: u16 = 30;
pub const CLASS_BASIC: u16 = 60;
pub const CLASS_CHANNEL: u16 = 20;
pub const CLASS_CONNECTION: u16 = 10;
pub const CLASS_DTX: u16 = 100;
pub const CLASS_EXCHANGE: u16 = 40;
pub const CLASS_FILE: u16 = 70;
pub const CLASS_QUEUE: u16 = 50;
pub const CLASS_STREAM: u16 = 80;
pub const CLASS_TEST: u16 = 120;
pub const CLASS_TUNNEL: u16 = 110;
pub const CLASS_TX: u16 = 90;

// Class Methods
pub const METHOD_ACCESS_REQUEST: u16 = 10;
pub const METHOD_ACCESS_REQUEST_OK: u16 = 11;

pub const METHOD_BASIC_QOS: u16 = 10;
pub const METHOD_BASIC_QOS_OK: u16 = 11;
pub const METHOD_BASIC_CONSUME: u16 = 20;
pub const METHOD_BASIC_CONSUME_OK: u16 = 21;
pub const METHOD_BASIC_CANCEL: u16 = 30;
pub const METHOD_BASIC_CANCEL_OK: u16 = 31;
pub const METHOD_BASIC_PUBLISH: u16 = 40;
pub const METHOD_BASIC_RETURN: u16 = 50;
pub const METHOD_BASIC_DELIVER: u16 = 60;
pub const METHOD_BASIC_GET: u16 = 70;
pub const METHOD_BASIC_GET_OK: u16 = 71;
pub const METHOD_BASIC_GET_EMPTY: u16 = 72;
pub const METHOD_BASIC_ACK: u16 = 80;
pub const METHOD_BASIC_REJECT: u16 = 90;
pub const METHOD_BASIC_RECOVER: u16 = 100;
pub const METHOD_BASIC_RECOVER_OK: u16 = 101;

pub const METHOD_CHANNEL_OPEN: u16 = 10;
pub const METHOD_CHANNEL_OPEN_OK: u16 = 11;
pub const METHOD_CHANNEL_FLOW: u16 = 20;
pub const METHOD_CHANNEL_FLOW_OK: u16 = 21;
pub const METHOD_CHANNEL_ALERT: u16 = 30;
pub const METHOD_CHANNEL_CLOSE: u16 = 40;
pub const METHOD_CHANNEL_CLOSE_OK: u16 = 41;

pub const METHOD_CONNECTION_START: u16 = 10;
pub const METHOD_CONNECTION_START_OK: u16 = 11;
pub const METHOD_CONNECTION_SECURE: u16 = 20;
pub const METHOD_CONNECTION_SECURE_OK: u16 = 21;
pub const METHOD_CONNECTION_TUNE: u16 = 30;
pub const METHOD_CONNECTION_TUNE_OK: u16 = 31;
pub const METHOD_CONNECTION_OPEN: u16 = 40;
pub const METHOD_CONNECTION_OPEN_OK: u16 = 41;
pub const METHOD_CONNECTION_REDIRECT: u16 = 50;
pub const METHOD_CONNECTION_CLOSE: u16 = 60;
pub const METHOD_CONNECTION_CLOSE_OK: u16 = 61;

pub const METHOD_DTX_SELECT: u16 = 10;
pub const METHOD_DTX_SELECT_OK: u16 = 11;
pub const METHOD_DTX_START: u16 = 20;
pub const METHOD_DTX_START_OK: u16 = 21;

pub const METHOD_EXCHANGE_DECLARE: u16 = 10;
pub const METHOD_EXCHANGE_DECLARE_OK: u16 = 11;
pub const METHOD_EXCHANGE_DELETE: u16 = 20;
pub const METHOD_EXCHANGE_DELETE_OK: u16 = 21;
pub const METHOD_EXCHANGE_BOUND: u16 = 22;
pub const METHOD_EXCHANGE_BOUND_OK: u16 = 23;

pub const METHOD_FILE_QOS: u16 = 10;
pub const METHOD_FILE_QOS_OK: u16 = 11;
pub const METHOD_FILE_CONSUME: u16 = 20;
pub const METHOD_FILE_CONSUME_OK: u16 = 21;
pub const METHOD_FILE_CANCEL: u16 = 30;
pub const METHOD_FILE_CANCEL_OK: u16 = 31;
pub const METHOD_FILE_OPEN: u16 = 40;
pub const METHOD_FILE_OPEN_OK: u16 = 41;
pub const METHOD_FILE_STAGE: u16 = 50;
pub const METHOD_FILE_PUBLISH: u16 = 60;
pub const METHOD_FILE_RETURN: u16 = 70;
pub const METHOD_FILE_DELIVER: u16 = 80;
pub const METHOD_FILE_ACK: u16 = 90;
pub const METHOD_FILE_REJECT: u16 = 100;

pub const METHOD_QUEUE_DECLARE: u16 = 10;
pub const METHOD_QUEUE_DECLARE_OK: u16 = 11;
pub const METHOD_QUEUE_BIND: u16 = 20;
pub const METHOD_QUEUE_BIND_OK: u16 = 21;
pub const METHOD_QUEUE_PURGE: u16 = 30;
pub const METHOD_QUEUE_PURGE_OK: u16 = 31;
pub const METHOD_QUEUE_DELETE: u16 = 40;
pub const METHOD_QUEUE_DELETE_OK: u16 = 41;

pub const METHOD_STREAM_QOS: u16 = 10;
pub const METHOD_STREAM_QOS_OK: u16 = 11;
pub const METHOD_STREAM_CONSUME: u16 = 20;
pub const METHOD_STREAM_CONSUME_OK: u16 = 21;
pub const METHOD_STREAM_CANCEL: u16 = 30;
pub const METHOD_STREAM_CANCEL_OK: u16 = 31;
pub const METHOD_STREAM_PUBLISH: u16 = 40;
pub const METHOD_STREAM_RETURN: u16 = 50;
pub const METHOD_STREAM_DELIVER: u16 = 60;

pub const METHOD_TEST_INTEGER: u16 = 10;
pub const METHOD_TEST_INTEGER_OK: u16 = 11;
pub const METHOD_TEST_STRING: u16 = 20;
pub const METHOD_TEST_STRING_OK: u16 = 21;
pub const METHOD_TEST_TABLE: u16 = 30;
pub const METHOD_TEST_TABLE_OK: u16 = 31;
pub const METHOD_TEST_CONTENT: u16 = 40;
pub const METHOD_TEST_CONTENT_OK: u16 = 41;

pub const METHOD_TUNNEL_REQUEST: u16 = 10;

pub const METHOD_TX_SELECT: u16 = 10;
pub const METHOD_TX_SELECT_OK: u16 = 11;
pub const METHOD_TX_COMMIT: u16 = 20;
pub const METHOD_TX_COMMIT_OK: u16 = 21;
pub const METHOD_TX_ROLLBACK: u16 = 30;
pub const METHOD_TX_ROLLBACK_OK: u16 = 31;

// Class Modules
pub mod access {
    pub struct Properties;
    impl Properties {}
    pub struct Request<'a> {
        realm: ::std::borrow::Cow<'a, str>,
        exclusive: bool,
        passive: bool,
        active: bool,
        write: bool,
        read: bool,
    }
    impl<'a> Request<'a> {
        pub fn new<R>(realm: R,
                      exclusive: bool,
                      passive: bool,
                      active: bool,
                      write: bool,
                      read: bool)
                      -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Request {
                realm: realm.into(),
                exclusive: exclusive,
                passive: passive,
                active: active,
                write: write,
                read: read,
            }
        }
        pub fn realm(&self) -> &str {
            &*self.realm
        }
        pub fn exclusive(&self) -> bool {
            self.exclusive
        }
        pub fn passive(&self) -> bool {
            self.passive
        }
        pub fn active(&self) -> bool {
            self.active
        }
        pub fn write(&self) -> bool {
            self.write
        }
        pub fn read(&self) -> bool {
            self.read
        }
    }
    impl<'a> ::Payload for Request<'a> {
        fn class_id(&self) -> u16 {
            30
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.realm.len()]
                .iter()
                .sum()
        }
    }
    pub struct RequestOk {
        ticket: u16,
    }
    impl RequestOk {
        pub fn new(ticket: u16) -> Self {
            RequestOk { ticket: ticket }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
    }
    impl ::Payload for RequestOk {
        fn class_id(&self) -> u16 {
            30
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            2
        }
    }
}
pub mod basic {
    pub struct Properties<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::std::borrow::Cow<'a, ::field::Table<'a>>>,
        delivery_mode: Option<u8>,
        priority: Option<u8>,
        correlation_id: Option<::std::borrow::Cow<'a, str>>,
        reply_to: Option<::std::borrow::Cow<'a, str>>,
        expiration: Option<::std::borrow::Cow<'a, str>>,
        message_id: Option<::std::borrow::Cow<'a, str>>,
        timestamp: Option<u64>,
        ty: Option<::std::borrow::Cow<'a, str>>,
        user_id: Option<::std::borrow::Cow<'a, str>>,
        app_id: Option<::std::borrow::Cow<'a, str>>,
        cluster_id: Option<::std::borrow::Cow<'a, str>>,
    }

    impl<'a> Properties<'a> {
        pub fn content_type(&self) -> Option<&str> {
            self.content_type.as_ref().map(|v| &**v)
        }
        pub fn content_encoding(&self) -> Option<&str> {
            self.content_encoding.as_ref().map(|v| &**v)
        }
        pub fn headers(&self) -> Option<&::field::Table<'a>> {
            self.headers.as_ref().map(|v| &**v)
        }
        pub fn delivery_mode(&self) -> Option<u8> {
            self.delivery_mode
        }
        pub fn priority(&self) -> Option<u8> {
            self.priority
        }
        pub fn correlation_id(&self) -> Option<&str> {
            self.correlation_id.as_ref().map(|v| &**v)
        }
        pub fn reply_to(&self) -> Option<&str> {
            self.reply_to.as_ref().map(|v| &**v)
        }
        pub fn expiration(&self) -> Option<&str> {
            self.expiration.as_ref().map(|v| &**v)
        }
        pub fn message_id(&self) -> Option<&str> {
            self.message_id.as_ref().map(|v| &**v)
        }
        pub fn timestamp(&self) -> Option<u64> {
            self.timestamp
        }
        pub fn ty(&self) -> Option<&str> {
            self.ty.as_ref().map(|v| &**v)
        }
        pub fn user_id(&self) -> Option<&str> {
            self.user_id.as_ref().map(|v| &**v)
        }
        pub fn app_id(&self) -> Option<&str> {
            self.app_id.as_ref().map(|v| &**v)
        }
        pub fn cluster_id(&self) -> Option<&str> {
            self.cluster_id.as_ref().map(|v| &**v)
        }
    }
    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        global: bool,
    }
    impl Qos {
        pub fn new(prefetch_size: u32, prefetch_count: u16, global: bool) -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                global: global,
            }
        }
        pub fn prefetch_size(&self) -> u32 {
            self.prefetch_size
        }
        pub fn prefetch_count(&self) -> u16 {
            self.prefetch_count
        }
        pub fn global(&self) -> bool {
            self.global
        }
    }
    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            7
        }
    }
    pub struct QosOk;
    impl QosOk {
        pub fn new() -> Self {
            QosOk
        }
    }
    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        no_ack: bool,
        exclusive: bool,
        nowait: bool,
        arguments: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Consume<'a> {
        pub fn new<Q, C, A>(ticket: u16,
                            queue: Q,
                            consumer_tag: C,
                            no_local: bool,
                            no_ack: bool,
                            exclusive: bool,
                            nowait: bool,
                            arguments: A)
                            -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                no_ack: no_ack,
                exclusive: exclusive,
                nowait: nowait,
                arguments: arguments.into(),
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn no_local(&self) -> bool {
            self.no_local
        }
        pub fn no_ack(&self) -> bool {
            self.no_ack
        }
        pub fn exclusive(&self) -> bool {
            self.exclusive
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
        pub fn arguments(&self) -> &::field::Table<'a> {
            &*self.arguments
        }
    }
    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    }
    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
    }
    impl<'a> Publish<'a> {
        pub fn new<E, R>(ticket: u16,
                         exchange: E,
                         routing_key: R,
                         mandatory: bool,
                         immediate: bool)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn mandatory(&self) -> bool {
            self.mandatory
        }
        pub fn immediate(&self) -> bool {
            self.immediate
        }
    }
    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
    }
    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            50
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Deliver<'a> {
        pub fn new<C, E, R>(consumer_tag: C,
                            delivery_tag: u64,
                            redelivered: bool,
                            exchange: E,
                            routing_key: R)
                            -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn redelivered(&self) -> bool {
            self.redelivered
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
    }
    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            60
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [12, self.consumer_tag.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Get<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        no_ack: bool,
    }
    impl<'a> Get<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, no_ack: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Get {
                ticket: ticket,
                queue: queue.into(),
                no_ack: no_ack,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn no_ack(&self) -> bool {
            self.no_ack
        }
    }
    impl<'a> ::Payload for Get<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            70
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        }
    }
    pub struct GetOk<'a> {
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        message_count: u32,
    }
    impl<'a> GetOk<'a> {
        pub fn new<E, R>(delivery_tag: u64,
                         redelivered: bool,
                         exchange: E,
                         routing_key: R,
                         message_count: u32)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            GetOk {
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                message_count: message_count,
            }
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn redelivered(&self) -> bool {
            self.redelivered
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn message_count(&self) -> u32 {
            self.message_count
        }
    }
    impl<'a> ::Payload for GetOk<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            71
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [15, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct GetEmpty<'a> {
        cluster_id: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> GetEmpty<'a> {
        pub fn new<C>(cluster_id: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            GetEmpty { cluster_id: cluster_id.into() }
        }
        pub fn cluster_id(&self) -> &str {
            &*self.cluster_id
        }
    }
    impl<'a> ::Payload for GetEmpty<'a> {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            72
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.cluster_id.len()]
                .iter()
                .sum()
        }
    }
    pub struct Ack {
        delivery_tag: u64,
        multiple: bool,
    }
    impl Ack {
        pub fn new(delivery_tag: u64, multiple: bool) -> Self {
            Ack {
                delivery_tag: delivery_tag,
                multiple: multiple,
            }
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn multiple(&self) -> bool {
            self.multiple
        }
    }
    impl ::Payload for Ack {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            80
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            9
        }
    }
    pub struct Reject {
        delivery_tag: u64,
        requeue: bool,
    }
    impl Reject {
        pub fn new(delivery_tag: u64, requeue: bool) -> Self {
            Reject {
                delivery_tag: delivery_tag,
                requeue: requeue,
            }
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn requeue(&self) -> bool {
            self.requeue
        }
    }
    impl ::Payload for Reject {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            90
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            9
        }
    }
    pub struct Recover {
        requeue: bool,
    }
    impl Recover {
        pub fn new(requeue: bool) -> Self {
            Recover { requeue: requeue }
        }
        pub fn requeue(&self) -> bool {
            self.requeue
        }
    }
    impl ::Payload for Recover {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            100
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            1
        }
    }
    pub struct RecoverOk;
    impl RecoverOk {
        pub fn new() -> Self {
            RecoverOk
        }
    }
    impl ::Payload for RecoverOk {
        fn class_id(&self) -> u16 {
            60
        }
        fn method_id(&self) -> u16 {
            101
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
}
pub mod channel {
    pub struct Properties;
    impl Properties {}
    pub struct Open<'a> {
        out_of_band: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Open<'a> {
        pub fn new<O>(out_of_band: O) -> Self
            where O: Into<::std::borrow::Cow<'a, str>>
        {
            Open { out_of_band: out_of_band.into() }
        }
        pub fn out_of_band(&self) -> &str {
            &*self.out_of_band
        }
    }
    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.out_of_band.len()]
                .iter()
                .sum()
        }
    }
    pub struct OpenOk;
    impl OpenOk {
        pub fn new() -> Self {
            OpenOk
        }
    }
    impl ::Payload for OpenOk {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Flow {
        active: bool,
    }
    impl Flow {
        pub fn new(active: bool) -> Self {
            Flow { active: active }
        }
        pub fn active(&self) -> bool {
            self.active
        }
    }
    impl ::Payload for Flow {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            1
        }
    }
    pub struct FlowOk {
        active: bool,
    }
    impl FlowOk {
        pub fn new(active: bool) -> Self {
            FlowOk { active: active }
        }
        pub fn active(&self) -> bool {
            self.active
        }
    }
    impl ::Payload for FlowOk {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            1
        }
    }
    pub struct Alert<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        details: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Alert<'a> {
        pub fn new<R, D>(reply_code: u16, reply_text: R, details: D) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  D: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Alert {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                details: details.into(),
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn details(&self) -> &::field::Table<'a> {
            &*self.details
        }
    }
    impl<'a> ::Payload for Alert<'a> {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [3, self.reply_text.len(), self.details.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct Close<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        class_id: u16,
        method_id: u16,
    }
    impl<'a> Close<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R, class_id: u16, method_id: u16) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Close {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                class_id: class_id,
                method_id: method_id,
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn class_id(&self) -> u16 {
            self.class_id
        }
        pub fn method_id(&self) -> u16 {
            self.method_id
        }
    }
    impl<'a> ::Payload for Close<'a> {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [7, self.reply_text.len()]
                .iter()
                .sum()
        }
    }
    pub struct CloseOk;
    impl CloseOk {
        pub fn new() -> Self {
            CloseOk
        }
    }
    impl ::Payload for CloseOk {
        fn class_id(&self) -> u16 {
            20
        }
        fn method_id(&self) -> u16 {
            41
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
}
pub mod connection {
    pub struct Properties;
    impl Properties {}
    pub struct Start<'a> {
        version_major: u8,
        version_minor: u8,
        server_properties: ::std::borrow::Cow<'a, ::field::Table<'a>>,
        mechanisms: ::std::borrow::Cow<'a, [u8]>,
        locales: ::std::borrow::Cow<'a, [u8]>,
    }
    impl<'a> Start<'a> {
        pub fn new<S, M, L>(version_major: u8,
                            version_minor: u8,
                            server_properties: S,
                            mechanisms: M,
                            locales: L)
                            -> Self
            where S: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>,
                  M: Into<::std::borrow::Cow<'a, [u8]>>,
                  L: Into<::std::borrow::Cow<'a, [u8]>>
        {
            Start {
                version_major: version_major,
                version_minor: version_minor,
                server_properties: server_properties.into(),
                mechanisms: mechanisms.into(),
                locales: locales.into(),
            }
        }
        pub fn version_major(&self) -> u8 {
            self.version_major
        }
        pub fn version_minor(&self) -> u8 {
            self.version_minor
        }
        pub fn server_properties(&self) -> &::field::Table<'a> {
            &*self.server_properties
        }
        pub fn mechanisms(&self) -> &[u8] {
            &*self.mechanisms
        }
        pub fn locales(&self) -> &[u8] {
            &*self.locales
        }
    }
    impl<'a> ::Payload for Start<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [6, self.server_properties.amqp_size(), self.mechanisms.len(), self.locales.len()]
                .iter()
                .sum()
        }
    }
    pub struct StartOk<'a> {
        client_properties: ::std::borrow::Cow<'a, ::field::Table<'a>>,
        mechanism: ::std::borrow::Cow<'a, str>,
        response: ::std::borrow::Cow<'a, [u8]>,
        locale: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> StartOk<'a> {
        pub fn new<C, M, R, L>(client_properties: C, mechanism: M, response: R, locale: L) -> Self
            where C: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>,
                  M: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, [u8]>>,
                  L: Into<::std::borrow::Cow<'a, str>>
        {
            StartOk {
                client_properties: client_properties.into(),
                mechanism: mechanism.into(),
                response: response.into(),
                locale: locale.into(),
            }
        }
        pub fn client_properties(&self) -> &::field::Table<'a> {
            &*self.client_properties
        }
        pub fn mechanism(&self) -> &str {
            &*self.mechanism
        }
        pub fn response(&self) -> &[u8] {
            &*self.response
        }
        pub fn locale(&self) -> &str {
            &*self.locale
        }
    }
    impl<'a> ::Payload for StartOk<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4,
             self.client_properties.amqp_size(),
             self.mechanism.len(),
             self.response.len(),
             self.locale.len()]
                .iter()
                .sum()
        }
    }
    pub struct Secure<'a> {
        challenge: ::std::borrow::Cow<'a, [u8]>,
    }
    impl<'a> Secure<'a> {
        pub fn new<C>(challenge: C) -> Self
            where C: Into<::std::borrow::Cow<'a, [u8]>>
        {
            Secure { challenge: challenge.into() }
        }
        pub fn challenge(&self) -> &[u8] {
            &*self.challenge
        }
    }
    impl<'a> ::Payload for Secure<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.challenge.len()]
                .iter()
                .sum()
        }
    }
    pub struct SecureOk<'a> {
        response: ::std::borrow::Cow<'a, [u8]>,
    }
    impl<'a> SecureOk<'a> {
        pub fn new<R>(response: R) -> Self
            where R: Into<::std::borrow::Cow<'a, [u8]>>
        {
            SecureOk { response: response.into() }
        }
        pub fn response(&self) -> &[u8] {
            &*self.response
        }
    }
    impl<'a> ::Payload for SecureOk<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.response.len()]
                .iter()
                .sum()
        }
    }
    pub struct Tune {
        channel_max: u16,
        frame_max: u32,
        heartbeat: u16,
    }
    impl Tune {
        pub fn new(channel_max: u16, frame_max: u32, heartbeat: u16) -> Self {
            Tune {
                channel_max: channel_max,
                frame_max: frame_max,
                heartbeat: heartbeat,
            }
        }
        pub fn channel_max(&self) -> u16 {
            self.channel_max
        }
        pub fn frame_max(&self) -> u32 {
            self.frame_max
        }
        pub fn heartbeat(&self) -> u16 {
            self.heartbeat
        }
    }
    impl ::Payload for Tune {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            8
        }
    }
    pub struct TuneOk {
        channel_max: u16,
        frame_max: u32,
        heartbeat: u16,
    }
    impl TuneOk {
        pub fn new(channel_max: u16, frame_max: u32, heartbeat: u16) -> Self {
            TuneOk {
                channel_max: channel_max,
                frame_max: frame_max,
                heartbeat: heartbeat,
            }
        }
        pub fn channel_max(&self) -> u16 {
            self.channel_max
        }
        pub fn frame_max(&self) -> u32 {
            self.frame_max
        }
        pub fn heartbeat(&self) -> u16 {
            self.heartbeat
        }
    }
    impl ::Payload for TuneOk {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            8
        }
    }
    pub struct Open<'a> {
        virtual_host: ::std::borrow::Cow<'a, str>,
        capabilities: ::std::borrow::Cow<'a, str>,
        insist: bool,
    }
    impl<'a> Open<'a> {
        pub fn new<V, C>(virtual_host: V, capabilities: C, insist: bool) -> Self
            where V: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Open {
                virtual_host: virtual_host.into(),
                capabilities: capabilities.into(),
                insist: insist,
            }
        }
        pub fn virtual_host(&self) -> &str {
            &*self.virtual_host
        }
        pub fn capabilities(&self) -> &str {
            &*self.capabilities
        }
        pub fn insist(&self) -> bool {
            self.insist
        }
    }
    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [3, self.virtual_host.len(), self.capabilities.len()]
                .iter()
                .sum()
        }
    }
    pub struct OpenOk<'a> {
        known_hosts: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> OpenOk<'a> {
        pub fn new<K>(known_hosts: K) -> Self
            where K: Into<::std::borrow::Cow<'a, str>>
        {
            OpenOk { known_hosts: known_hosts.into() }
        }
        pub fn known_hosts(&self) -> &str {
            &*self.known_hosts
        }
    }
    impl<'a> ::Payload for OpenOk<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            41
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.known_hosts.len()]
                .iter()
                .sum()
        }
    }
    pub struct Redirect<'a> {
        host: ::std::borrow::Cow<'a, str>,
        known_hosts: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Redirect<'a> {
        pub fn new<H, K>(host: H, known_hosts: K) -> Self
            where H: Into<::std::borrow::Cow<'a, str>>,
                  K: Into<::std::borrow::Cow<'a, str>>
        {
            Redirect {
                host: host.into(),
                known_hosts: known_hosts.into(),
            }
        }
        pub fn host(&self) -> &str {
            &*self.host
        }
        pub fn known_hosts(&self) -> &str {
            &*self.known_hosts
        }
    }
    impl<'a> ::Payload for Redirect<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            50
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.host.len(), self.known_hosts.len()]
                .iter()
                .sum()
        }
    }
    pub struct Close<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        class_id: u16,
        method_id: u16,
    }
    impl<'a> Close<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R, class_id: u16, method_id: u16) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Close {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                class_id: class_id,
                method_id: method_id,
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn class_id(&self) -> u16 {
            self.class_id
        }
        pub fn method_id(&self) -> u16 {
            self.method_id
        }
    }
    impl<'a> ::Payload for Close<'a> {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            60
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [7, self.reply_text.len()]
                .iter()
                .sum()
        }
    }
    pub struct CloseOk;
    impl CloseOk {
        pub fn new() -> Self {
            CloseOk
        }
    }
    impl ::Payload for CloseOk {
        fn class_id(&self) -> u16 {
            10
        }
        fn method_id(&self) -> u16 {
            61
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
}
pub mod dtx {
    pub struct Properties;
    impl Properties {}
    pub struct Select;
    impl Select {
        pub fn new() -> Self {
            Select
        }
    }
    impl ::Payload for Select {
        fn class_id(&self) -> u16 {
            100
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct SelectOk;
    impl SelectOk {
        pub fn new() -> Self {
            SelectOk
        }
    }
    impl ::Payload for SelectOk {
        fn class_id(&self) -> u16 {
            100
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Start<'a> {
        dtx_identifier: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Start<'a> {
        pub fn new<D>(dtx_identifier: D) -> Self
            where D: Into<::std::borrow::Cow<'a, str>>
        {
            Start { dtx_identifier: dtx_identifier.into() }
        }
        pub fn dtx_identifier(&self) -> &str {
            &*self.dtx_identifier
        }
    }
    impl<'a> ::Payload for Start<'a> {
        fn class_id(&self) -> u16 {
            100
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.dtx_identifier.len()]
                .iter()
                .sum()
        }
    }
    pub struct StartOk;
    impl StartOk {
        pub fn new() -> Self {
            StartOk
        }
    }
    impl ::Payload for StartOk {
        fn class_id(&self) -> u16 {
            100
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
}
pub mod exchange {
    pub struct Properties;
    impl Properties {}
    pub struct Declare<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        ty: ::std::borrow::Cow<'a, str>,
        passive: bool,
        durable: bool,
        auto_delete: bool,
        internal: bool,
        nowait: bool,
        arguments: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Declare<'a> {
        pub fn new<E, T, A>(ticket: u16,
                            exchange: E,
                            ty: T,
                            passive: bool,
                            durable: bool,
                            auto_delete: bool,
                            internal: bool,
                            nowait: bool,
                            arguments: A)
                            -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  T: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Declare {
                ticket: ticket,
                exchange: exchange.into(),
                ty: ty.into(),
                passive: passive,
                durable: durable,
                auto_delete: auto_delete,
                internal: internal,
                nowait: nowait,
                arguments: arguments.into(),
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn ty(&self) -> &str {
            &*self.ty
        }
        pub fn passive(&self) -> bool {
            self.passive
        }
        pub fn durable(&self) -> bool {
            self.durable
        }
        pub fn auto_delete(&self) -> bool {
            self.auto_delete
        }
        pub fn internal(&self) -> bool {
            self.internal
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
        pub fn arguments(&self) -> &::field::Table<'a> {
            &*self.arguments
        }
    }
    impl<'a> ::Payload for Declare<'a> {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.ty.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct DeclareOk;
    impl DeclareOk {
        pub fn new() -> Self {
            DeclareOk
        }
    }
    impl ::Payload for DeclareOk {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Delete<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        if_unused: bool,
        nowait: bool,
    }
    impl<'a> Delete<'a> {
        pub fn new<E>(ticket: u16, exchange: E, if_unused: bool, nowait: bool) -> Self
            where E: Into<::std::borrow::Cow<'a, str>>
        {
            Delete {
                ticket: ticket,
                exchange: exchange.into(),
                if_unused: if_unused,
                nowait: nowait,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn if_unused(&self) -> bool {
            self.if_unused
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Delete<'a> {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.exchange.len()]
                .iter()
                .sum()
        }
    }
    pub struct DeleteOk;
    impl DeleteOk {
        pub fn new() -> Self {
            DeleteOk
        }
    }
    impl ::Payload for DeleteOk {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Bound<'a> {
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        queue: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Bound<'a> {
        pub fn new<E, R, Q>(exchange: E, routing_key: R, queue: Q) -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  Q: Into<::std::borrow::Cow<'a, str>>
        {
            Bound {
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                queue: queue.into(),
            }
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
    }
    impl<'a> ::Payload for Bound<'a> {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            22
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [3, self.exchange.len(), self.routing_key.len(), self.queue.len()]
                .iter()
                .sum()
        }
    }
    pub struct BoundOk<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> BoundOk<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            BoundOk {
                reply_code: reply_code,
                reply_text: reply_text.into(),
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
    }
    impl<'a> ::Payload for BoundOk<'a> {
        fn class_id(&self) -> u16 {
            40
        }
        fn method_id(&self) -> u16 {
            23
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [3, self.reply_text.len()]
                .iter()
                .sum()
        }
    }
}
pub mod file {
    pub struct Properties<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::std::borrow::Cow<'a, ::field::Table<'a>>>,
        priority: Option<u8>,
        reply_to: Option<::std::borrow::Cow<'a, str>>,
        message_id: Option<::std::borrow::Cow<'a, str>>,
        filename: Option<::std::borrow::Cow<'a, str>>,
        timestamp: Option<u64>,
        cluster_id: Option<::std::borrow::Cow<'a, str>>,
    }

    impl<'a> Properties<'a> {
        pub fn content_type(&self) -> Option<&str> {
            self.content_type.as_ref().map(|v| &**v)
        }
        pub fn content_encoding(&self) -> Option<&str> {
            self.content_encoding.as_ref().map(|v| &**v)
        }
        pub fn headers(&self) -> Option<&::field::Table<'a>> {
            self.headers.as_ref().map(|v| &**v)
        }
        pub fn priority(&self) -> Option<u8> {
            self.priority
        }
        pub fn reply_to(&self) -> Option<&str> {
            self.reply_to.as_ref().map(|v| &**v)
        }
        pub fn message_id(&self) -> Option<&str> {
            self.message_id.as_ref().map(|v| &**v)
        }
        pub fn filename(&self) -> Option<&str> {
            self.filename.as_ref().map(|v| &**v)
        }
        pub fn timestamp(&self) -> Option<u64> {
            self.timestamp
        }
        pub fn cluster_id(&self) -> Option<&str> {
            self.cluster_id.as_ref().map(|v| &**v)
        }
    }
    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        global: bool,
    }
    impl Qos {
        pub fn new(prefetch_size: u32, prefetch_count: u16, global: bool) -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                global: global,
            }
        }
        pub fn prefetch_size(&self) -> u32 {
            self.prefetch_size
        }
        pub fn prefetch_count(&self) -> u16 {
            self.prefetch_count
        }
        pub fn global(&self) -> bool {
            self.global
        }
    }
    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            7
        }
    }
    pub struct QosOk;
    impl QosOk {
        pub fn new() -> Self {
            QosOk
        }
    }
    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        no_ack: bool,
        exclusive: bool,
        nowait: bool,
    }
    impl<'a> Consume<'a> {
        pub fn new<Q, C>(ticket: u16,
                         queue: Q,
                         consumer_tag: C,
                         no_local: bool,
                         no_ack: bool,
                         exclusive: bool,
                         nowait: bool)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                no_ack: no_ack,
                exclusive: exclusive,
                nowait: nowait,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn no_local(&self) -> bool {
            self.no_local
        }
        pub fn no_ack(&self) -> bool {
            self.no_ack
        }
        pub fn exclusive(&self) -> bool {
            self.exclusive
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    }
    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Open<'a> {
        identifier: ::std::borrow::Cow<'a, str>,
        content_size: u64,
    }
    impl<'a> Open<'a> {
        pub fn new<I>(identifier: I, content_size: u64) -> Self
            where I: Into<::std::borrow::Cow<'a, str>>
        {
            Open {
                identifier: identifier.into(),
                content_size: content_size,
            }
        }
        pub fn identifier(&self) -> &str {
            &*self.identifier
        }
        pub fn content_size(&self) -> u64 {
            self.content_size
        }
    }
    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [9, self.identifier.len()]
                .iter()
                .sum()
        }
    }
    pub struct OpenOk {
        staged_size: u64,
    }
    impl OpenOk {
        pub fn new(staged_size: u64) -> Self {
            OpenOk { staged_size: staged_size }
        }
        pub fn staged_size(&self) -> u64 {
            self.staged_size
        }
    }
    impl ::Payload for OpenOk {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            41
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            8
        }
    }
    pub struct Stage;
    impl Stage {
        pub fn new() -> Self {
            Stage
        }
    }
    impl ::Payload for Stage {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            50
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
        identifier: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Publish<'a> {
        pub fn new<E, R, I>(ticket: u16,
                            exchange: E,
                            routing_key: R,
                            mandatory: bool,
                            immediate: bool,
                            identifier: I)
                            -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  I: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
                identifier: identifier.into(),
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn mandatory(&self) -> bool {
            self.mandatory
        }
        pub fn immediate(&self) -> bool {
            self.immediate
        }
        pub fn identifier(&self) -> &str {
            &*self.identifier
        }
    }
    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            60
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [6, self.exchange.len(), self.routing_key.len(), self.identifier.len()]
                .iter()
                .sum()
        }
    }
    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
    }
    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            70
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        identifier: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Deliver<'a> {
        pub fn new<C, E, R, I>(consumer_tag: C,
                               delivery_tag: u64,
                               redelivered: bool,
                               exchange: E,
                               routing_key: R,
                               identifier: I)
                               -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  I: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                identifier: identifier.into(),
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn redelivered(&self) -> bool {
            self.redelivered
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn identifier(&self) -> &str {
            &*self.identifier
        }
    }
    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            80
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [13,
             self.consumer_tag.len(),
             self.exchange.len(),
             self.routing_key.len(),
             self.identifier.len()]
                .iter()
                .sum()
        }
    }
    pub struct Ack {
        delivery_tag: u64,
        multiple: bool,
    }
    impl Ack {
        pub fn new(delivery_tag: u64, multiple: bool) -> Self {
            Ack {
                delivery_tag: delivery_tag,
                multiple: multiple,
            }
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn multiple(&self) -> bool {
            self.multiple
        }
    }
    impl ::Payload for Ack {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            90
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            9
        }
    }
    pub struct Reject {
        delivery_tag: u64,
        requeue: bool,
    }
    impl Reject {
        pub fn new(delivery_tag: u64, requeue: bool) -> Self {
            Reject {
                delivery_tag: delivery_tag,
                requeue: requeue,
            }
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn requeue(&self) -> bool {
            self.requeue
        }
    }
    impl ::Payload for Reject {
        fn class_id(&self) -> u16 {
            70
        }
        fn method_id(&self) -> u16 {
            100
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            9
        }
    }
}
pub mod queue {
    pub struct Properties;
    impl Properties {}
    pub struct Declare<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        passive: bool,
        durable: bool,
        exclusive: bool,
        auto_delete: bool,
        nowait: bool,
        arguments: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Declare<'a> {
        pub fn new<Q, A>(ticket: u16,
                         queue: Q,
                         passive: bool,
                         durable: bool,
                         exclusive: bool,
                         auto_delete: bool,
                         nowait: bool,
                         arguments: A)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Declare {
                ticket: ticket,
                queue: queue.into(),
                passive: passive,
                durable: durable,
                exclusive: exclusive,
                auto_delete: auto_delete,
                nowait: nowait,
                arguments: arguments.into(),
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn passive(&self) -> bool {
            self.passive
        }
        pub fn durable(&self) -> bool {
            self.durable
        }
        pub fn exclusive(&self) -> bool {
            self.exclusive
        }
        pub fn auto_delete(&self) -> bool {
            self.auto_delete
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
        pub fn arguments(&self) -> &::field::Table<'a> {
            &*self.arguments
        }
    }
    impl<'a> ::Payload for Declare<'a> {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.queue.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct DeclareOk<'a> {
        queue: ::std::borrow::Cow<'a, str>,
        message_count: u32,
        consumer_count: u32,
    }
    impl<'a> DeclareOk<'a> {
        pub fn new<Q>(queue: Q, message_count: u32, consumer_count: u32) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            DeclareOk {
                queue: queue.into(),
                message_count: message_count,
                consumer_count: consumer_count,
            }
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn message_count(&self) -> u32 {
            self.message_count
        }
        pub fn consumer_count(&self) -> u32 {
            self.consumer_count
        }
    }
    impl<'a> ::Payload for DeclareOk<'a> {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [9, self.queue.len()]
                .iter()
                .sum()
        }
    }
    pub struct Bind<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        nowait: bool,
        arguments: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Bind<'a> {
        pub fn new<Q, E, R, A>(ticket: u16,
                               queue: Q,
                               exchange: E,
                               routing_key: R,
                               nowait: bool,
                               arguments: A)
                               -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Bind {
                ticket: ticket,
                queue: queue.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                nowait: nowait,
                arguments: arguments.into(),
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
        pub fn arguments(&self) -> &::field::Table<'a> {
            &*self.arguments
        }
    }
    impl<'a> ::Payload for Bind<'a> {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [6,
             self.queue.len(),
             self.exchange.len(),
             self.routing_key.len(),
             self.arguments.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct BindOk;
    impl BindOk {
        pub fn new() -> Self {
            BindOk
        }
    }
    impl ::Payload for BindOk {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Purge<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    }
    impl<'a> Purge<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, nowait: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Purge {
                ticket: ticket,
                queue: queue.into(),
                nowait: nowait,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Purge<'a> {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        }
    }
    pub struct PurgeOk {
        message_count: u32,
    }
    impl PurgeOk {
        pub fn new(message_count: u32) -> Self {
            PurgeOk { message_count: message_count }
        }
        pub fn message_count(&self) -> u32 {
            self.message_count
        }
    }
    impl ::Payload for PurgeOk {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            4
        }
    }
    pub struct Delete<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        if_unused: bool,
        if_empty: bool,
        nowait: bool,
    }
    impl<'a> Delete<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, if_unused: bool, if_empty: bool, nowait: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Delete {
                ticket: ticket,
                queue: queue.into(),
                if_unused: if_unused,
                if_empty: if_empty,
                nowait: nowait,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn if_unused(&self) -> bool {
            self.if_unused
        }
        pub fn if_empty(&self) -> bool {
            self.if_empty
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Delete<'a> {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        }
    }
    pub struct DeleteOk {
        message_count: u32,
    }
    impl DeleteOk {
        pub fn new(message_count: u32) -> Self {
            DeleteOk { message_count: message_count }
        }
        pub fn message_count(&self) -> u32 {
            self.message_count
        }
    }
    impl ::Payload for DeleteOk {
        fn class_id(&self) -> u16 {
            50
        }
        fn method_id(&self) -> u16 {
            41
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            4
        }
    }
}
pub mod stream {
    pub struct Properties<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::std::borrow::Cow<'a, ::field::Table<'a>>>,
        priority: Option<u8>,
        timestamp: Option<u64>,
    }

    impl<'a> Properties<'a> {
        pub fn content_type(&self) -> Option<&str> {
            self.content_type.as_ref().map(|v| &**v)
        }
        pub fn content_encoding(&self) -> Option<&str> {
            self.content_encoding.as_ref().map(|v| &**v)
        }
        pub fn headers(&self) -> Option<&::field::Table<'a>> {
            self.headers.as_ref().map(|v| &**v)
        }
        pub fn priority(&self) -> Option<u8> {
            self.priority
        }
        pub fn timestamp(&self) -> Option<u64> {
            self.timestamp
        }
    }
    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        consume_rate: u32,
        global: bool,
    }
    impl Qos {
        pub fn new(prefetch_size: u32,
                   prefetch_count: u16,
                   consume_rate: u32,
                   global: bool)
                   -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                consume_rate: consume_rate,
                global: global,
            }
        }
        pub fn prefetch_size(&self) -> u32 {
            self.prefetch_size
        }
        pub fn prefetch_count(&self) -> u16 {
            self.prefetch_count
        }
        pub fn consume_rate(&self) -> u32 {
            self.consume_rate
        }
        pub fn global(&self) -> bool {
            self.global
        }
    }
    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            11
        }
    }
    pub struct QosOk;
    impl QosOk {
        pub fn new() -> Self {
            QosOk
        }
    }
    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        exclusive: bool,
        nowait: bool,
    }
    impl<'a> Consume<'a> {
        pub fn new<Q, C>(ticket: u16,
                         queue: Q,
                         consumer_tag: C,
                         no_local: bool,
                         exclusive: bool,
                         nowait: bool)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                exclusive: exclusive,
                nowait: nowait,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn no_local(&self) -> bool {
            self.no_local
        }
        pub fn exclusive(&self) -> bool {
            self.exclusive
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    }
    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn nowait(&self) -> bool {
            self.nowait
        }
    }
    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
    }
    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        }
    }
    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
    }
    impl<'a> Publish<'a> {
        pub fn new<E, R>(ticket: u16,
                         exchange: E,
                         routing_key: R,
                         mandatory: bool,
                         immediate: bool)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
            }
        }
        pub fn ticket(&self) -> u16 {
            self.ticket
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
        pub fn mandatory(&self) -> bool {
            self.mandatory
        }
        pub fn immediate(&self) -> bool {
            self.immediate
        }
    }
    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            }
        }
        pub fn reply_code(&self) -> u16 {
            self.reply_code
        }
        pub fn reply_text(&self) -> &str {
            &*self.reply_text
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn routing_key(&self) -> &str {
            &*self.routing_key
        }
    }
    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            50
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        }
    }
    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        exchange: ::std::borrow::Cow<'a, str>,
        queue: ::std::borrow::Cow<'a, str>,
    }
    impl<'a> Deliver<'a> {
        pub fn new<C, E, Q>(consumer_tag: C, delivery_tag: u64, exchange: E, queue: Q) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  Q: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                exchange: exchange.into(),
                queue: queue.into(),
            }
        }
        pub fn consumer_tag(&self) -> &str {
            &*self.consumer_tag
        }
        pub fn delivery_tag(&self) -> u64 {
            self.delivery_tag
        }
        pub fn exchange(&self) -> &str {
            &*self.exchange
        }
        pub fn queue(&self) -> &str {
            &*self.queue
        }
    }
    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            80
        }
        fn method_id(&self) -> u16 {
            60
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [11, self.consumer_tag.len(), self.exchange.len(), self.queue.len()]
                .iter()
                .sum()
        }
    }
}
pub mod test {
    pub struct Properties;
    impl Properties {}
    pub struct Integer {
        integer_1: u8,
        integer_2: u16,
        integer_3: u32,
        integer_4: u64,
        operation: u8,
    }
    impl Integer {
        pub fn new(integer_1: u8,
                   integer_2: u16,
                   integer_3: u32,
                   integer_4: u64,
                   operation: u8)
                   -> Self {
            Integer {
                integer_1: integer_1,
                integer_2: integer_2,
                integer_3: integer_3,
                integer_4: integer_4,
                operation: operation,
            }
        }
        pub fn integer_1(&self) -> u8 {
            self.integer_1
        }
        pub fn integer_2(&self) -> u16 {
            self.integer_2
        }
        pub fn integer_3(&self) -> u32 {
            self.integer_3
        }
        pub fn integer_4(&self) -> u64 {
            self.integer_4
        }
        pub fn operation(&self) -> u8 {
            self.operation
        }
    }
    impl ::Payload for Integer {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            16
        }
    }
    pub struct IntegerOk {
        result: u64,
    }
    impl IntegerOk {
        pub fn new(result: u64) -> Self {
            IntegerOk { result: result }
        }
        pub fn result(&self) -> u64 {
            self.result
        }
    }
    impl ::Payload for IntegerOk {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            8
        }
    }
    pub struct String<'a> {
        string_1: ::std::borrow::Cow<'a, str>,
        string_2: ::std::borrow::Cow<'a, [u8]>,
        operation: u8,
    }
    impl<'a> String<'a> {
        pub fn new<S, S0>(string_1: S, string_2: S0, operation: u8) -> Self
            where S: Into<::std::borrow::Cow<'a, str>>,
                  S0: Into<::std::borrow::Cow<'a, [u8]>>
        {
            String {
                string_1: string_1.into(),
                string_2: string_2.into(),
                operation: operation,
            }
        }
        pub fn string_1(&self) -> &str {
            &*self.string_1
        }
        pub fn string_2(&self) -> &[u8] {
            &*self.string_2
        }
        pub fn operation(&self) -> u8 {
            self.operation
        }
    }
    impl<'a> ::Payload for String<'a> {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [4, self.string_1.len(), self.string_2.len()]
                .iter()
                .sum()
        }
    }
    pub struct StringOk<'a> {
        result: ::std::borrow::Cow<'a, [u8]>,
    }
    impl<'a> StringOk<'a> {
        pub fn new<R>(result: R) -> Self
            where R: Into<::std::borrow::Cow<'a, [u8]>>
        {
            StringOk { result: result.into() }
        }
        pub fn result(&self) -> &[u8] {
            &*self.result
        }
    }
    impl<'a> ::Payload for StringOk<'a> {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.result.len()]
                .iter()
                .sum()
        }
    }
    pub struct Table<'a> {
        table: ::std::borrow::Cow<'a, ::field::Table<'a>>,
        integer_op: u8,
        string_op: u8,
    }
    impl<'a> Table<'a> {
        pub fn new<T>(table: T, integer_op: u8, string_op: u8) -> Self
            where T: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Table {
                table: table.into(),
                integer_op: integer_op,
                string_op: string_op,
            }
        }
        pub fn table(&self) -> &::field::Table<'a> {
            &*self.table
        }
        pub fn integer_op(&self) -> u8 {
            self.integer_op
        }
        pub fn string_op(&self) -> u8 {
            self.string_op
        }
    }
    impl<'a> ::Payload for Table<'a> {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [2, self.table.amqp_size()]
                .iter()
                .sum()
        }
    }
    pub struct TableOk<'a> {
        integer_result: u64,
        string_result: ::std::borrow::Cow<'a, [u8]>,
    }
    impl<'a> TableOk<'a> {
        pub fn new<S>(integer_result: u64, string_result: S) -> Self
            where S: Into<::std::borrow::Cow<'a, [u8]>>
        {
            TableOk {
                integer_result: integer_result,
                string_result: string_result.into(),
            }
        }
        pub fn integer_result(&self) -> u64 {
            self.integer_result
        }
        pub fn string_result(&self) -> &[u8] {
            &*self.string_result
        }
    }
    impl<'a> ::Payload for TableOk<'a> {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [10, self.string_result.len()]
                .iter()
                .sum()
        }
    }
    pub struct Content;
    impl Content {
        pub fn new() -> Self {
            Content
        }
    }
    impl ::Payload for Content {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            40
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct ContentOk {
        content_checksum: u32,
    }
    impl ContentOk {
        pub fn new(content_checksum: u32) -> Self {
            ContentOk { content_checksum: content_checksum }
        }
        pub fn content_checksum(&self) -> u32 {
            self.content_checksum
        }
    }
    impl ::Payload for ContentOk {
        fn class_id(&self) -> u16 {
            120
        }
        fn method_id(&self) -> u16 {
            41
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            4
        }
    }
}
pub mod tunnel {
    pub struct Properties<'a> {
        headers: Option<::std::borrow::Cow<'a, ::field::Table<'a>>>,
        proxy_name: Option<::std::borrow::Cow<'a, str>>,
        data_name: Option<::std::borrow::Cow<'a, str>>,
        durable: Option<u8>,
        broadcast: Option<u8>,
    }

    impl<'a> Properties<'a> {
        pub fn headers(&self) -> Option<&::field::Table<'a>> {
            self.headers.as_ref().map(|v| &**v)
        }
        pub fn proxy_name(&self) -> Option<&str> {
            self.proxy_name.as_ref().map(|v| &**v)
        }
        pub fn data_name(&self) -> Option<&str> {
            self.data_name.as_ref().map(|v| &**v)
        }
        pub fn durable(&self) -> Option<u8> {
            self.durable
        }
        pub fn broadcast(&self) -> Option<u8> {
            self.broadcast
        }
    }
    pub struct Request<'a> {
        meta_data: ::std::borrow::Cow<'a, ::field::Table<'a>>,
    }
    impl<'a> Request<'a> {
        pub fn new<M>(meta_data: M) -> Self
            where M: Into<::std::borrow::Cow<'a, ::field::Table<'a>>>
        {
            Request { meta_data: meta_data.into() }
        }
        pub fn meta_data(&self) -> &::field::Table<'a> {
            &*self.meta_data
        }
    }
    impl<'a> ::Payload for Request<'a> {
        fn class_id(&self) -> u16 {
            110
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            [0, self.meta_data.amqp_size()]
                .iter()
                .sum()
        }
    }
}
pub mod tx {
    pub struct Properties;
    impl Properties {}
    pub struct Select;
    impl Select {
        pub fn new() -> Self {
            Select
        }
    }
    impl ::Payload for Select {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            10
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct SelectOk;
    impl SelectOk {
        pub fn new() -> Self {
            SelectOk
        }
    }
    impl ::Payload for SelectOk {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            11
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Commit;
    impl Commit {
        pub fn new() -> Self {
            Commit
        }
    }
    impl ::Payload for Commit {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            20
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct CommitOk;
    impl CommitOk {
        pub fn new() -> Self {
            CommitOk
        }
    }
    impl ::Payload for CommitOk {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            21
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct Rollback;
    impl Rollback {
        pub fn new() -> Self {
            Rollback
        }
    }
    impl ::Payload for Rollback {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            30
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
    pub struct RollbackOk;
    impl RollbackOk {
        pub fn new() -> Self {
            RollbackOk
        }
    }
    impl ::Payload for RollbackOk {
        fn class_id(&self) -> u16 {
            90
        }
        fn method_id(&self) -> u16 {
            31
        }
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        }
        fn len(&self) -> usize {
            0
        }
    }
}

#[allow(non_camel_case_types)]
pub struct Qpid8_0;
impl ::Spec for Qpid8_0 {}
