// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-build-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
#![allow(too_many_arguments)]

// Class Constants
pub const CLASS_ACCESS: u16 = 30;
pub const CLASS_BASIC: u16 = 60;
pub const CLASS_CHANNEL: u16 = 20;
pub const CLASS_CONNECTION: u16 = 10;
pub const CLASS_DTX: u16 = 100;
pub const CLASS_EXCHANGE: u16 = 40;
pub const CLASS_FILE: u16 = 70;
pub const CLASS_QUEUE: u16 = 50;
pub const CLASS_STREAM: u16 = 80;
pub const CLASS_TEST: u16 = 120;
pub const CLASS_TUNNEL: u16 = 110;
pub const CLASS_TX: u16 = 90;

// Class Methods
pub const METHOD_ACCESS_REQUEST: u16 = 10;
pub const METHOD_ACCESS_REQUEST_OK: u16 = 11;

pub const METHOD_BASIC_QOS: u16 = 10;
pub const METHOD_BASIC_QOS_OK: u16 = 11;
pub const METHOD_BASIC_CONSUME: u16 = 20;
pub const METHOD_BASIC_CONSUME_OK: u16 = 21;
pub const METHOD_BASIC_CANCEL: u16 = 30;
pub const METHOD_BASIC_CANCEL_OK: u16 = 31;
pub const METHOD_BASIC_PUBLISH: u16 = 40;
pub const METHOD_BASIC_RETURN: u16 = 50;
pub const METHOD_BASIC_DELIVER: u16 = 60;
pub const METHOD_BASIC_GET: u16 = 70;
pub const METHOD_BASIC_GET_OK: u16 = 71;
pub const METHOD_BASIC_GET_EMPTY: u16 = 72;
pub const METHOD_BASIC_ACK: u16 = 80;
pub const METHOD_BASIC_REJECT: u16 = 90;
pub const METHOD_BASIC_RECOVER: u16 = 100;
pub const METHOD_BASIC_RECOVER_OK: u16 = 101;

pub const METHOD_CHANNEL_OPEN: u16 = 10;
pub const METHOD_CHANNEL_OPEN_OK: u16 = 11;
pub const METHOD_CHANNEL_FLOW: u16 = 20;
pub const METHOD_CHANNEL_FLOW_OK: u16 = 21;
pub const METHOD_CHANNEL_ALERT: u16 = 30;
pub const METHOD_CHANNEL_CLOSE: u16 = 40;
pub const METHOD_CHANNEL_CLOSE_OK: u16 = 41;

pub const METHOD_CONNECTION_START: u16 = 10;
pub const METHOD_CONNECTION_START_OK: u16 = 11;
pub const METHOD_CONNECTION_SECURE: u16 = 20;
pub const METHOD_CONNECTION_SECURE_OK: u16 = 21;
pub const METHOD_CONNECTION_TUNE: u16 = 30;
pub const METHOD_CONNECTION_TUNE_OK: u16 = 31;
pub const METHOD_CONNECTION_OPEN: u16 = 40;
pub const METHOD_CONNECTION_OPEN_OK: u16 = 41;
pub const METHOD_CONNECTION_REDIRECT: u16 = 50;
pub const METHOD_CONNECTION_CLOSE: u16 = 60;
pub const METHOD_CONNECTION_CLOSE_OK: u16 = 61;

pub const METHOD_DTX_SELECT: u16 = 10;
pub const METHOD_DTX_SELECT_OK: u16 = 11;
pub const METHOD_DTX_START: u16 = 20;
pub const METHOD_DTX_START_OK: u16 = 21;

pub const METHOD_EXCHANGE_DECLARE: u16 = 10;
pub const METHOD_EXCHANGE_DECLARE_OK: u16 = 11;
pub const METHOD_EXCHANGE_DELETE: u16 = 20;
pub const METHOD_EXCHANGE_DELETE_OK: u16 = 21;
pub const METHOD_EXCHANGE_BOUND: u16 = 22;
pub const METHOD_EXCHANGE_BOUND_OK: u16 = 23;

pub const METHOD_FILE_QOS: u16 = 10;
pub const METHOD_FILE_QOS_OK: u16 = 11;
pub const METHOD_FILE_CONSUME: u16 = 20;
pub const METHOD_FILE_CONSUME_OK: u16 = 21;
pub const METHOD_FILE_CANCEL: u16 = 30;
pub const METHOD_FILE_CANCEL_OK: u16 = 31;
pub const METHOD_FILE_OPEN: u16 = 40;
pub const METHOD_FILE_OPEN_OK: u16 = 41;
pub const METHOD_FILE_STAGE: u16 = 50;
pub const METHOD_FILE_PUBLISH: u16 = 60;
pub const METHOD_FILE_RETURN: u16 = 70;
pub const METHOD_FILE_DELIVER: u16 = 80;
pub const METHOD_FILE_ACK: u16 = 90;
pub const METHOD_FILE_REJECT: u16 = 100;

pub const METHOD_QUEUE_DECLARE: u16 = 10;
pub const METHOD_QUEUE_DECLARE_OK: u16 = 11;
pub const METHOD_QUEUE_BIND: u16 = 20;
pub const METHOD_QUEUE_BIND_OK: u16 = 21;
pub const METHOD_QUEUE_PURGE: u16 = 30;
pub const METHOD_QUEUE_PURGE_OK: u16 = 31;
pub const METHOD_QUEUE_DELETE: u16 = 40;
pub const METHOD_QUEUE_DELETE_OK: u16 = 41;

pub const METHOD_STREAM_QOS: u16 = 10;
pub const METHOD_STREAM_QOS_OK: u16 = 11;
pub const METHOD_STREAM_CONSUME: u16 = 20;
pub const METHOD_STREAM_CONSUME_OK: u16 = 21;
pub const METHOD_STREAM_CANCEL: u16 = 30;
pub const METHOD_STREAM_CANCEL_OK: u16 = 31;
pub const METHOD_STREAM_PUBLISH: u16 = 40;
pub const METHOD_STREAM_RETURN: u16 = 50;
pub const METHOD_STREAM_DELIVER: u16 = 60;

pub const METHOD_TEST_INTEGER: u16 = 10;
pub const METHOD_TEST_INTEGER_OK: u16 = 11;
pub const METHOD_TEST_STRING: u16 = 20;
pub const METHOD_TEST_STRING_OK: u16 = 21;
pub const METHOD_TEST_TABLE: u16 = 30;
pub const METHOD_TEST_TABLE_OK: u16 = 31;
pub const METHOD_TEST_CONTENT: u16 = 40;
pub const METHOD_TEST_CONTENT_OK: u16 = 41;

pub const METHOD_TUNNEL_REQUEST: u16 = 10;

pub const METHOD_TX_SELECT: u16 = 10;
pub const METHOD_TX_SELECT_OK: u16 = 11;
pub const METHOD_TX_COMMIT: u16 = 20;
pub const METHOD_TX_COMMIT_OK: u16 = 21;
pub const METHOD_TX_ROLLBACK: u16 = 30;
pub const METHOD_TX_ROLLBACK_OK: u16 = 31;

pub enum Header<'a> {
    Access,
    Basic(basic::Header<'a>),
    Channel,
    Connection,
    Dtx,
    Exchange,
    File(file::Header<'a>),
    Queue,
    Stream(stream::Header<'a>),
    Test,
    Tunnel(tunnel::Header<'a>),
    Tx,
} // enum Header

pub enum Frame<'a> {
    Body(&'a [u8]),
    Header(Header<'a>),
    Heartbeat,
    Method(Method<'a>),
    OobBody(&'a [u8]),
    OobHeader(Header<'a>),
    OobMethod(Method<'a>),
    Trace,
} // enum Frame

// Class Modules
pub mod access {
    pub struct Header;

    pub struct Request<'a> {
        realm: ::std::borrow::Cow<'a, str>,
        exclusive: bool,
        passive: bool,
        active: bool,
        write: bool,
        read: bool,
    } // struct Request<'a>

    impl<'a> Request<'a> {
        pub fn new<R>(realm: R,
                      exclusive: bool,
                      passive: bool,
                      active: bool,
                      write: bool,
                      read: bool)
                      -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Request {
                realm: realm.into(),
                exclusive: exclusive,
                passive: passive,
                active: active,
                write: write,
                read: read,
            } // Request
        } // fn new()
        impl_properties! {
(realm, realm_mut, set_realm) -> Cow<str>,
(exclusive, set_exclusive) -> bool,
(passive, set_passive) -> bool,
(active, set_active) -> bool,
(write, set_write) -> bool,
(read, set_read) -> bool,
} // impl_properties
    } // impl<'a> Request<'a>

    impl<'a> ::Payload for Request<'a> {
        fn class_id(&self) -> u16 {
            30
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.realm.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Request<'a>

    pub struct RequestOk {
        ticket: u16,
    } // struct RequestOk

    impl RequestOk {
        pub fn new(ticket: u16) -> Self {
            RequestOk { ticket: ticket } // RequestOk
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
} // impl_properties
    } // impl RequestOk

    impl ::Payload for RequestOk {
        fn class_id(&self) -> u16 {
            30
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            2
        } // fn len()
    } // impl ::Payload for RequestOk

    pub enum Method<'a> {
        Request(Request<'a>),
        RequestOk(RequestOk),
    } // enum Method

} // mod access

pub mod basic {
    pub struct Header<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::field::TableEntries<'a>>,
        delivery_mode: Option<u8>,
        priority: Option<u8>,
        correlation_id: Option<::std::borrow::Cow<'a, str>>,
        reply_to: Option<::std::borrow::Cow<'a, str>>,
        expiration: Option<::std::borrow::Cow<'a, str>>,
        message_id: Option<::std::borrow::Cow<'a, str>>,
        timestamp: Option<u64>,
        ty: Option<::std::borrow::Cow<'a, str>>,
        user_id: Option<::std::borrow::Cow<'a, str>>,
        app_id: Option<::std::borrow::Cow<'a, str>>,
        cluster_id: Option<::std::borrow::Cow<'a, str>>,
    } // struct Header

    impl<'a> Header<'a> {
        impl_properties! {
(content_type, content_type_mut, set_content_type, take_content_type) -> Option< Cow<str> >,
(content_encoding, content_encoding_mut, set_content_encoding, take_content_encoding) -> Option< Cow<str> >,
(headers, headers_mut, set_headers, take_headers) -> Option< &::field::TableEntries<'a> >,
(delivery_mode, delivery_mode_mut, set_delivery_mode, take_delivery_mode) -> Option< u8 >,
(priority, priority_mut, set_priority, take_priority) -> Option< u8 >,
(correlation_id, correlation_id_mut, set_correlation_id, take_correlation_id) -> Option< Cow<str> >,
(reply_to, reply_to_mut, set_reply_to, take_reply_to) -> Option< Cow<str> >,
(expiration, expiration_mut, set_expiration, take_expiration) -> Option< Cow<str> >,
(message_id, message_id_mut, set_message_id, take_message_id) -> Option< Cow<str> >,
(timestamp, timestamp_mut, set_timestamp, take_timestamp) -> Option< u64 >,
(ty, ty_mut, set_ty, take_ty) -> Option< Cow<str> >,
(user_id, user_id_mut, set_user_id, take_user_id) -> Option< Cow<str> >,
(app_id, app_id_mut, set_app_id, take_app_id) -> Option< Cow<str> >,
(cluster_id, cluster_id_mut, set_cluster_id, take_cluster_id) -> Option< Cow<str> >,
} // impl_properties
    } // impl Headers

    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        global: bool,
    } // struct Qos

    impl Qos {
        pub fn new(prefetch_size: u32, prefetch_count: u16, global: bool) -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                global: global,
            } // Qos
        } // fn new()
        impl_properties! {
(prefetch_size, set_prefetch_size) -> u32,
(prefetch_count, set_prefetch_count) -> u16,
(global, set_global) -> bool,
} // impl_properties
    } // impl Qos

    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            7
        } // fn len()
    } // impl ::Payload for Qos

    pub struct QosOk;

    impl QosOk {
        pub fn new() -> Self {
            QosOk
        } // fn new()
    } // impl QosOk

    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for QosOk

    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        no_ack: bool,
        exclusive: bool,
        nowait: bool,
        arguments: ::field::TableEntries<'a>,
    } // struct Consume<'a>

    impl<'a> Consume<'a> {
        pub fn new<Q, C, A>(ticket: u16,
                            queue: Q,
                            consumer_tag: C,
                            no_local: bool,
                            no_ack: bool,
                            exclusive: bool,
                            nowait: bool,
                            arguments: A)
                            -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::field::TableEntries<'a>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                no_ack: no_ack,
                exclusive: exclusive,
                nowait: nowait,
                arguments: arguments.into(),
            } // Consume
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(no_local, set_no_local) -> bool,
(no_ack, set_no_ack) -> bool,
(exclusive, set_exclusive) -> bool,
(nowait, set_nowait) -> bool,
(arguments, arguments_mut, set_arguments) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Consume<'a>

    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Consume<'a>

    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct ConsumeOk<'a>

    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() } // ConsumeOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> ConsumeOk<'a>

    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for ConsumeOk<'a>

    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    } // struct Cancel<'a>

    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            } // Cancel
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Cancel<'a>

    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Cancel<'a>

    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct CancelOk<'a>

    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() } // CancelOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> CancelOk<'a>

    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for CancelOk<'a>

    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
    } // struct Publish<'a>

    impl<'a> Publish<'a> {
        pub fn new<E, R>(ticket: u16,
                         exchange: E,
                         routing_key: R,
                         mandatory: bool,
                         immediate: bool)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
            } // Publish
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(mandatory, set_mandatory) -> bool,
(immediate, set_immediate) -> bool,
} // impl_properties
    } // impl<'a> Publish<'a>

    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Publish<'a>

    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    } // struct Return<'a>

    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            } // Return
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
    } // impl<'a> Return<'a>

    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            50
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Return<'a>

    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    } // struct Deliver<'a>

    impl<'a> Deliver<'a> {
        pub fn new<C, E, R>(consumer_tag: C,
                            delivery_tag: u64,
                            redelivered: bool,
                            exchange: E,
                            routing_key: R)
                            -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            } // Deliver
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(delivery_tag, set_delivery_tag) -> u64,
(redelivered, set_redelivered) -> bool,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
    } // impl<'a> Deliver<'a>

    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            60
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [12, self.consumer_tag.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Deliver<'a>

    pub struct Get<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        no_ack: bool,
    } // struct Get<'a>

    impl<'a> Get<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, no_ack: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Get {
                ticket: ticket,
                queue: queue.into(),
                no_ack: no_ack,
            } // Get
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(no_ack, set_no_ack) -> bool,
} // impl_properties
    } // impl<'a> Get<'a>

    impl<'a> ::Payload for Get<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            70
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Get<'a>

    pub struct GetOk<'a> {
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        message_count: u32,
    } // struct GetOk<'a>

    impl<'a> GetOk<'a> {
        pub fn new<E, R>(delivery_tag: u64,
                         redelivered: bool,
                         exchange: E,
                         routing_key: R,
                         message_count: u32)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            GetOk {
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                message_count: message_count,
            } // GetOk
        } // fn new()
        impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(redelivered, set_redelivered) -> bool,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(message_count, set_message_count) -> u32,
} // impl_properties
    } // impl<'a> GetOk<'a>

    impl<'a> ::Payload for GetOk<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            71
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [15, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for GetOk<'a>

    pub struct GetEmpty<'a> {
        cluster_id: ::std::borrow::Cow<'a, str>,
    } // struct GetEmpty<'a>

    impl<'a> GetEmpty<'a> {
        pub fn new<C>(cluster_id: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            GetEmpty { cluster_id: cluster_id.into() } // GetEmpty
        } // fn new()
        impl_properties! {
(cluster_id, cluster_id_mut, set_cluster_id) -> Cow<str>,
} // impl_properties
    } // impl<'a> GetEmpty<'a>

    impl<'a> ::Payload for GetEmpty<'a> {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            72
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.cluster_id.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for GetEmpty<'a>

    pub struct Ack {
        delivery_tag: u64,
        multiple: bool,
    } // struct Ack

    impl Ack {
        pub fn new(delivery_tag: u64, multiple: bool) -> Self {
            Ack {
                delivery_tag: delivery_tag,
                multiple: multiple,
            } // Ack
        } // fn new()
        impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(multiple, set_multiple) -> bool,
} // impl_properties
    } // impl Ack

    impl ::Payload for Ack {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            80
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            9
        } // fn len()
    } // impl ::Payload for Ack

    pub struct Reject {
        delivery_tag: u64,
        requeue: bool,
    } // struct Reject

    impl Reject {
        pub fn new(delivery_tag: u64, requeue: bool) -> Self {
            Reject {
                delivery_tag: delivery_tag,
                requeue: requeue,
            } // Reject
        } // fn new()
        impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(requeue, set_requeue) -> bool,
} // impl_properties
    } // impl Reject

    impl ::Payload for Reject {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            90
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            9
        } // fn len()
    } // impl ::Payload for Reject

    pub struct Recover {
        requeue: bool,
    } // struct Recover

    impl Recover {
        pub fn new(requeue: bool) -> Self {
            Recover { requeue: requeue } // Recover
        } // fn new()
        impl_properties! {
(requeue, set_requeue) -> bool,
} // impl_properties
    } // impl Recover

    impl ::Payload for Recover {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            100
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            1
        } // fn len()
    } // impl ::Payload for Recover

    pub struct RecoverOk;

    impl RecoverOk {
        pub fn new() -> Self {
            RecoverOk
        } // fn new()
    } // impl RecoverOk

    impl ::Payload for RecoverOk {
        fn class_id(&self) -> u16 {
            60
        } // fn class_id()
        fn method_id(&self) -> u16 {
            101
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for RecoverOk

    pub enum Method<'a> {
        Qos(Qos),
        QosOk(QosOk),
        Consume(Consume<'a>),
        ConsumeOk(ConsumeOk<'a>),
        Cancel(Cancel<'a>),
        CancelOk(CancelOk<'a>),
        Publish(Publish<'a>),
        Return(Return<'a>),
        Deliver(Deliver<'a>),
        Get(Get<'a>),
        GetOk(GetOk<'a>),
        GetEmpty(GetEmpty<'a>),
        Ack(Ack),
        Reject(Reject),
        Recover(Recover),
        RecoverOk(RecoverOk),
    } // enum Method

} // mod basic

pub mod channel {
    pub struct Header;

    pub struct Open<'a> {
        out_of_band: ::std::borrow::Cow<'a, str>,
    } // struct Open<'a>

    impl<'a> Open<'a> {
        pub fn new<O>(out_of_band: O) -> Self
            where O: Into<::std::borrow::Cow<'a, str>>
        {
            Open { out_of_band: out_of_band.into() } // Open
        } // fn new()
        impl_properties! {
(out_of_band, out_of_band_mut, set_out_of_band) -> Cow<str>,
} // impl_properties
    } // impl<'a> Open<'a>

    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.out_of_band.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Open<'a>

    pub struct OpenOk;

    impl OpenOk {
        pub fn new() -> Self {
            OpenOk
        } // fn new()
    } // impl OpenOk

    impl ::Payload for OpenOk {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for OpenOk

    pub struct Flow {
        active: bool,
    } // struct Flow

    impl Flow {
        pub fn new(active: bool) -> Self {
            Flow { active: active } // Flow
        } // fn new()
        impl_properties! {
(active, set_active) -> bool,
} // impl_properties
    } // impl Flow

    impl ::Payload for Flow {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            1
        } // fn len()
    } // impl ::Payload for Flow

    pub struct FlowOk {
        active: bool,
    } // struct FlowOk

    impl FlowOk {
        pub fn new(active: bool) -> Self {
            FlowOk { active: active } // FlowOk
        } // fn new()
        impl_properties! {
(active, set_active) -> bool,
} // impl_properties
    } // impl FlowOk

    impl ::Payload for FlowOk {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            1
        } // fn len()
    } // impl ::Payload for FlowOk

    pub struct Alert<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        details: ::field::TableEntries<'a>,
    } // struct Alert<'a>

    impl<'a> Alert<'a> {
        pub fn new<R, D>(reply_code: u16, reply_text: R, details: D) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  D: Into<::field::TableEntries<'a>>
        {
            Alert {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                details: details.into(),
            } // Alert
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(details, details_mut, set_details) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Alert<'a>

    impl<'a> ::Payload for Alert<'a> {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [3, self.reply_text.len(), self.details.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Alert<'a>

    pub struct Close<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        class_id: u16,
        method_id: u16,
    } // struct Close<'a>

    impl<'a> Close<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R, class_id: u16, method_id: u16) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Close {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                class_id: class_id,
                method_id: method_id,
            } // Close
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(class_id, set_class_id) -> u16,
(method_id, set_method_id) -> u16,
} // impl_properties
    } // impl<'a> Close<'a>

    impl<'a> ::Payload for Close<'a> {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [7, self.reply_text.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Close<'a>

    pub struct CloseOk;

    impl CloseOk {
        pub fn new() -> Self {
            CloseOk
        } // fn new()
    } // impl CloseOk

    impl ::Payload for CloseOk {
        fn class_id(&self) -> u16 {
            20
        } // fn class_id()
        fn method_id(&self) -> u16 {
            41
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for CloseOk

    pub enum Method<'a> {
        Open(Open<'a>),
        OpenOk(OpenOk),
        Flow(Flow),
        FlowOk(FlowOk),
        Alert(Alert<'a>),
        Close(Close<'a>),
        CloseOk(CloseOk),
    } // enum Method

} // mod channel

pub mod connection {
    pub struct Header;

    pub struct Start<'a> {
        version_major: u8,
        version_minor: u8,
        server_properties: ::field::TableEntries<'a>,
        mechanisms: ::std::borrow::Cow<'a, [u8]>,
        locales: ::std::borrow::Cow<'a, [u8]>,
    } // struct Start<'a>

    impl<'a> Start<'a> {
        pub fn new<S, M, L>(version_major: u8,
                            version_minor: u8,
                            server_properties: S,
                            mechanisms: M,
                            locales: L)
                            -> Self
            where S: Into<::field::TableEntries<'a>>,
                  M: Into<::std::borrow::Cow<'a, [u8]>>,
                  L: Into<::std::borrow::Cow<'a, [u8]>>
        {
            Start {
                version_major: version_major,
                version_minor: version_minor,
                server_properties: server_properties.into(),
                mechanisms: mechanisms.into(),
                locales: locales.into(),
            } // Start
        } // fn new()
        impl_properties! {
(version_major, set_version_major) -> u8,
(version_minor, set_version_minor) -> u8,
(server_properties, server_properties_mut, set_server_properties) -> &::field::TableEntries<'a>,
(mechanisms, mechanisms_mut, set_mechanisms) -> Cow<[u8]>,
(locales, locales_mut, set_locales) -> Cow<[u8]>,
} // impl_properties
    } // impl<'a> Start<'a>

    impl<'a> ::Payload for Start<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [6, self.server_properties.amqp_size(), self.mechanisms.len(), self.locales.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Start<'a>

    pub struct StartOk<'a> {
        client_properties: ::field::TableEntries<'a>,
        mechanism: ::std::borrow::Cow<'a, str>,
        response: ::std::borrow::Cow<'a, [u8]>,
        locale: ::std::borrow::Cow<'a, str>,
    } // struct StartOk<'a>

    impl<'a> StartOk<'a> {
        pub fn new<C, M, R, L>(client_properties: C, mechanism: M, response: R, locale: L) -> Self
            where C: Into<::field::TableEntries<'a>>,
                  M: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, [u8]>>,
                  L: Into<::std::borrow::Cow<'a, str>>
        {
            StartOk {
                client_properties: client_properties.into(),
                mechanism: mechanism.into(),
                response: response.into(),
                locale: locale.into(),
            } // StartOk
        } // fn new()
        impl_properties! {
(client_properties, client_properties_mut, set_client_properties) -> &::field::TableEntries<'a>,
(mechanism, mechanism_mut, set_mechanism) -> Cow<str>,
(response, response_mut, set_response) -> Cow<[u8]>,
(locale, locale_mut, set_locale) -> Cow<str>,
} // impl_properties
    } // impl<'a> StartOk<'a>

    impl<'a> ::Payload for StartOk<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4,
             self.client_properties.amqp_size(),
             self.mechanism.len(),
             self.response.len(),
             self.locale.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for StartOk<'a>

    pub struct Secure<'a> {
        challenge: ::std::borrow::Cow<'a, [u8]>,
    } // struct Secure<'a>

    impl<'a> Secure<'a> {
        pub fn new<C>(challenge: C) -> Self
            where C: Into<::std::borrow::Cow<'a, [u8]>>
        {
            Secure { challenge: challenge.into() } // Secure
        } // fn new()
        impl_properties! {
(challenge, challenge_mut, set_challenge) -> Cow<[u8]>,
} // impl_properties
    } // impl<'a> Secure<'a>

    impl<'a> ::Payload for Secure<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.challenge.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Secure<'a>

    pub struct SecureOk<'a> {
        response: ::std::borrow::Cow<'a, [u8]>,
    } // struct SecureOk<'a>

    impl<'a> SecureOk<'a> {
        pub fn new<R>(response: R) -> Self
            where R: Into<::std::borrow::Cow<'a, [u8]>>
        {
            SecureOk { response: response.into() } // SecureOk
        } // fn new()
        impl_properties! {
(response, response_mut, set_response) -> Cow<[u8]>,
} // impl_properties
    } // impl<'a> SecureOk<'a>

    impl<'a> ::Payload for SecureOk<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.response.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for SecureOk<'a>

    pub struct Tune {
        channel_max: u16,
        frame_max: u32,
        heartbeat: u16,
    } // struct Tune

    impl Tune {
        pub fn new(channel_max: u16, frame_max: u32, heartbeat: u16) -> Self {
            Tune {
                channel_max: channel_max,
                frame_max: frame_max,
                heartbeat: heartbeat,
            } // Tune
        } // fn new()
        impl_properties! {
(channel_max, set_channel_max) -> u16,
(frame_max, set_frame_max) -> u32,
(heartbeat, set_heartbeat) -> u16,
} // impl_properties
    } // impl Tune

    impl ::Payload for Tune {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            8
        } // fn len()
    } // impl ::Payload for Tune

    pub struct TuneOk {
        channel_max: u16,
        frame_max: u32,
        heartbeat: u16,
    } // struct TuneOk

    impl TuneOk {
        pub fn new(channel_max: u16, frame_max: u32, heartbeat: u16) -> Self {
            TuneOk {
                channel_max: channel_max,
                frame_max: frame_max,
                heartbeat: heartbeat,
            } // TuneOk
        } // fn new()
        impl_properties! {
(channel_max, set_channel_max) -> u16,
(frame_max, set_frame_max) -> u32,
(heartbeat, set_heartbeat) -> u16,
} // impl_properties
    } // impl TuneOk

    impl ::Payload for TuneOk {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            8
        } // fn len()
    } // impl ::Payload for TuneOk

    pub struct Open<'a> {
        virtual_host: ::std::borrow::Cow<'a, str>,
        capabilities: ::std::borrow::Cow<'a, str>,
        insist: bool,
    } // struct Open<'a>

    impl<'a> Open<'a> {
        pub fn new<V, C>(virtual_host: V, capabilities: C, insist: bool) -> Self
            where V: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Open {
                virtual_host: virtual_host.into(),
                capabilities: capabilities.into(),
                insist: insist,
            } // Open
        } // fn new()
        impl_properties! {
(virtual_host, virtual_host_mut, set_virtual_host) -> Cow<str>,
(capabilities, capabilities_mut, set_capabilities) -> Cow<str>,
(insist, set_insist) -> bool,
} // impl_properties
    } // impl<'a> Open<'a>

    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [3, self.virtual_host.len(), self.capabilities.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Open<'a>

    pub struct OpenOk<'a> {
        known_hosts: ::std::borrow::Cow<'a, str>,
    } // struct OpenOk<'a>

    impl<'a> OpenOk<'a> {
        pub fn new<K>(known_hosts: K) -> Self
            where K: Into<::std::borrow::Cow<'a, str>>
        {
            OpenOk { known_hosts: known_hosts.into() } // OpenOk
        } // fn new()
        impl_properties! {
(known_hosts, known_hosts_mut, set_known_hosts) -> Cow<str>,
} // impl_properties
    } // impl<'a> OpenOk<'a>

    impl<'a> ::Payload for OpenOk<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            41
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.known_hosts.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for OpenOk<'a>

    pub struct Redirect<'a> {
        host: ::std::borrow::Cow<'a, str>,
        known_hosts: ::std::borrow::Cow<'a, str>,
    } // struct Redirect<'a>

    impl<'a> Redirect<'a> {
        pub fn new<H, K>(host: H, known_hosts: K) -> Self
            where H: Into<::std::borrow::Cow<'a, str>>,
                  K: Into<::std::borrow::Cow<'a, str>>
        {
            Redirect {
                host: host.into(),
                known_hosts: known_hosts.into(),
            } // Redirect
        } // fn new()
        impl_properties! {
(host, host_mut, set_host) -> Cow<str>,
(known_hosts, known_hosts_mut, set_known_hosts) -> Cow<str>,
} // impl_properties
    } // impl<'a> Redirect<'a>

    impl<'a> ::Payload for Redirect<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            50
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.host.len(), self.known_hosts.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Redirect<'a>

    pub struct Close<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        class_id: u16,
        method_id: u16,
    } // struct Close<'a>

    impl<'a> Close<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R, class_id: u16, method_id: u16) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            Close {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                class_id: class_id,
                method_id: method_id,
            } // Close
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(class_id, set_class_id) -> u16,
(method_id, set_method_id) -> u16,
} // impl_properties
    } // impl<'a> Close<'a>

    impl<'a> ::Payload for Close<'a> {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            60
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [7, self.reply_text.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Close<'a>

    pub struct CloseOk;

    impl CloseOk {
        pub fn new() -> Self {
            CloseOk
        } // fn new()
    } // impl CloseOk

    impl ::Payload for CloseOk {
        fn class_id(&self) -> u16 {
            10
        } // fn class_id()
        fn method_id(&self) -> u16 {
            61
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for CloseOk

    pub enum Method<'a> {
        Start(Start<'a>),
        StartOk(StartOk<'a>),
        Secure(Secure<'a>),
        SecureOk(SecureOk<'a>),
        Tune(Tune),
        TuneOk(TuneOk),
        Open(Open<'a>),
        OpenOk(OpenOk<'a>),
        Redirect(Redirect<'a>),
        Close(Close<'a>),
        CloseOk(CloseOk),
    } // enum Method

} // mod connection

pub mod dtx {
    pub struct Header;

    pub struct Select;

    impl Select {
        pub fn new() -> Self {
            Select
        } // fn new()
    } // impl Select

    impl ::Payload for Select {
        fn class_id(&self) -> u16 {
            100
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Select

    pub struct SelectOk;

    impl SelectOk {
        pub fn new() -> Self {
            SelectOk
        } // fn new()
    } // impl SelectOk

    impl ::Payload for SelectOk {
        fn class_id(&self) -> u16 {
            100
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for SelectOk

    pub struct Start<'a> {
        dtx_identifier: ::std::borrow::Cow<'a, str>,
    } // struct Start<'a>

    impl<'a> Start<'a> {
        pub fn new<D>(dtx_identifier: D) -> Self
            where D: Into<::std::borrow::Cow<'a, str>>
        {
            Start { dtx_identifier: dtx_identifier.into() } // Start
        } // fn new()
        impl_properties! {
(dtx_identifier, dtx_identifier_mut, set_dtx_identifier) -> Cow<str>,
} // impl_properties
    } // impl<'a> Start<'a>

    impl<'a> ::Payload for Start<'a> {
        fn class_id(&self) -> u16 {
            100
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.dtx_identifier.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Start<'a>

    pub struct StartOk;

    impl StartOk {
        pub fn new() -> Self {
            StartOk
        } // fn new()
    } // impl StartOk

    impl ::Payload for StartOk {
        fn class_id(&self) -> u16 {
            100
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for StartOk

    pub enum Method<'a> {
        Select(Select),
        SelectOk(SelectOk),
        Start(Start<'a>),
        StartOk(StartOk),
    } // enum Method

} // mod dtx

pub mod exchange {
    pub struct Header;

    pub struct Declare<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        ty: ::std::borrow::Cow<'a, str>,
        passive: bool,
        durable: bool,
        auto_delete: bool,
        internal: bool,
        nowait: bool,
        arguments: ::field::TableEntries<'a>,
    } // struct Declare<'a>

    impl<'a> Declare<'a> {
        pub fn new<E, T, A>(ticket: u16,
                            exchange: E,
                            ty: T,
                            passive: bool,
                            durable: bool,
                            auto_delete: bool,
                            internal: bool,
                            nowait: bool,
                            arguments: A)
                            -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  T: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::field::TableEntries<'a>>
        {
            Declare {
                ticket: ticket,
                exchange: exchange.into(),
                ty: ty.into(),
                passive: passive,
                durable: durable,
                auto_delete: auto_delete,
                internal: internal,
                nowait: nowait,
                arguments: arguments.into(),
            } // Declare
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(ty, ty_mut, set_ty) -> Cow<str>,
(passive, set_passive) -> bool,
(durable, set_durable) -> bool,
(auto_delete, set_auto_delete) -> bool,
(internal, set_internal) -> bool,
(nowait, set_nowait) -> bool,
(arguments, arguments_mut, set_arguments) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Declare<'a>

    impl<'a> ::Payload for Declare<'a> {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.ty.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Declare<'a>

    pub struct DeclareOk;

    impl DeclareOk {
        pub fn new() -> Self {
            DeclareOk
        } // fn new()
    } // impl DeclareOk

    impl ::Payload for DeclareOk {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for DeclareOk

    pub struct Delete<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        if_unused: bool,
        nowait: bool,
    } // struct Delete<'a>

    impl<'a> Delete<'a> {
        pub fn new<E>(ticket: u16, exchange: E, if_unused: bool, nowait: bool) -> Self
            where E: Into<::std::borrow::Cow<'a, str>>
        {
            Delete {
                ticket: ticket,
                exchange: exchange.into(),
                if_unused: if_unused,
                nowait: nowait,
            } // Delete
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(if_unused, set_if_unused) -> bool,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Delete<'a>

    impl<'a> ::Payload for Delete<'a> {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.exchange.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Delete<'a>

    pub struct DeleteOk;

    impl DeleteOk {
        pub fn new() -> Self {
            DeleteOk
        } // fn new()
    } // impl DeleteOk

    impl ::Payload for DeleteOk {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for DeleteOk

    pub struct Bound<'a> {
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        queue: ::std::borrow::Cow<'a, str>,
    } // struct Bound<'a>

    impl<'a> Bound<'a> {
        pub fn new<E, R, Q>(exchange: E, routing_key: R, queue: Q) -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  Q: Into<::std::borrow::Cow<'a, str>>
        {
            Bound {
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                queue: queue.into(),
            } // Bound
        } // fn new()
        impl_properties! {
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(queue, queue_mut, set_queue) -> Cow<str>,
} // impl_properties
    } // impl<'a> Bound<'a>

    impl<'a> ::Payload for Bound<'a> {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            22
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [3, self.exchange.len(), self.routing_key.len(), self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Bound<'a>

    pub struct BoundOk<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
    } // struct BoundOk<'a>

    impl<'a> BoundOk<'a> {
        pub fn new<R>(reply_code: u16, reply_text: R) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>
        {
            BoundOk {
                reply_code: reply_code,
                reply_text: reply_text.into(),
            } // BoundOk
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
} // impl_properties
    } // impl<'a> BoundOk<'a>

    impl<'a> ::Payload for BoundOk<'a> {
        fn class_id(&self) -> u16 {
            40
        } // fn class_id()
        fn method_id(&self) -> u16 {
            23
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [3, self.reply_text.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for BoundOk<'a>

    pub enum Method<'a> {
        Declare(Declare<'a>),
        DeclareOk(DeclareOk),
        Delete(Delete<'a>),
        DeleteOk(DeleteOk),
        Bound(Bound<'a>),
        BoundOk(BoundOk<'a>),
    } // enum Method

} // mod exchange

pub mod file {
    pub struct Header<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::field::TableEntries<'a>>,
        priority: Option<u8>,
        reply_to: Option<::std::borrow::Cow<'a, str>>,
        message_id: Option<::std::borrow::Cow<'a, str>>,
        filename: Option<::std::borrow::Cow<'a, str>>,
        timestamp: Option<u64>,
        cluster_id: Option<::std::borrow::Cow<'a, str>>,
    } // struct Header

    impl<'a> Header<'a> {
        impl_properties! {
(content_type, content_type_mut, set_content_type, take_content_type) -> Option< Cow<str> >,
(content_encoding, content_encoding_mut, set_content_encoding, take_content_encoding) -> Option< Cow<str> >,
(headers, headers_mut, set_headers, take_headers) -> Option< &::field::TableEntries<'a> >,
(priority, priority_mut, set_priority, take_priority) -> Option< u8 >,
(reply_to, reply_to_mut, set_reply_to, take_reply_to) -> Option< Cow<str> >,
(message_id, message_id_mut, set_message_id, take_message_id) -> Option< Cow<str> >,
(filename, filename_mut, set_filename, take_filename) -> Option< Cow<str> >,
(timestamp, timestamp_mut, set_timestamp, take_timestamp) -> Option< u64 >,
(cluster_id, cluster_id_mut, set_cluster_id, take_cluster_id) -> Option< Cow<str> >,
} // impl_properties
    } // impl Headers

    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        global: bool,
    } // struct Qos

    impl Qos {
        pub fn new(prefetch_size: u32, prefetch_count: u16, global: bool) -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                global: global,
            } // Qos
        } // fn new()
        impl_properties! {
(prefetch_size, set_prefetch_size) -> u32,
(prefetch_count, set_prefetch_count) -> u16,
(global, set_global) -> bool,
} // impl_properties
    } // impl Qos

    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            7
        } // fn len()
    } // impl ::Payload for Qos

    pub struct QosOk;

    impl QosOk {
        pub fn new() -> Self {
            QosOk
        } // fn new()
    } // impl QosOk

    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for QosOk

    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        no_ack: bool,
        exclusive: bool,
        nowait: bool,
    } // struct Consume<'a>

    impl<'a> Consume<'a> {
        pub fn new<Q, C>(ticket: u16,
                         queue: Q,
                         consumer_tag: C,
                         no_local: bool,
                         no_ack: bool,
                         exclusive: bool,
                         nowait: bool)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                no_ack: no_ack,
                exclusive: exclusive,
                nowait: nowait,
            } // Consume
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(no_local, set_no_local) -> bool,
(no_ack, set_no_ack) -> bool,
(exclusive, set_exclusive) -> bool,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Consume<'a>

    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Consume<'a>

    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct ConsumeOk<'a>

    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() } // ConsumeOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> ConsumeOk<'a>

    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for ConsumeOk<'a>

    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    } // struct Cancel<'a>

    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            } // Cancel
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Cancel<'a>

    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Cancel<'a>

    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct CancelOk<'a>

    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() } // CancelOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> CancelOk<'a>

    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for CancelOk<'a>

    pub struct Open<'a> {
        identifier: ::std::borrow::Cow<'a, str>,
        content_size: u64,
    } // struct Open<'a>

    impl<'a> Open<'a> {
        pub fn new<I>(identifier: I, content_size: u64) -> Self
            where I: Into<::std::borrow::Cow<'a, str>>
        {
            Open {
                identifier: identifier.into(),
                content_size: content_size,
            } // Open
        } // fn new()
        impl_properties! {
(identifier, identifier_mut, set_identifier) -> Cow<str>,
(content_size, set_content_size) -> u64,
} // impl_properties
    } // impl<'a> Open<'a>

    impl<'a> ::Payload for Open<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [9, self.identifier.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Open<'a>

    pub struct OpenOk {
        staged_size: u64,
    } // struct OpenOk

    impl OpenOk {
        pub fn new(staged_size: u64) -> Self {
            OpenOk { staged_size: staged_size } // OpenOk
        } // fn new()
        impl_properties! {
(staged_size, set_staged_size) -> u64,
} // impl_properties
    } // impl OpenOk

    impl ::Payload for OpenOk {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            41
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            8
        } // fn len()
    } // impl ::Payload for OpenOk

    pub struct Stage;

    impl Stage {
        pub fn new() -> Self {
            Stage
        } // fn new()
    } // impl Stage

    impl ::Payload for Stage {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            50
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Stage

    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
        identifier: ::std::borrow::Cow<'a, str>,
    } // struct Publish<'a>

    impl<'a> Publish<'a> {
        pub fn new<E, R, I>(ticket: u16,
                            exchange: E,
                            routing_key: R,
                            mandatory: bool,
                            immediate: bool,
                            identifier: I)
                            -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  I: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
                identifier: identifier.into(),
            } // Publish
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(mandatory, set_mandatory) -> bool,
(immediate, set_immediate) -> bool,
(identifier, identifier_mut, set_identifier) -> Cow<str>,
} // impl_properties
    } // impl<'a> Publish<'a>

    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            60
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [6, self.exchange.len(), self.routing_key.len(), self.identifier.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Publish<'a>

    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    } // struct Return<'a>

    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            } // Return
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
    } // impl<'a> Return<'a>

    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            70
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Return<'a>

    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        redelivered: bool,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        identifier: ::std::borrow::Cow<'a, str>,
    } // struct Deliver<'a>

    impl<'a> Deliver<'a> {
        pub fn new<C, E, R, I>(consumer_tag: C,
                               delivery_tag: u64,
                               redelivered: bool,
                               exchange: E,
                               routing_key: R,
                               identifier: I)
                               -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  I: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                redelivered: redelivered,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                identifier: identifier.into(),
            } // Deliver
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(delivery_tag, set_delivery_tag) -> u64,
(redelivered, set_redelivered) -> bool,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(identifier, identifier_mut, set_identifier) -> Cow<str>,
} // impl_properties
    } // impl<'a> Deliver<'a>

    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            80
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [13,
             self.consumer_tag.len(),
             self.exchange.len(),
             self.routing_key.len(),
             self.identifier.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Deliver<'a>

    pub struct Ack {
        delivery_tag: u64,
        multiple: bool,
    } // struct Ack

    impl Ack {
        pub fn new(delivery_tag: u64, multiple: bool) -> Self {
            Ack {
                delivery_tag: delivery_tag,
                multiple: multiple,
            } // Ack
        } // fn new()
        impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(multiple, set_multiple) -> bool,
} // impl_properties
    } // impl Ack

    impl ::Payload for Ack {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            90
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            9
        } // fn len()
    } // impl ::Payload for Ack

    pub struct Reject {
        delivery_tag: u64,
        requeue: bool,
    } // struct Reject

    impl Reject {
        pub fn new(delivery_tag: u64, requeue: bool) -> Self {
            Reject {
                delivery_tag: delivery_tag,
                requeue: requeue,
            } // Reject
        } // fn new()
        impl_properties! {
(delivery_tag, set_delivery_tag) -> u64,
(requeue, set_requeue) -> bool,
} // impl_properties
    } // impl Reject

    impl ::Payload for Reject {
        fn class_id(&self) -> u16 {
            70
        } // fn class_id()
        fn method_id(&self) -> u16 {
            100
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            9
        } // fn len()
    } // impl ::Payload for Reject

    pub enum Method<'a> {
        Qos(Qos),
        QosOk(QosOk),
        Consume(Consume<'a>),
        ConsumeOk(ConsumeOk<'a>),
        Cancel(Cancel<'a>),
        CancelOk(CancelOk<'a>),
        Open(Open<'a>),
        OpenOk(OpenOk),
        Stage(Stage),
        Publish(Publish<'a>),
        Return(Return<'a>),
        Deliver(Deliver<'a>),
        Ack(Ack),
        Reject(Reject),
    } // enum Method

} // mod file

pub mod queue {
    pub struct Header;

    pub struct Declare<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        passive: bool,
        durable: bool,
        exclusive: bool,
        auto_delete: bool,
        nowait: bool,
        arguments: ::field::TableEntries<'a>,
    } // struct Declare<'a>

    impl<'a> Declare<'a> {
        pub fn new<Q, A>(ticket: u16,
                         queue: Q,
                         passive: bool,
                         durable: bool,
                         exclusive: bool,
                         auto_delete: bool,
                         nowait: bool,
                         arguments: A)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::field::TableEntries<'a>>
        {
            Declare {
                ticket: ticket,
                queue: queue.into(),
                passive: passive,
                durable: durable,
                exclusive: exclusive,
                auto_delete: auto_delete,
                nowait: nowait,
                arguments: arguments.into(),
            } // Declare
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(passive, set_passive) -> bool,
(durable, set_durable) -> bool,
(exclusive, set_exclusive) -> bool,
(auto_delete, set_auto_delete) -> bool,
(nowait, set_nowait) -> bool,
(arguments, arguments_mut, set_arguments) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Declare<'a>

    impl<'a> ::Payload for Declare<'a> {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.queue.len(), self.arguments.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Declare<'a>

    pub struct DeclareOk<'a> {
        queue: ::std::borrow::Cow<'a, str>,
        message_count: u32,
        consumer_count: u32,
    } // struct DeclareOk<'a>

    impl<'a> DeclareOk<'a> {
        pub fn new<Q>(queue: Q, message_count: u32, consumer_count: u32) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            DeclareOk {
                queue: queue.into(),
                message_count: message_count,
                consumer_count: consumer_count,
            } // DeclareOk
        } // fn new()
        impl_properties! {
(queue, queue_mut, set_queue) -> Cow<str>,
(message_count, set_message_count) -> u32,
(consumer_count, set_consumer_count) -> u32,
} // impl_properties
    } // impl<'a> DeclareOk<'a>

    impl<'a> ::Payload for DeclareOk<'a> {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [9, self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for DeclareOk<'a>

    pub struct Bind<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        nowait: bool,
        arguments: ::field::TableEntries<'a>,
    } // struct Bind<'a>

    impl<'a> Bind<'a> {
        pub fn new<Q, E, R, A>(ticket: u16,
                               queue: Q,
                               exchange: E,
                               routing_key: R,
                               nowait: bool,
                               arguments: A)
                               -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>,
                  A: Into<::field::TableEntries<'a>>
        {
            Bind {
                ticket: ticket,
                queue: queue.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                nowait: nowait,
                arguments: arguments.into(),
            } // Bind
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(nowait, set_nowait) -> bool,
(arguments, arguments_mut, set_arguments) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Bind<'a>

    impl<'a> ::Payload for Bind<'a> {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [6,
             self.queue.len(),
             self.exchange.len(),
             self.routing_key.len(),
             self.arguments.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Bind<'a>

    pub struct BindOk;

    impl BindOk {
        pub fn new() -> Self {
            BindOk
        } // fn new()
    } // impl BindOk

    impl ::Payload for BindOk {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for BindOk

    pub struct Purge<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    } // struct Purge<'a>

    impl<'a> Purge<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, nowait: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Purge {
                ticket: ticket,
                queue: queue.into(),
                nowait: nowait,
            } // Purge
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Purge<'a>

    impl<'a> ::Payload for Purge<'a> {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Purge<'a>

    pub struct PurgeOk {
        message_count: u32,
    } // struct PurgeOk

    impl PurgeOk {
        pub fn new(message_count: u32) -> Self {
            PurgeOk { message_count: message_count } // PurgeOk
        } // fn new()
        impl_properties! {
(message_count, set_message_count) -> u32,
} // impl_properties
    } // impl PurgeOk

    impl ::Payload for PurgeOk {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            4
        } // fn len()
    } // impl ::Payload for PurgeOk

    pub struct Delete<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        if_unused: bool,
        if_empty: bool,
        nowait: bool,
    } // struct Delete<'a>

    impl<'a> Delete<'a> {
        pub fn new<Q>(ticket: u16, queue: Q, if_unused: bool, if_empty: bool, nowait: bool) -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>
        {
            Delete {
                ticket: ticket,
                queue: queue.into(),
                if_unused: if_unused,
                if_empty: if_empty,
                nowait: nowait,
            } // Delete
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(if_unused, set_if_unused) -> bool,
(if_empty, set_if_empty) -> bool,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Delete<'a>

    impl<'a> ::Payload for Delete<'a> {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Delete<'a>

    pub struct DeleteOk {
        message_count: u32,
    } // struct DeleteOk

    impl DeleteOk {
        pub fn new(message_count: u32) -> Self {
            DeleteOk { message_count: message_count } // DeleteOk
        } // fn new()
        impl_properties! {
(message_count, set_message_count) -> u32,
} // impl_properties
    } // impl DeleteOk

    impl ::Payload for DeleteOk {
        fn class_id(&self) -> u16 {
            50
        } // fn class_id()
        fn method_id(&self) -> u16 {
            41
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            4
        } // fn len()
    } // impl ::Payload for DeleteOk

    pub enum Method<'a> {
        Declare(Declare<'a>),
        DeclareOk(DeclareOk<'a>),
        Bind(Bind<'a>),
        BindOk(BindOk),
        Purge(Purge<'a>),
        PurgeOk(PurgeOk),
        Delete(Delete<'a>),
        DeleteOk(DeleteOk),
    } // enum Method

} // mod queue

pub mod stream {
    pub struct Header<'a> {
        content_type: Option<::std::borrow::Cow<'a, str>>,
        content_encoding: Option<::std::borrow::Cow<'a, str>>,
        headers: Option<::field::TableEntries<'a>>,
        priority: Option<u8>,
        timestamp: Option<u64>,
    } // struct Header

    impl<'a> Header<'a> {
        impl_properties! {
(content_type, content_type_mut, set_content_type, take_content_type) -> Option< Cow<str> >,
(content_encoding, content_encoding_mut, set_content_encoding, take_content_encoding) -> Option< Cow<str> >,
(headers, headers_mut, set_headers, take_headers) -> Option< &::field::TableEntries<'a> >,
(priority, priority_mut, set_priority, take_priority) -> Option< u8 >,
(timestamp, timestamp_mut, set_timestamp, take_timestamp) -> Option< u64 >,
} // impl_properties
    } // impl Headers

    pub struct Qos {
        prefetch_size: u32,
        prefetch_count: u16,
        consume_rate: u32,
        global: bool,
    } // struct Qos

    impl Qos {
        pub fn new(prefetch_size: u32,
                   prefetch_count: u16,
                   consume_rate: u32,
                   global: bool)
                   -> Self {
            Qos {
                prefetch_size: prefetch_size,
                prefetch_count: prefetch_count,
                consume_rate: consume_rate,
                global: global,
            } // Qos
        } // fn new()
        impl_properties! {
(prefetch_size, set_prefetch_size) -> u32,
(prefetch_count, set_prefetch_count) -> u16,
(consume_rate, set_consume_rate) -> u32,
(global, set_global) -> bool,
} // impl_properties
    } // impl Qos

    impl ::Payload for Qos {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            11
        } // fn len()
    } // impl ::Payload for Qos

    pub struct QosOk;

    impl QosOk {
        pub fn new() -> Self {
            QosOk
        } // fn new()
    } // impl QosOk

    impl ::Payload for QosOk {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for QosOk

    pub struct Consume<'a> {
        ticket: u16,
        queue: ::std::borrow::Cow<'a, str>,
        consumer_tag: ::std::borrow::Cow<'a, str>,
        no_local: bool,
        exclusive: bool,
        nowait: bool,
    } // struct Consume<'a>

    impl<'a> Consume<'a> {
        pub fn new<Q, C>(ticket: u16,
                         queue: Q,
                         consumer_tag: C,
                         no_local: bool,
                         exclusive: bool,
                         nowait: bool)
                         -> Self
            where Q: Into<::std::borrow::Cow<'a, str>>,
                  C: Into<::std::borrow::Cow<'a, str>>
        {
            Consume {
                ticket: ticket,
                queue: queue.into(),
                consumer_tag: consumer_tag.into(),
                no_local: no_local,
                exclusive: exclusive,
                nowait: nowait,
            } // Consume
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(queue, queue_mut, set_queue) -> Cow<str>,
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(no_local, set_no_local) -> bool,
(exclusive, set_exclusive) -> bool,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Consume<'a>

    impl<'a> ::Payload for Consume<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.queue.len(), self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Consume<'a>

    pub struct ConsumeOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct ConsumeOk<'a>

    impl<'a> ConsumeOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            ConsumeOk { consumer_tag: consumer_tag.into() } // ConsumeOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> ConsumeOk<'a>

    impl<'a> ::Payload for ConsumeOk<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for ConsumeOk<'a>

    pub struct Cancel<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        nowait: bool,
    } // struct Cancel<'a>

    impl<'a> Cancel<'a> {
        pub fn new<C>(consumer_tag: C, nowait: bool) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            Cancel {
                consumer_tag: consumer_tag.into(),
                nowait: nowait,
            } // Cancel
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(nowait, set_nowait) -> bool,
} // impl_properties
    } // impl<'a> Cancel<'a>

    impl<'a> ::Payload for Cancel<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Cancel<'a>

    pub struct CancelOk<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
    } // struct CancelOk<'a>

    impl<'a> CancelOk<'a> {
        pub fn new<C>(consumer_tag: C) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>
        {
            CancelOk { consumer_tag: consumer_tag.into() } // CancelOk
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
} // impl_properties
    } // impl<'a> CancelOk<'a>

    impl<'a> ::Payload for CancelOk<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [1, self.consumer_tag.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for CancelOk<'a>

    pub struct Publish<'a> {
        ticket: u16,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
        mandatory: bool,
        immediate: bool,
    } // struct Publish<'a>

    impl<'a> Publish<'a> {
        pub fn new<E, R>(ticket: u16,
                         exchange: E,
                         routing_key: R,
                         mandatory: bool,
                         immediate: bool)
                         -> Self
            where E: Into<::std::borrow::Cow<'a, str>>,
                  R: Into<::std::borrow::Cow<'a, str>>
        {
            Publish {
                ticket: ticket,
                exchange: exchange.into(),
                routing_key: routing_key.into(),
                mandatory: mandatory,
                immediate: immediate,
            } // Publish
        } // fn new()
        impl_properties! {
(ticket, set_ticket) -> u16,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
(mandatory, set_mandatory) -> bool,
(immediate, set_immediate) -> bool,
} // impl_properties
    } // impl<'a> Publish<'a>

    impl<'a> ::Payload for Publish<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Publish<'a>

    pub struct Return<'a> {
        reply_code: u16,
        reply_text: ::std::borrow::Cow<'a, str>,
        exchange: ::std::borrow::Cow<'a, str>,
        routing_key: ::std::borrow::Cow<'a, str>,
    } // struct Return<'a>

    impl<'a> Return<'a> {
        pub fn new<R, E, R0>(reply_code: u16, reply_text: R, exchange: E, routing_key: R0) -> Self
            where R: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  R0: Into<::std::borrow::Cow<'a, str>>
        {
            Return {
                reply_code: reply_code,
                reply_text: reply_text.into(),
                exchange: exchange.into(),
                routing_key: routing_key.into(),
            } // Return
        } // fn new()
        impl_properties! {
(reply_code, set_reply_code) -> u16,
(reply_text, reply_text_mut, set_reply_text) -> Cow<str>,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(routing_key, routing_key_mut, set_routing_key) -> Cow<str>,
} // impl_properties
    } // impl<'a> Return<'a>

    impl<'a> ::Payload for Return<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            50
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [5, self.reply_text.len(), self.exchange.len(), self.routing_key.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Return<'a>

    pub struct Deliver<'a> {
        consumer_tag: ::std::borrow::Cow<'a, str>,
        delivery_tag: u64,
        exchange: ::std::borrow::Cow<'a, str>,
        queue: ::std::borrow::Cow<'a, str>,
    } // struct Deliver<'a>

    impl<'a> Deliver<'a> {
        pub fn new<C, E, Q>(consumer_tag: C, delivery_tag: u64, exchange: E, queue: Q) -> Self
            where C: Into<::std::borrow::Cow<'a, str>>,
                  E: Into<::std::borrow::Cow<'a, str>>,
                  Q: Into<::std::borrow::Cow<'a, str>>
        {
            Deliver {
                consumer_tag: consumer_tag.into(),
                delivery_tag: delivery_tag,
                exchange: exchange.into(),
                queue: queue.into(),
            } // Deliver
        } // fn new()
        impl_properties! {
(consumer_tag, consumer_tag_mut, set_consumer_tag) -> Cow<str>,
(delivery_tag, set_delivery_tag) -> u64,
(exchange, exchange_mut, set_exchange) -> Cow<str>,
(queue, queue_mut, set_queue) -> Cow<str>,
} // impl_properties
    } // impl<'a> Deliver<'a>

    impl<'a> ::Payload for Deliver<'a> {
        fn class_id(&self) -> u16 {
            80
        } // fn class_id()
        fn method_id(&self) -> u16 {
            60
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [11, self.consumer_tag.len(), self.exchange.len(), self.queue.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Deliver<'a>

    pub enum Method<'a> {
        Qos(Qos),
        QosOk(QosOk),
        Consume(Consume<'a>),
        ConsumeOk(ConsumeOk<'a>),
        Cancel(Cancel<'a>),
        CancelOk(CancelOk<'a>),
        Publish(Publish<'a>),
        Return(Return<'a>),
        Deliver(Deliver<'a>),
    } // enum Method

} // mod stream

pub mod test {
    pub struct Header;

    pub struct Integer {
        integer_1: u8,
        integer_2: u16,
        integer_3: u32,
        integer_4: u64,
        operation: u8,
    } // struct Integer

    impl Integer {
        pub fn new(integer_1: u8,
                   integer_2: u16,
                   integer_3: u32,
                   integer_4: u64,
                   operation: u8)
                   -> Self {
            Integer {
                integer_1: integer_1,
                integer_2: integer_2,
                integer_3: integer_3,
                integer_4: integer_4,
                operation: operation,
            } // Integer
        } // fn new()
        impl_properties! {
(integer_1, set_integer_1) -> u8,
(integer_2, set_integer_2) -> u16,
(integer_3, set_integer_3) -> u32,
(integer_4, set_integer_4) -> u64,
(operation, set_operation) -> u8,
} // impl_properties
    } // impl Integer

    impl ::Payload for Integer {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            16
        } // fn len()
    } // impl ::Payload for Integer

    pub struct IntegerOk {
        result: u64,
    } // struct IntegerOk

    impl IntegerOk {
        pub fn new(result: u64) -> Self {
            IntegerOk { result: result } // IntegerOk
        } // fn new()
        impl_properties! {
(result, set_result) -> u64,
} // impl_properties
    } // impl IntegerOk

    impl ::Payload for IntegerOk {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            8
        } // fn len()
    } // impl ::Payload for IntegerOk

    pub struct String<'a> {
        string_1: ::std::borrow::Cow<'a, str>,
        string_2: ::std::borrow::Cow<'a, [u8]>,
        operation: u8,
    } // struct String<'a>

    impl<'a> String<'a> {
        pub fn new<S, S0>(string_1: S, string_2: S0, operation: u8) -> Self
            where S: Into<::std::borrow::Cow<'a, str>>,
                  S0: Into<::std::borrow::Cow<'a, [u8]>>
        {
            String {
                string_1: string_1.into(),
                string_2: string_2.into(),
                operation: operation,
            } // String
        } // fn new()
        impl_properties! {
(string_1, string_1_mut, set_string_1) -> Cow<str>,
(string_2, string_2_mut, set_string_2) -> Cow<[u8]>,
(operation, set_operation) -> u8,
} // impl_properties
    } // impl<'a> String<'a>

    impl<'a> ::Payload for String<'a> {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [4, self.string_1.len(), self.string_2.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for String<'a>

    pub struct StringOk<'a> {
        result: ::std::borrow::Cow<'a, [u8]>,
    } // struct StringOk<'a>

    impl<'a> StringOk<'a> {
        pub fn new<R>(result: R) -> Self
            where R: Into<::std::borrow::Cow<'a, [u8]>>
        {
            StringOk { result: result.into() } // StringOk
        } // fn new()
        impl_properties! {
(result, result_mut, set_result) -> Cow<[u8]>,
} // impl_properties
    } // impl<'a> StringOk<'a>

    impl<'a> ::Payload for StringOk<'a> {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.result.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for StringOk<'a>

    pub struct Table<'a> {
        table: ::field::TableEntries<'a>,
        integer_op: u8,
        string_op: u8,
    } // struct Table<'a>

    impl<'a> Table<'a> {
        pub fn new<T>(table: T, integer_op: u8, string_op: u8) -> Self
            where T: Into<::field::TableEntries<'a>>
        {
            Table {
                table: table.into(),
                integer_op: integer_op,
                string_op: string_op,
            } // Table
        } // fn new()
        impl_properties! {
(table, table_mut, set_table) -> &::field::TableEntries<'a>,
(integer_op, set_integer_op) -> u8,
(string_op, set_string_op) -> u8,
} // impl_properties
    } // impl<'a> Table<'a>

    impl<'a> ::Payload for Table<'a> {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [2, self.table.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Table<'a>

    pub struct TableOk<'a> {
        integer_result: u64,
        string_result: ::std::borrow::Cow<'a, [u8]>,
    } // struct TableOk<'a>

    impl<'a> TableOk<'a> {
        pub fn new<S>(integer_result: u64, string_result: S) -> Self
            where S: Into<::std::borrow::Cow<'a, [u8]>>
        {
            TableOk {
                integer_result: integer_result,
                string_result: string_result.into(),
            } // TableOk
        } // fn new()
        impl_properties! {
(integer_result, set_integer_result) -> u64,
(string_result, string_result_mut, set_string_result) -> Cow<[u8]>,
} // impl_properties
    } // impl<'a> TableOk<'a>

    impl<'a> ::Payload for TableOk<'a> {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [10, self.string_result.len()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for TableOk<'a>

    pub struct Content;

    impl Content {
        pub fn new() -> Self {
            Content
        } // fn new()
    } // impl Content

    impl ::Payload for Content {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            40
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Content

    pub struct ContentOk {
        content_checksum: u32,
    } // struct ContentOk

    impl ContentOk {
        pub fn new(content_checksum: u32) -> Self {
            ContentOk { content_checksum: content_checksum } // ContentOk
        } // fn new()
        impl_properties! {
(content_checksum, set_content_checksum) -> u32,
} // impl_properties
    } // impl ContentOk

    impl ::Payload for ContentOk {
        fn class_id(&self) -> u16 {
            120
        } // fn class_id()
        fn method_id(&self) -> u16 {
            41
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            4
        } // fn len()
    } // impl ::Payload for ContentOk

    pub enum Method<'a> {
        Integer(Integer),
        IntegerOk(IntegerOk),
        String(String<'a>),
        StringOk(StringOk<'a>),
        Table(Table<'a>),
        TableOk(TableOk<'a>),
        Content(Content),
        ContentOk(ContentOk),
    } // enum Method

} // mod test

pub mod tunnel {
    pub struct Header<'a> {
        headers: Option<::field::TableEntries<'a>>,
        proxy_name: Option<::std::borrow::Cow<'a, str>>,
        data_name: Option<::std::borrow::Cow<'a, str>>,
        durable: Option<u8>,
        broadcast: Option<u8>,
    } // struct Header

    impl<'a> Header<'a> {
        impl_properties! {
(headers, headers_mut, set_headers, take_headers) -> Option< &::field::TableEntries<'a> >,
(proxy_name, proxy_name_mut, set_proxy_name, take_proxy_name) -> Option< Cow<str> >,
(data_name, data_name_mut, set_data_name, take_data_name) -> Option< Cow<str> >,
(durable, durable_mut, set_durable, take_durable) -> Option< u8 >,
(broadcast, broadcast_mut, set_broadcast, take_broadcast) -> Option< u8 >,
} // impl_properties
    } // impl Headers

    pub struct Request<'a> {
        meta_data: ::field::TableEntries<'a>,
    } // struct Request<'a>

    impl<'a> Request<'a> {
        pub fn new<M>(meta_data: M) -> Self
            where M: Into<::field::TableEntries<'a>>
        {
            Request { meta_data: meta_data.into() } // Request
        } // fn new()
        impl_properties! {
(meta_data, meta_data_mut, set_meta_data) -> &::field::TableEntries<'a>,
} // impl_properties
    } // impl<'a> Request<'a>

    impl<'a> ::Payload for Request<'a> {
        fn class_id(&self) -> u16 {
            110
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            [0, self.meta_data.amqp_size()]
                .iter()
                .sum()
        } // fn len()
    } // impl<'a> ::Payload for Request<'a>

    pub enum Method<'a> {
        Request(Request<'a>),
    } // enum Method

} // mod tunnel

pub mod tx {
    pub struct Header;

    pub struct Select;

    impl Select {
        pub fn new() -> Self {
            Select
        } // fn new()
    } // impl Select

    impl ::Payload for Select {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            10
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Select

    pub struct SelectOk;

    impl SelectOk {
        pub fn new() -> Self {
            SelectOk
        } // fn new()
    } // impl SelectOk

    impl ::Payload for SelectOk {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            11
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for SelectOk

    pub struct Commit;

    impl Commit {
        pub fn new() -> Self {
            Commit
        } // fn new()
    } // impl Commit

    impl ::Payload for Commit {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            20
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Commit

    pub struct CommitOk;

    impl CommitOk {
        pub fn new() -> Self {
            CommitOk
        } // fn new()
    } // impl CommitOk

    impl ::Payload for CommitOk {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            21
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for CommitOk

    pub struct Rollback;

    impl Rollback {
        pub fn new() -> Self {
            Rollback
        } // fn new()
    } // impl Rollback

    impl ::Payload for Rollback {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            30
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for Rollback

    pub struct RollbackOk;

    impl RollbackOk {
        pub fn new() -> Self {
            RollbackOk
        } // fn new()
    } // impl RollbackOk

    impl ::Payload for RollbackOk {
        fn class_id(&self) -> u16 {
            90
        } // fn class_id()
        fn method_id(&self) -> u16 {
            31
        } // fn method_id()
        fn write_to<W>(&self, _: &mut W) -> ::std::io::Result<()>
            where W: ::std::io::Write
        {
            ::std::result::Result::Ok(())
        } // fn write_to()
        fn len(&self) -> usize {
            0
        } // fn len()
    } // impl ::Payload for RollbackOk

    pub enum Method {
        Select(Select),
        SelectOk(SelectOk),
        Commit(Commit),
        CommitOk(CommitOk),
        Rollback(Rollback),
        RollbackOk(RollbackOk),
    } // enum Method

} // mod tx


// Class methods
type AccessMethod<'a> = access::Method<'a>;
type BasicMethod<'a> = basic::Method<'a>;
type ChannelMethod<'a> = channel::Method<'a>;
type ConnectionMethod<'a> = connection::Method<'a>;
type DtxMethod<'a> = dtx::Method<'a>;
type ExchangeMethod<'a> = exchange::Method<'a>;
type FileMethod<'a> = file::Method<'a>;
type QueueMethod<'a> = queue::Method<'a>;
type StreamMethod<'a> = stream::Method<'a>;
type TestMethod<'a> = test::Method<'a>;
type TunnelMethod<'a> = tunnel::Method<'a>;
type TxMethod = tx::Method;

pub enum Method<'a> {
    Access(AccessMethod<'a>),
    Basic(BasicMethod<'a>),
    Channel(ChannelMethod<'a>),
    Connection(ConnectionMethod<'a>),
    Dtx(DtxMethod<'a>),
    Exchange(ExchangeMethod<'a>),
    File(FileMethod<'a>),
    Queue(QueueMethod<'a>),
    Stream(StreamMethod<'a>),
    Test(TestMethod<'a>),
    Tunnel(TunnelMethod<'a>),
    Tx(TxMethod),
} // enum Method

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq)]
pub struct Qpid8_0;
impl ::Spec for Qpid8_0 {}
