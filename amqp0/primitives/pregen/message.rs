// Generated by build.rs script in the amqp0-primitives crate.
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate.
//
// To regenerate, ignoring the pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden or removed.

trait Basic<'a> {
    // Mandatory Fields (may be made optional in the future)
    fn body(&self) -> &[u8];
    fn headers(&self) -> &::field::TableEntries<'a>;

    // Optional Fields
    fn app_id(&self) -> Option<&str> {
        None
    }
    fn cluster_id(&self) -> Option<&str> {
        None
    }
    fn consumer_tag(&self) -> Option<&str> {
        None
    }
    fn content_encoding(&self) -> Option<&str> {
        None
    }
    fn content_type(&self) -> Option<&str> {
        None
    }
    fn correlation_id(&self) -> Option<&str> {
        None
    }
    fn delivery_mode(&self) -> Option<u8> {
        None
    }
    fn delivery_tag(&self) -> Option<u64> {
        None
    }
    fn exchange(&self) -> Option<&str> {
        None
    }
    fn expiration(&self) -> Option<&str> {
        None
    }
    fn message_count(&self) -> Option<u32> {
        None
    }
    fn message_id(&self) -> Option<&str> {
        None
    }
    fn priority(&self) -> Option<u8> {
        None
    }
    fn reply_code(&self) -> Option<u16> {
        None
    }
    fn reply_text(&self) -> Option<&str> {
        None
    }
    fn reply_to(&self) -> Option<&str> {
        None
    }
    fn routing_key(&self) -> Option<&str> {
        None
    }
    fn ticket(&self) -> Option<u16> {
        None
    }
    fn timestamp(&self) -> Option<u64> {
        None
    }
    fn ty(&self) -> Option<&str> {
        None
    }
    fn user_id(&self) -> Option<&str> {
        None
    }

    // Optional Flags
    fn is_immediate(&self) -> Option<bool> {
        None
    }
    fn is_mandatory(&self) -> Option<bool> {
        None
    }
    fn is_redelivered(&self) -> Option<bool> {
        None
    }
} // trait Basic

trait File<'a> {
    // Mandatory Fields (may be made optional in the future)
    fn body(&self) -> &[u8];
    fn headers(&self) -> &::field::TableEntries<'a>;

    // Optional Fields
    fn cluster_id(&self) -> Option<&str> {
        None
    }
    fn content_encoding(&self) -> Option<&str> {
        None
    }
    fn content_type(&self) -> Option<&str> {
        None
    }
    fn exchange(&self) -> Option<&str> {
        None
    }
    fn filename(&self) -> Option<&str> {
        None
    }
    fn message_id(&self) -> Option<&str> {
        None
    }
    fn priority(&self) -> Option<u8> {
        None
    }
    fn reply_code(&self) -> Option<u16> {
        None
    }
    fn reply_text(&self) -> Option<&str> {
        None
    }
    fn reply_to(&self) -> Option<&str> {
        None
    }
    fn routing_key(&self) -> Option<&str> {
        None
    }
    fn timestamp(&self) -> Option<u64> {
        None
    }
} // trait File

trait Stream<'a> {
    // Mandatory Fields (may be made optional in the future)
    fn body(&self) -> &[u8];
    fn headers(&self) -> &::field::TableEntries<'a>;

    // Optional Fields
    fn consumer_tag(&self) -> Option<&str> {
        None
    }
    fn content_encoding(&self) -> Option<&str> {
        None
    }
    fn content_type(&self) -> Option<&str> {
        None
    }
    fn delivery_tag(&self) -> Option<u64> {
        None
    }
    fn exchange(&self) -> Option<&str> {
        None
    }
    fn priority(&self) -> Option<u8> {
        None
    }
    fn queue(&self) -> Option<&str> {
        None
    }
    fn reply_code(&self) -> Option<u16> {
        None
    }
    fn reply_text(&self) -> Option<&str> {
        None
    }
    fn routing_key(&self) -> Option<&str> {
        None
    }
    fn ticket(&self) -> Option<u16> {
        None
    }
    fn timestamp(&self) -> Option<u64> {
        None
    }

    // Optional Flags
    fn is_immediate(&self) -> Option<bool> {
        None
    }
    fn is_mandatory(&self) -> Option<bool> {
        None
    }
} // trait Stream

trait Test<'a> {
    fn body(&self) -> &[u8];
    fn content_checksum(&self) -> Option<u32> {
        None
    }
} // trait Test

trait Tunnel<'a> {
    // Mandatory Fields (may be made optional in the future)
    fn body(&self) -> &[u8];
    fn headers(&self) -> &::field::TableEntries<'a>;
    fn meta_data(&self) -> &::field::TableEntries<'a>;

    // Optional Fields
    fn broadcast(&self) -> Option<u8> {
        None
    }
    fn data_name(&self) -> Option<&str> {
        None
    }
    fn durable(&self) -> Option<u8> {
        None
    }
    fn proxy_name(&self) -> Option<&str> {
        None
    }
} // trait Tunnel
