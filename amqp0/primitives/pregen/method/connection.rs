// Generated by build.rs script in the amqp0-primitives crate.
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate.
//
// To regenerate, ignoring the pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden or removed.
pub trait BlockedMethod<'a> {
    type Payload: Default + SetBlockedMethodFields<'a>;
} // pub trait BlockedMethod<'a>

pub trait SetBlockedMethodFields<'a> {
    fn set_reason<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetBlockedMethodFields<'a>

pub struct BlockedBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct BlockedBuilder


impl<T> BlockedBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> BlockedBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> BlockedBuilder<T>

impl<T> Default for BlockedBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        BlockedBuilder { payload: Default::default() }
    }
} // impl Default for BlockedBuilder
impl<'a, T> BlockedBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetBlockedMethodFields<'a>
{
    pub fn reason<V>(mut self, reason: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetBlockedMethodFields::set_reason(&mut self.payload, reason.into());
        self
    } // set_reason()
} // impl<'a, T> BlockedBuilder<T>
pub trait CloseMethod<'a> {
    type Payload: Default + SetCloseMethodFields<'a>;
} // pub trait CloseMethod<'a>

pub trait SetCloseMethodFields<'a> {
    fn set_class_id(&mut self, _: u16) {}
    fn set_method_id(&mut self, _: u16) {}
    fn set_reply_code(&mut self, _: u16) {}
    fn set_reply_text<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetCloseMethodFields<'a>

pub struct CloseBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CloseBuilder


impl<T> CloseBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CloseBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CloseBuilder<T>

impl<T> Default for CloseBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CloseBuilder { payload: Default::default() }
    }
} // impl Default for CloseBuilder
impl<'a, T> CloseBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCloseMethodFields<'a>
{
    pub fn class_id(mut self, class_id: u16) -> Self {
        SetCloseMethodFields::set_class_id(&mut self.payload, class_id);
        self
    } // set_class_id()
    pub fn method_id(mut self, method_id: u16) -> Self {
        SetCloseMethodFields::set_method_id(&mut self.payload, method_id);
        self
    } // set_method_id()
    pub fn reply_code(mut self, reply_code: u16) -> Self {
        SetCloseMethodFields::set_reply_code(&mut self.payload, reply_code);
        self
    } // set_reply_code()
    pub fn reply_text<V>(mut self, reply_text: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCloseMethodFields::set_reply_text(&mut self.payload, reply_text.into());
        self
    } // set_reply_text()
} // impl<'a, T> CloseBuilder<T>
pub trait CloseOkMethod {
    type Payload: Default;
} // pub trait CloseOkMethod

pub struct CloseOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CloseOkBuilder


impl<T> CloseOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CloseOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CloseOkBuilder<T>

impl<T> Default for CloseOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CloseOkBuilder { payload: Default::default() }
    }
} // impl Default for CloseOkBuilder
pub trait OpenMethod<'a> {
    type Payload: Default + SetOpenMethodFields<'a>;
} // pub trait OpenMethod<'a>

pub trait SetOpenMethodFields<'a> {
    fn set_capabilities<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_insist(&mut self, _: bool) {}
    fn set_virtual_host<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetOpenMethodFields<'a>

pub struct OpenBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OpenBuilder


impl<T> OpenBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OpenBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OpenBuilder<T>

impl<T> Default for OpenBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OpenBuilder { payload: Default::default() }
    }
} // impl Default for OpenBuilder
impl<'a, T> OpenBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetOpenMethodFields<'a>
{
    pub fn capabilities<V>(mut self, capabilities: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetOpenMethodFields::set_capabilities(&mut self.payload, capabilities.into());
        self
    } // set_capabilities()
    pub fn insist(mut self, insist: bool) -> Self {
        SetOpenMethodFields::set_insist(&mut self.payload, insist);
        self
    } // set_insist()
    pub fn virtual_host<V>(mut self, virtual_host: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetOpenMethodFields::set_virtual_host(&mut self.payload, virtual_host.into());
        self
    } // set_virtual_host()
} // impl<'a, T> OpenBuilder<T>
pub trait OpenOkMethod<'a> {
    type Payload: Default + SetOpenOkMethodFields<'a>;
} // pub trait OpenOkMethod<'a>

pub trait SetOpenOkMethodFields<'a> {
    fn set_known_hosts<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetOpenOkMethodFields<'a>

pub struct OpenOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OpenOkBuilder


impl<T> OpenOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OpenOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OpenOkBuilder<T>

impl<T> Default for OpenOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OpenOkBuilder { payload: Default::default() }
    }
} // impl Default for OpenOkBuilder
impl<'a, T> OpenOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetOpenOkMethodFields<'a>
{
    pub fn known_hosts<V>(mut self, known_hosts: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetOpenOkMethodFields::set_known_hosts(&mut self.payload, known_hosts.into());
        self
    } // set_known_hosts()
} // impl<'a, T> OpenOkBuilder<T>
pub trait RedirectMethod<'a> {
    type Payload: Default + SetRedirectMethodFields<'a>;
} // pub trait RedirectMethod<'a>

pub trait SetRedirectMethodFields<'a> {
    fn set_host<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_known_hosts<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetRedirectMethodFields<'a>

pub struct RedirectBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RedirectBuilder


impl<T> RedirectBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RedirectBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RedirectBuilder<T>

impl<T> Default for RedirectBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RedirectBuilder { payload: Default::default() }
    }
} // impl Default for RedirectBuilder
impl<'a, T> RedirectBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetRedirectMethodFields<'a>
{
    pub fn host<V>(mut self, host: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRedirectMethodFields::set_host(&mut self.payload, host.into());
        self
    } // set_host()
    pub fn known_hosts<V>(mut self, known_hosts: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRedirectMethodFields::set_known_hosts(&mut self.payload, known_hosts.into());
        self
    } // set_known_hosts()
} // impl<'a, T> RedirectBuilder<T>
pub trait SecureMethod<'a> {
    type Payload: Default + SetSecureMethodFields<'a>;
} // pub trait SecureMethod<'a>

pub trait SetSecureMethodFields<'a> {
    fn set_challenge<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetSecureMethodFields<'a>

pub struct SecureBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct SecureBuilder


impl<T> SecureBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> SecureBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> SecureBuilder<T>

impl<T> Default for SecureBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        SecureBuilder { payload: Default::default() }
    }
} // impl Default for SecureBuilder
impl<'a, T> SecureBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetSecureMethodFields<'a>
{
    pub fn challenge<V>(mut self, challenge: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetSecureMethodFields::set_challenge(&mut self.payload, challenge.into());
        self
    } // set_challenge()
} // impl<'a, T> SecureBuilder<T>
pub trait SecureOkMethod<'a> {
    type Payload: Default + SetSecureOkMethodFields<'a>;
} // pub trait SecureOkMethod<'a>

pub trait SetSecureOkMethodFields<'a> {
    fn set_response<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetSecureOkMethodFields<'a>

pub struct SecureOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct SecureOkBuilder


impl<T> SecureOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> SecureOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> SecureOkBuilder<T>

impl<T> Default for SecureOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        SecureOkBuilder { payload: Default::default() }
    }
} // impl Default for SecureOkBuilder
impl<'a, T> SecureOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetSecureOkMethodFields<'a>
{
    pub fn response<V>(mut self, response: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetSecureOkMethodFields::set_response(&mut self.payload, response.into());
        self
    } // set_response()
} // impl<'a, T> SecureOkBuilder<T>
pub trait StartMethod<'a> {
    type Payload: Default + SetStartMethodFields<'a>;
} // pub trait StartMethod<'a>

pub trait SetStartMethodFields<'a> {
    fn set_locales<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
    fn set_mechanisms<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
    fn set_server_properties<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_version_major(&mut self, _: u8) {}
    fn set_version_minor(&mut self, _: u8) {}
} // pub trait SetStartMethodFields<'a>

pub struct StartBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct StartBuilder


impl<T> StartBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> StartBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> StartBuilder<T>

impl<T> Default for StartBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        StartBuilder { payload: Default::default() }
    }
} // impl Default for StartBuilder
impl<'a, T> StartBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetStartMethodFields<'a>
{
    pub fn locales<V>(mut self, locales: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetStartMethodFields::set_locales(&mut self.payload, locales.into());
        self
    } // set_locales()
    pub fn mechanisms<V>(mut self, mechanisms: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetStartMethodFields::set_mechanisms(&mut self.payload, mechanisms.into());
        self
    } // set_mechanisms()
    pub fn server_properties<V>(mut self, server_properties: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetStartMethodFields::set_server_properties(&mut self.payload, server_properties.into());
        self
    } // set_server_properties()
    pub fn version_major(mut self, version_major: u8) -> Self {
        SetStartMethodFields::set_version_major(&mut self.payload, version_major);
        self
    } // set_version_major()
    pub fn version_minor(mut self, version_minor: u8) -> Self {
        SetStartMethodFields::set_version_minor(&mut self.payload, version_minor);
        self
    } // set_version_minor()
} // impl<'a, T> StartBuilder<T>
pub trait StartOkMethod<'a> {
    type Payload: Default + SetStartOkMethodFields<'a>;
} // pub trait StartOkMethod<'a>

pub trait SetStartOkMethodFields<'a> {
    fn set_client_properties<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_locale<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_mechanism<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_response<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetStartOkMethodFields<'a>

pub struct StartOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct StartOkBuilder


impl<T> StartOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> StartOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> StartOkBuilder<T>

impl<T> Default for StartOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        StartOkBuilder { payload: Default::default() }
    }
} // impl Default for StartOkBuilder
impl<'a, T> StartOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetStartOkMethodFields<'a>
{
    pub fn client_properties<V>(mut self, client_properties: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetStartOkMethodFields::set_client_properties(&mut self.payload, client_properties.into());
        self
    } // set_client_properties()
    pub fn locale<V>(mut self, locale: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetStartOkMethodFields::set_locale(&mut self.payload, locale.into());
        self
    } // set_locale()
    pub fn mechanism<V>(mut self, mechanism: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetStartOkMethodFields::set_mechanism(&mut self.payload, mechanism.into());
        self
    } // set_mechanism()
    pub fn response<V>(mut self, response: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetStartOkMethodFields::set_response(&mut self.payload, response.into());
        self
    } // set_response()
} // impl<'a, T> StartOkBuilder<T>
pub trait TuneMethod {
    type Payload: Default + SetTuneMethodFields;
} // pub trait TuneMethod

pub trait SetTuneMethodFields {
    fn set_channel_max(&mut self, _: u16) {}
    fn set_frame_max(&mut self, _: u32) {}
    fn set_heartbeat(&mut self, _: u16) {}
} // pub trait SetTuneMethodFields

pub struct TuneBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct TuneBuilder


impl<T> TuneBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> TuneBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> TuneBuilder<T>

impl<T> Default for TuneBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        TuneBuilder { payload: Default::default() }
    }
} // impl Default for TuneBuilder
impl<T> TuneBuilder<T>
    where T: ::Encodable + SetTuneMethodFields
{
    pub fn channel_max(mut self, channel_max: u16) -> Self {
        SetTuneMethodFields::set_channel_max(&mut self.payload, channel_max);
        self
    } // set_channel_max()
    pub fn frame_max(mut self, frame_max: u32) -> Self {
        SetTuneMethodFields::set_frame_max(&mut self.payload, frame_max);
        self
    } // set_frame_max()
    pub fn heartbeat(mut self, heartbeat: u16) -> Self {
        SetTuneMethodFields::set_heartbeat(&mut self.payload, heartbeat);
        self
    } // set_heartbeat()
} // impl<T> TuneBuilder<T>
pub trait TuneOkMethod {
    type Payload: Default + SetTuneOkMethodFields;
} // pub trait TuneOkMethod

pub trait SetTuneOkMethodFields {
    fn set_channel_max(&mut self, _: u16) {}
    fn set_frame_max(&mut self, _: u32) {}
    fn set_heartbeat(&mut self, _: u16) {}
} // pub trait SetTuneOkMethodFields

pub struct TuneOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct TuneOkBuilder


impl<T> TuneOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> TuneOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> TuneOkBuilder<T>

impl<T> Default for TuneOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        TuneOkBuilder { payload: Default::default() }
    }
} // impl Default for TuneOkBuilder
impl<T> TuneOkBuilder<T>
    where T: ::Encodable + SetTuneOkMethodFields
{
    pub fn channel_max(mut self, channel_max: u16) -> Self {
        SetTuneOkMethodFields::set_channel_max(&mut self.payload, channel_max);
        self
    } // set_channel_max()
    pub fn frame_max(mut self, frame_max: u32) -> Self {
        SetTuneOkMethodFields::set_frame_max(&mut self.payload, frame_max);
        self
    } // set_frame_max()
    pub fn heartbeat(mut self, heartbeat: u16) -> Self {
        SetTuneOkMethodFields::set_heartbeat(&mut self.payload, heartbeat);
        self
    } // set_heartbeat()
} // impl<T> TuneOkBuilder<T>
pub trait UnblockedMethod {
    type Payload: Default;
} // pub trait UnblockedMethod

pub struct UnblockedBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct UnblockedBuilder


impl<T> UnblockedBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> UnblockedBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> UnblockedBuilder<T>

impl<T> Default for UnblockedBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        UnblockedBuilder { payload: Default::default() }
    }
} // impl Default for UnblockedBuilder
