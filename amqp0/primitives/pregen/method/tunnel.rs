// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
pub trait RequestMethod<'a> {
    type Payload: Default + SetRequestMethodFields<'a>;
} // pub trait RequestMethod<'a>

pub trait SetRequestMethodFields<'a> {
    fn set_broadcast(&mut self, _: u8) {}
    fn set_data_name<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_durable(&mut self, _: u8) {}
    fn set_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_meta_data<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_proxy_name<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetRequestMethodFields<'a>

pub struct RequestBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RequestBuilder


impl<T> RequestBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RequestBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RequestBuilder<T>

impl<T> Default for RequestBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RequestBuilder { payload: Default::default() }
    }
} // impl Default for RequestBuilder
impl<'a, T> RequestBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetRequestMethodFields<'a>
{
    pub fn broadcast(mut self, broadcast: u8) -> Self {
        SetRequestMethodFields::set_broadcast(&mut self.payload, broadcast);
        self
    } // set_broadcast()
    pub fn data_name<V>(mut self, data_name: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRequestMethodFields::set_data_name(&mut self.payload, data_name.into());
        self
    } // set_data_name()
    pub fn durable(mut self, durable: u8) -> Self {
        SetRequestMethodFields::set_durable(&mut self.payload, durable);
        self
    } // set_durable()
    pub fn headers<V>(mut self, headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetRequestMethodFields::set_headers(&mut self.payload, headers.into());
        self
    } // set_headers()
    pub fn meta_data<V>(mut self, meta_data: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetRequestMethodFields::set_meta_data(&mut self.payload, meta_data.into());
        self
    } // set_meta_data()
    pub fn proxy_name<V>(mut self, proxy_name: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRequestMethodFields::set_proxy_name(&mut self.payload, proxy_name.into());
        self
    } // set_proxy_name()
    pub fn set_headers<V>(self, _: V) -> Self
        where V: Into<<T as ::Content<'a>>::Headers>
    {
        self
    }

    pub fn set_body<V>(self, _: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        self
    }
} // impl<'a, T> RequestBuilder<T>
