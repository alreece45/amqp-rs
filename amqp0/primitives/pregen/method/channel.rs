// Generated by build.rs script in the amqp0-primitives crate.
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate.
//
// To regenerate, ignoring the pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden or removed.
pub trait AlertMethod<'a> {
    type Payload: Default + SetAlertMethodFields<'a>;
} // pub trait AlertMethod<'a>

pub trait SetAlertMethodFields<'a> {
    fn set_details<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_reply_code(&mut self, _: u16) {}
    fn set_reply_text<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetAlertMethodFields<'a>

pub struct AlertBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct AlertBuilder


impl<T> AlertBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> AlertBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> AlertBuilder<T>

impl<T> Default for AlertBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        AlertBuilder { payload: Default::default() }
    }
} // impl Default for AlertBuilder
impl<'a, T> AlertBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetAlertMethodFields<'a>
{
    pub fn details<V>(mut self, details: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetAlertMethodFields::set_details(&mut self.payload, details.into());
        self
    } // set_details()
    pub fn reply_code(mut self, reply_code: u16) -> Self {
        SetAlertMethodFields::set_reply_code(&mut self.payload, reply_code);
        self
    } // set_reply_code()
    pub fn reply_text<V>(mut self, reply_text: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetAlertMethodFields::set_reply_text(&mut self.payload, reply_text.into());
        self
    } // set_reply_text()
} // impl<'a, T> AlertBuilder<T>
pub trait CloseMethod<'a> {
    type Payload: Default + SetCloseMethodFields<'a>;
} // pub trait CloseMethod<'a>

pub trait SetCloseMethodFields<'a> {
    fn set_class_id(&mut self, _: u16) {}
    fn set_method_id(&mut self, _: u16) {}
    fn set_reply_code(&mut self, _: u16) {}
    fn set_reply_text<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetCloseMethodFields<'a>

pub struct CloseBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CloseBuilder


impl<T> CloseBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CloseBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CloseBuilder<T>

impl<T> Default for CloseBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CloseBuilder { payload: Default::default() }
    }
} // impl Default for CloseBuilder
impl<'a, T> CloseBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCloseMethodFields<'a>
{
    pub fn class_id(mut self, class_id: u16) -> Self {
        SetCloseMethodFields::set_class_id(&mut self.payload, class_id);
        self
    } // set_class_id()
    pub fn method_id(mut self, method_id: u16) -> Self {
        SetCloseMethodFields::set_method_id(&mut self.payload, method_id);
        self
    } // set_method_id()
    pub fn reply_code(mut self, reply_code: u16) -> Self {
        SetCloseMethodFields::set_reply_code(&mut self.payload, reply_code);
        self
    } // set_reply_code()
    pub fn reply_text<V>(mut self, reply_text: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCloseMethodFields::set_reply_text(&mut self.payload, reply_text.into());
        self
    } // set_reply_text()
} // impl<'a, T> CloseBuilder<T>
pub trait CloseOkMethod {
    type Payload: Default;
} // pub trait CloseOkMethod

pub struct CloseOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CloseOkBuilder


impl<T> CloseOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CloseOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CloseOkBuilder<T>

impl<T> Default for CloseOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CloseOkBuilder { payload: Default::default() }
    }
} // impl Default for CloseOkBuilder
pub trait FlowMethod {
    type Payload: Default + SetFlowMethodFields;
} // pub trait FlowMethod

pub trait SetFlowMethodFields {
    fn set_active(&mut self, _: bool) {}
} // pub trait SetFlowMethodFields

pub struct FlowBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct FlowBuilder


impl<T> FlowBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> FlowBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> FlowBuilder<T>

impl<T> Default for FlowBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        FlowBuilder { payload: Default::default() }
    }
} // impl Default for FlowBuilder
impl<T> FlowBuilder<T>
    where T: ::Encodable + SetFlowMethodFields
{
    pub fn active(mut self, active: bool) -> Self {
        SetFlowMethodFields::set_active(&mut self.payload, active);
        self
    } // set_active()
} // impl<T> FlowBuilder<T>
pub trait FlowOkMethod {
    type Payload: Default + SetFlowOkMethodFields;
} // pub trait FlowOkMethod

pub trait SetFlowOkMethodFields {
    fn set_active(&mut self, _: bool) {}
} // pub trait SetFlowOkMethodFields

pub struct FlowOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct FlowOkBuilder


impl<T> FlowOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> FlowOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> FlowOkBuilder<T>

impl<T> Default for FlowOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        FlowOkBuilder { payload: Default::default() }
    }
} // impl Default for FlowOkBuilder
impl<T> FlowOkBuilder<T>
    where T: ::Encodable + SetFlowOkMethodFields
{
    pub fn active(mut self, active: bool) -> Self {
        SetFlowOkMethodFields::set_active(&mut self.payload, active);
        self
    } // set_active()
} // impl<T> FlowOkBuilder<T>
pub trait OkMethod {
    type Payload: Default;
} // pub trait OkMethod

pub struct OkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OkBuilder


impl<T> OkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OkBuilder<T>

impl<T> Default for OkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OkBuilder { payload: Default::default() }
    }
} // impl Default for OkBuilder
pub trait OpenMethod<'a> {
    type Payload: Default + SetOpenMethodFields<'a>;
} // pub trait OpenMethod<'a>

pub trait SetOpenMethodFields<'a> {
    fn set_out_of_band<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetOpenMethodFields<'a>

pub struct OpenBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OpenBuilder


impl<T> OpenBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OpenBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OpenBuilder<T>

impl<T> Default for OpenBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OpenBuilder { payload: Default::default() }
    }
} // impl Default for OpenBuilder
impl<'a, T> OpenBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetOpenMethodFields<'a>
{
    pub fn out_of_band<V>(mut self, out_of_band: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetOpenMethodFields::set_out_of_band(&mut self.payload, out_of_band.into());
        self
    } // set_out_of_band()
} // impl<'a, T> OpenBuilder<T>
pub trait OpenOkMethod<'a> {
    type Payload: Default + SetOpenOkMethodFields<'a>;
} // pub trait OpenOkMethod<'a>

pub trait SetOpenOkMethodFields<'a> {
    fn set_channel_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetOpenOkMethodFields<'a>

pub struct OpenOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OpenOkBuilder


impl<T> OpenOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OpenOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OpenOkBuilder<T>

impl<T> Default for OpenOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OpenOkBuilder { payload: Default::default() }
    }
} // impl Default for OpenOkBuilder
impl<'a, T> OpenOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetOpenOkMethodFields<'a>
{
    pub fn channel_id<V>(mut self, channel_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetOpenOkMethodFields::set_channel_id(&mut self.payload, channel_id.into());
        self
    } // set_channel_id()
} // impl<'a, T> OpenOkBuilder<T>
pub trait PingMethod {
    type Payload: Default;
} // pub trait PingMethod

pub struct PingBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct PingBuilder


impl<T> PingBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> PingBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> PingBuilder<T>

impl<T> Default for PingBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        PingBuilder { payload: Default::default() }
    }
} // impl Default for PingBuilder
pub trait PongMethod {
    type Payload: Default;
} // pub trait PongMethod

pub struct PongBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct PongBuilder


impl<T> PongBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> PongBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> PongBuilder<T>

impl<T> Default for PongBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        PongBuilder { payload: Default::default() }
    }
} // impl Default for PongBuilder
pub trait ResumeMethod<'a> {
    type Payload: Default + SetResumeMethodFields<'a>;
} // pub trait ResumeMethod<'a>

pub trait SetResumeMethodFields<'a> {
    fn set_channel_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetResumeMethodFields<'a>

pub struct ResumeBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ResumeBuilder


impl<T> ResumeBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ResumeBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ResumeBuilder<T>

impl<T> Default for ResumeBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ResumeBuilder { payload: Default::default() }
    }
} // impl Default for ResumeBuilder
impl<'a, T> ResumeBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetResumeMethodFields<'a>
{
    pub fn channel_id<V>(mut self, channel_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetResumeMethodFields::set_channel_id(&mut self.payload, channel_id.into());
        self
    } // set_channel_id()
} // impl<'a, T> ResumeBuilder<T>
