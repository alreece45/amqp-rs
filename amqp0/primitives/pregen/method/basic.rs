// Generated by build.rs script in the amqp0-primitives crate.
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate.
//
// To regenerate, ignoring the pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden or removed.
pub trait AckMethod {
    type Payload: Default + SetAckMethodFields;
} // pub trait AckMethod

pub trait SetAckMethodFields {
    fn set_delivery_tag(&mut self, _: u64) {}
    fn set_multiple(&mut self, _: bool) {}
} // pub trait SetAckMethodFields

pub struct AckBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct AckBuilder


impl<T> AckBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> AckBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> AckBuilder<T>

impl<T> Default for AckBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        AckBuilder { payload: Default::default() }
    }
} // impl Default for AckBuilder
impl<T> AckBuilder<T>
    where T: ::Encodable + SetAckMethodFields
{
    pub fn delivery_tag(mut self, delivery_tag: u64) -> Self {
        SetAckMethodFields::set_delivery_tag(&mut self.payload, delivery_tag);
        self
    } // set_delivery_tag()
    pub fn multiple(mut self, multiple: bool) -> Self {
        SetAckMethodFields::set_multiple(&mut self.payload, multiple);
        self
    } // set_multiple()
} // impl<T> AckBuilder<T>
pub trait CancelMethod<'a> {
    type Payload: Default + SetCancelMethodFields<'a>;
} // pub trait CancelMethod<'a>

pub trait SetCancelMethodFields<'a> {
    fn set_consumer_tag<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_no_wait(&mut self, _: bool) {}
} // pub trait SetCancelMethodFields<'a>

pub struct CancelBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CancelBuilder


impl<T> CancelBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CancelBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CancelBuilder<T>

impl<T> Default for CancelBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CancelBuilder { payload: Default::default() }
    }
} // impl Default for CancelBuilder
impl<'a, T> CancelBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCancelMethodFields<'a>
{
    pub fn consumer_tag<V>(mut self, consumer_tag: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCancelMethodFields::set_consumer_tag(&mut self.payload, consumer_tag.into());
        self
    } // set_consumer_tag()
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetCancelMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
} // impl<'a, T> CancelBuilder<T>
pub trait CancelOkMethod<'a> {
    type Payload: Default + SetCancelOkMethodFields<'a>;
} // pub trait CancelOkMethod<'a>

pub trait SetCancelOkMethodFields<'a> {
    fn set_consumer_tag<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetCancelOkMethodFields<'a>

pub struct CancelOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CancelOkBuilder


impl<T> CancelOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CancelOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CancelOkBuilder<T>

impl<T> Default for CancelOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CancelOkBuilder { payload: Default::default() }
    }
} // impl Default for CancelOkBuilder
impl<'a, T> CancelOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCancelOkMethodFields<'a>
{
    pub fn consumer_tag<V>(mut self, consumer_tag: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCancelOkMethodFields::set_consumer_tag(&mut self.payload, consumer_tag.into());
        self
    } // set_consumer_tag()
} // impl<'a, T> CancelOkBuilder<T>
pub trait ConsumeMethod<'a> {
    type Payload: Default + SetConsumeMethodFields<'a>;
} // pub trait ConsumeMethod<'a>

pub trait SetConsumeMethodFields<'a> {
    fn set_arguments<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_consumer_tag<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_exclusive(&mut self, _: bool) {}
    fn set_filter<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_no_ack(&mut self, _: bool) {}
    fn set_no_local(&mut self, _: bool) {}
    fn set_no_wait(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetConsumeMethodFields<'a>

pub struct ConsumeBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ConsumeBuilder


impl<T> ConsumeBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ConsumeBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ConsumeBuilder<T>

impl<T> Default for ConsumeBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ConsumeBuilder { payload: Default::default() }
    }
} // impl Default for ConsumeBuilder
impl<'a, T> ConsumeBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetConsumeMethodFields<'a>
{
    pub fn arguments<V>(mut self, arguments: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetConsumeMethodFields::set_arguments(&mut self.payload, arguments.into());
        self
    } // set_arguments()
    pub fn consumer_tag<V>(mut self, consumer_tag: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetConsumeMethodFields::set_consumer_tag(&mut self.payload, consumer_tag.into());
        self
    } // set_consumer_tag()
    pub fn exclusive(mut self, exclusive: bool) -> Self {
        SetConsumeMethodFields::set_exclusive(&mut self.payload, exclusive);
        self
    } // set_exclusive()
    pub fn filter<V>(mut self, filter: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetConsumeMethodFields::set_filter(&mut self.payload, filter.into());
        self
    } // set_filter()
    pub fn no_ack(mut self, no_ack: bool) -> Self {
        SetConsumeMethodFields::set_no_ack(&mut self.payload, no_ack);
        self
    } // set_no_ack()
    pub fn no_local(mut self, no_local: bool) -> Self {
        SetConsumeMethodFields::set_no_local(&mut self.payload, no_local);
        self
    } // set_no_local()
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetConsumeMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetConsumeMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetConsumeMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> ConsumeBuilder<T>
pub trait ConsumeOkMethod<'a> {
    type Payload: Default + SetConsumeOkMethodFields<'a>;
} // pub trait ConsumeOkMethod<'a>

pub trait SetConsumeOkMethodFields<'a> {
    fn set_consumer_tag<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetConsumeOkMethodFields<'a>

pub struct ConsumeOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ConsumeOkBuilder


impl<T> ConsumeOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ConsumeOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ConsumeOkBuilder<T>

impl<T> Default for ConsumeOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ConsumeOkBuilder { payload: Default::default() }
    }
} // impl Default for ConsumeOkBuilder
impl<'a, T> ConsumeOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetConsumeOkMethodFields<'a>
{
    pub fn consumer_tag<V>(mut self, consumer_tag: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetConsumeOkMethodFields::set_consumer_tag(&mut self.payload, consumer_tag.into());
        self
    } // set_consumer_tag()
} // impl<'a, T> ConsumeOkBuilder<T>
pub trait DeliverMethod<'a> {
    type Payload: Default + SetDeliverMethodFields<'a>;
} // pub trait DeliverMethod<'a>

pub trait SetDeliverMethodFields<'a> {
    fn set_app_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_cluster_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_consumer_tag<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_encoding<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_type<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_correlation_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_delivery_mode(&mut self, _: u8) {}
    fn set_delivery_tag(&mut self, _: u64) {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_expiration<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_message_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_priority(&mut self, _: u8) {}
    fn set_redelivered(&mut self, _: bool) {}
    fn set_reply_to<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_timestamp(&mut self, _: u64) {}
    fn set_ty<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_user_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetDeliverMethodFields<'a>

pub struct DeliverBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct DeliverBuilder


impl<T> DeliverBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> DeliverBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> DeliverBuilder<T>

impl<T> Default for DeliverBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        DeliverBuilder { payload: Default::default() }
    }
} // impl Default for DeliverBuilder
impl<'a, T> DeliverBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetDeliverMethodFields<'a>
{
    pub fn app_id<V>(mut self, app_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_app_id(&mut self.payload, app_id.into());
        self
    } // set_app_id()
    pub fn cluster_id<V>(mut self, cluster_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_cluster_id(&mut self.payload, cluster_id.into());
        self
    } // set_cluster_id()
    pub fn consumer_tag<V>(mut self, consumer_tag: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_consumer_tag(&mut self.payload, consumer_tag.into());
        self
    } // set_consumer_tag()
    pub fn content_encoding<V>(mut self, content_encoding: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_content_encoding(&mut self.payload, content_encoding.into());
        self
    } // set_content_encoding()
    pub fn content_type<V>(mut self, content_type: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_content_type(&mut self.payload, content_type.into());
        self
    } // set_content_type()
    pub fn correlation_id<V>(mut self, correlation_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_correlation_id(&mut self.payload, correlation_id.into());
        self
    } // set_correlation_id()
    pub fn delivery_mode(mut self, delivery_mode: u8) -> Self {
        SetDeliverMethodFields::set_delivery_mode(&mut self.payload, delivery_mode);
        self
    } // set_delivery_mode()
    pub fn delivery_tag(mut self, delivery_tag: u64) -> Self {
        SetDeliverMethodFields::set_delivery_tag(&mut self.payload, delivery_tag);
        self
    } // set_delivery_tag()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn expiration<V>(mut self, expiration: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_expiration(&mut self.payload, expiration.into());
        self
    } // set_expiration()
    pub fn headers<V>(mut self, headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetDeliverMethodFields::set_headers(&mut self.payload, headers.into());
        self
    } // set_headers()
    pub fn message_id<V>(mut self, message_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_message_id(&mut self.payload, message_id.into());
        self
    } // set_message_id()
    pub fn priority(mut self, priority: u8) -> Self {
        SetDeliverMethodFields::set_priority(&mut self.payload, priority);
        self
    } // set_priority()
    pub fn redelivered(mut self, redelivered: bool) -> Self {
        SetDeliverMethodFields::set_redelivered(&mut self.payload, redelivered);
        self
    } // set_redelivered()
    pub fn reply_to<V>(mut self, reply_to: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_reply_to(&mut self.payload, reply_to.into());
        self
    } // set_reply_to()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn timestamp(mut self, timestamp: u64) -> Self {
        SetDeliverMethodFields::set_timestamp(&mut self.payload, timestamp);
        self
    } // set_timestamp()
    pub fn ty<V>(mut self, ty: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_ty(&mut self.payload, ty.into());
        self
    } // set_ty()
    pub fn user_id<V>(mut self, user_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeliverMethodFields::set_user_id(&mut self.payload, user_id.into());
        self
    } // set_user_id()
    pub fn set_headers<V>(self, _: V) -> Self
        where V: Into<<T as ::Content<'a>>::Headers>
    {
        self
    }

    pub fn set_body<V>(self, _: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        self
    }
} // impl<'a, T> DeliverBuilder<T>
pub trait GetMethod<'a> {
    type Payload: Default + SetGetMethodFields<'a>;
} // pub trait GetMethod<'a>

pub trait SetGetMethodFields<'a> {
    fn set_no_ack(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetGetMethodFields<'a>

pub struct GetBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct GetBuilder


impl<T> GetBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> GetBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> GetBuilder<T>

impl<T> Default for GetBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        GetBuilder { payload: Default::default() }
    }
} // impl Default for GetBuilder
impl<'a, T> GetBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetGetMethodFields<'a>
{
    pub fn no_ack(mut self, no_ack: bool) -> Self {
        SetGetMethodFields::set_no_ack(&mut self.payload, no_ack);
        self
    } // set_no_ack()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetGetMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> GetBuilder<T>
pub trait GetEmptyMethod<'a> {
    type Payload: Default + SetGetEmptyMethodFields<'a>;
} // pub trait GetEmptyMethod<'a>

pub trait SetGetEmptyMethodFields<'a> {
    fn set_cluster_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetGetEmptyMethodFields<'a>

pub struct GetEmptyBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct GetEmptyBuilder


impl<T> GetEmptyBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> GetEmptyBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> GetEmptyBuilder<T>

impl<T> Default for GetEmptyBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        GetEmptyBuilder { payload: Default::default() }
    }
} // impl Default for GetEmptyBuilder
impl<'a, T> GetEmptyBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetGetEmptyMethodFields<'a>
{
    pub fn cluster_id<V>(mut self, cluster_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetEmptyMethodFields::set_cluster_id(&mut self.payload, cluster_id.into());
        self
    } // set_cluster_id()
} // impl<'a, T> GetEmptyBuilder<T>
pub trait GetOkMethod<'a> {
    type Payload: Default + SetGetOkMethodFields<'a>;
} // pub trait GetOkMethod<'a>

pub trait SetGetOkMethodFields<'a> {
    fn set_app_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_cluster_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_encoding<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_type<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_correlation_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_delivery_mode(&mut self, _: u8) {}
    fn set_delivery_tag(&mut self, _: u64) {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_expiration<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_message_count(&mut self, _: u32) {}
    fn set_message_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_priority(&mut self, _: u8) {}
    fn set_redelivered(&mut self, _: bool) {}
    fn set_reply_to<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_timestamp(&mut self, _: u64) {}
    fn set_ty<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_user_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetGetOkMethodFields<'a>

pub struct GetOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct GetOkBuilder


impl<T> GetOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> GetOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> GetOkBuilder<T>

impl<T> Default for GetOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        GetOkBuilder { payload: Default::default() }
    }
} // impl Default for GetOkBuilder
impl<'a, T> GetOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetGetOkMethodFields<'a>
{
    pub fn app_id<V>(mut self, app_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_app_id(&mut self.payload, app_id.into());
        self
    } // set_app_id()
    pub fn cluster_id<V>(mut self, cluster_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_cluster_id(&mut self.payload, cluster_id.into());
        self
    } // set_cluster_id()
    pub fn content_encoding<V>(mut self, content_encoding: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_content_encoding(&mut self.payload, content_encoding.into());
        self
    } // set_content_encoding()
    pub fn content_type<V>(mut self, content_type: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_content_type(&mut self.payload, content_type.into());
        self
    } // set_content_type()
    pub fn correlation_id<V>(mut self, correlation_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_correlation_id(&mut self.payload, correlation_id.into());
        self
    } // set_correlation_id()
    pub fn delivery_mode(mut self, delivery_mode: u8) -> Self {
        SetGetOkMethodFields::set_delivery_mode(&mut self.payload, delivery_mode);
        self
    } // set_delivery_mode()
    pub fn delivery_tag(mut self, delivery_tag: u64) -> Self {
        SetGetOkMethodFields::set_delivery_tag(&mut self.payload, delivery_tag);
        self
    } // set_delivery_tag()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn expiration<V>(mut self, expiration: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_expiration(&mut self.payload, expiration.into());
        self
    } // set_expiration()
    pub fn headers<V>(mut self, headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetGetOkMethodFields::set_headers(&mut self.payload, headers.into());
        self
    } // set_headers()
    pub fn message_count(mut self, message_count: u32) -> Self {
        SetGetOkMethodFields::set_message_count(&mut self.payload, message_count);
        self
    } // set_message_count()
    pub fn message_id<V>(mut self, message_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_message_id(&mut self.payload, message_id.into());
        self
    } // set_message_id()
    pub fn priority(mut self, priority: u8) -> Self {
        SetGetOkMethodFields::set_priority(&mut self.payload, priority);
        self
    } // set_priority()
    pub fn redelivered(mut self, redelivered: bool) -> Self {
        SetGetOkMethodFields::set_redelivered(&mut self.payload, redelivered);
        self
    } // set_redelivered()
    pub fn reply_to<V>(mut self, reply_to: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_reply_to(&mut self.payload, reply_to.into());
        self
    } // set_reply_to()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn timestamp(mut self, timestamp: u64) -> Self {
        SetGetOkMethodFields::set_timestamp(&mut self.payload, timestamp);
        self
    } // set_timestamp()
    pub fn ty<V>(mut self, ty: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_ty(&mut self.payload, ty.into());
        self
    } // set_ty()
    pub fn user_id<V>(mut self, user_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetOkMethodFields::set_user_id(&mut self.payload, user_id.into());
        self
    } // set_user_id()
    pub fn set_headers<V>(self, _: V) -> Self
        where V: Into<<T as ::Content<'a>>::Headers>
    {
        self
    }

    pub fn set_body<V>(self, _: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        self
    }
} // impl<'a, T> GetOkBuilder<T>
pub trait NackMethod {
    type Payload: Default + SetNackMethodFields;
} // pub trait NackMethod

pub trait SetNackMethodFields {
    fn set_delivery_tag(&mut self, _: u64) {}
    fn set_multiple(&mut self, _: bool) {}
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetNackMethodFields

pub struct NackBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct NackBuilder


impl<T> NackBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> NackBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> NackBuilder<T>

impl<T> Default for NackBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        NackBuilder { payload: Default::default() }
    }
} // impl Default for NackBuilder
impl<T> NackBuilder<T>
    where T: ::Encodable + SetNackMethodFields
{
    pub fn delivery_tag(mut self, delivery_tag: u64) -> Self {
        SetNackMethodFields::set_delivery_tag(&mut self.payload, delivery_tag);
        self
    } // set_delivery_tag()
    pub fn multiple(mut self, multiple: bool) -> Self {
        SetNackMethodFields::set_multiple(&mut self.payload, multiple);
        self
    } // set_multiple()
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetNackMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> NackBuilder<T>
pub trait PublishMethod<'a> {
    type Payload: Default + SetPublishMethodFields<'a>;
} // pub trait PublishMethod<'a>

pub trait SetPublishMethodFields<'a> {
    fn set_app_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_cluster_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_encoding<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_type<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_correlation_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_delivery_mode(&mut self, _: u8) {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_expiration<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_immediate(&mut self, _: bool) {}
    fn set_mandatory(&mut self, _: bool) {}
    fn set_message_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_priority(&mut self, _: u8) {}
    fn set_reply_to<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
    fn set_timestamp(&mut self, _: u64) {}
    fn set_ty<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_user_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetPublishMethodFields<'a>

pub struct PublishBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct PublishBuilder


impl<T> PublishBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> PublishBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> PublishBuilder<T>

impl<T> Default for PublishBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        PublishBuilder { payload: Default::default() }
    }
} // impl Default for PublishBuilder
impl<'a, T> PublishBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetPublishMethodFields<'a>
{
    pub fn app_id<V>(mut self, app_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_app_id(&mut self.payload, app_id.into());
        self
    } // set_app_id()
    pub fn cluster_id<V>(mut self, cluster_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_cluster_id(&mut self.payload, cluster_id.into());
        self
    } // set_cluster_id()
    pub fn content_encoding<V>(mut self, content_encoding: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_content_encoding(&mut self.payload, content_encoding.into());
        self
    } // set_content_encoding()
    pub fn content_type<V>(mut self, content_type: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_content_type(&mut self.payload, content_type.into());
        self
    } // set_content_type()
    pub fn correlation_id<V>(mut self, correlation_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_correlation_id(&mut self.payload, correlation_id.into());
        self
    } // set_correlation_id()
    pub fn delivery_mode(mut self, delivery_mode: u8) -> Self {
        SetPublishMethodFields::set_delivery_mode(&mut self.payload, delivery_mode);
        self
    } // set_delivery_mode()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn expiration<V>(mut self, expiration: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_expiration(&mut self.payload, expiration.into());
        self
    } // set_expiration()
    pub fn headers<V>(mut self, headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetPublishMethodFields::set_headers(&mut self.payload, headers.into());
        self
    } // set_headers()
    pub fn immediate(mut self, immediate: bool) -> Self {
        SetPublishMethodFields::set_immediate(&mut self.payload, immediate);
        self
    } // set_immediate()
    pub fn mandatory(mut self, mandatory: bool) -> Self {
        SetPublishMethodFields::set_mandatory(&mut self.payload, mandatory);
        self
    } // set_mandatory()
    pub fn message_id<V>(mut self, message_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_message_id(&mut self.payload, message_id.into());
        self
    } // set_message_id()
    pub fn priority(mut self, priority: u8) -> Self {
        SetPublishMethodFields::set_priority(&mut self.payload, priority);
        self
    } // set_priority()
    pub fn reply_to<V>(mut self, reply_to: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_reply_to(&mut self.payload, reply_to.into());
        self
    } // set_reply_to()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetPublishMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
    pub fn timestamp(mut self, timestamp: u64) -> Self {
        SetPublishMethodFields::set_timestamp(&mut self.payload, timestamp);
        self
    } // set_timestamp()
    pub fn ty<V>(mut self, ty: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_ty(&mut self.payload, ty.into());
        self
    } // set_ty()
    pub fn user_id<V>(mut self, user_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPublishMethodFields::set_user_id(&mut self.payload, user_id.into());
        self
    } // set_user_id()
    pub fn set_headers<V>(self, _: V) -> Self
        where V: Into<<T as ::Content<'a>>::Headers>
    {
        self
    }

    pub fn set_body<V>(self, _: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        self
    }
} // impl<'a, T> PublishBuilder<T>
pub trait QosMethod {
    type Payload: Default + SetQosMethodFields;
} // pub trait QosMethod

pub trait SetQosMethodFields {
    fn set_global(&mut self, _: bool) {}
    fn set_prefetch_count(&mut self, _: u16) {}
    fn set_prefetch_size(&mut self, _: u32) {}
} // pub trait SetQosMethodFields

pub struct QosBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct QosBuilder


impl<T> QosBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> QosBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> QosBuilder<T>

impl<T> Default for QosBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        QosBuilder { payload: Default::default() }
    }
} // impl Default for QosBuilder
impl<T> QosBuilder<T>
    where T: ::Encodable + SetQosMethodFields
{
    pub fn global(mut self, global: bool) -> Self {
        SetQosMethodFields::set_global(&mut self.payload, global);
        self
    } // set_global()
    pub fn prefetch_count(mut self, prefetch_count: u16) -> Self {
        SetQosMethodFields::set_prefetch_count(&mut self.payload, prefetch_count);
        self
    } // set_prefetch_count()
    pub fn prefetch_size(mut self, prefetch_size: u32) -> Self {
        SetQosMethodFields::set_prefetch_size(&mut self.payload, prefetch_size);
        self
    } // set_prefetch_size()
} // impl<T> QosBuilder<T>
pub trait QosOkMethod {
    type Payload: Default;
} // pub trait QosOkMethod

pub struct QosOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct QosOkBuilder


impl<T> QosOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> QosOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> QosOkBuilder<T>

impl<T> Default for QosOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        QosOkBuilder { payload: Default::default() }
    }
} // impl Default for QosOkBuilder
pub trait RecoverMethod {
    type Payload: Default + SetRecoverMethodFields;
} // pub trait RecoverMethod

pub trait SetRecoverMethodFields {
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetRecoverMethodFields

pub struct RecoverBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverBuilder


impl<T> RecoverBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverBuilder<T>

impl<T> Default for RecoverBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverBuilder { payload: Default::default() }
    }
} // impl Default for RecoverBuilder
impl<T> RecoverBuilder<T>
    where T: ::Encodable + SetRecoverMethodFields
{
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetRecoverMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> RecoverBuilder<T>
pub trait RecoverAsyncMethod {
    type Payload: Default + SetRecoverAsyncMethodFields;
} // pub trait RecoverAsyncMethod

pub trait SetRecoverAsyncMethodFields {
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetRecoverAsyncMethodFields

pub struct RecoverAsyncBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverAsyncBuilder


impl<T> RecoverAsyncBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverAsyncBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverAsyncBuilder<T>

impl<T> Default for RecoverAsyncBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverAsyncBuilder { payload: Default::default() }
    }
} // impl Default for RecoverAsyncBuilder
impl<T> RecoverAsyncBuilder<T>
    where T: ::Encodable + SetRecoverAsyncMethodFields
{
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetRecoverAsyncMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> RecoverAsyncBuilder<T>
pub trait RecoverOkMethod {
    type Payload: Default;
} // pub trait RecoverOkMethod

pub struct RecoverOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverOkBuilder


impl<T> RecoverOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverOkBuilder<T>

impl<T> Default for RecoverOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverOkBuilder { payload: Default::default() }
    }
} // impl Default for RecoverOkBuilder
pub trait RecoverSyncMethod {
    type Payload: Default + SetRecoverSyncMethodFields;
} // pub trait RecoverSyncMethod

pub trait SetRecoverSyncMethodFields {
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetRecoverSyncMethodFields

pub struct RecoverSyncBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverSyncBuilder


impl<T> RecoverSyncBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverSyncBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverSyncBuilder<T>

impl<T> Default for RecoverSyncBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverSyncBuilder { payload: Default::default() }
    }
} // impl Default for RecoverSyncBuilder
impl<T> RecoverSyncBuilder<T>
    where T: ::Encodable + SetRecoverSyncMethodFields
{
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetRecoverSyncMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> RecoverSyncBuilder<T>
pub trait RecoverSyncOkMethod {
    type Payload: Default;
} // pub trait RecoverSyncOkMethod

pub struct RecoverSyncOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverSyncOkBuilder


impl<T> RecoverSyncOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverSyncOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverSyncOkBuilder<T>

impl<T> Default for RecoverSyncOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverSyncOkBuilder { payload: Default::default() }
    }
} // impl Default for RecoverSyncOkBuilder
pub trait RejectMethod {
    type Payload: Default + SetRejectMethodFields;
} // pub trait RejectMethod

pub trait SetRejectMethodFields {
    fn set_delivery_tag(&mut self, _: u64) {}
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetRejectMethodFields

pub struct RejectBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RejectBuilder


impl<T> RejectBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RejectBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RejectBuilder<T>

impl<T> Default for RejectBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RejectBuilder { payload: Default::default() }
    }
} // impl Default for RejectBuilder
impl<T> RejectBuilder<T>
    where T: ::Encodable + SetRejectMethodFields
{
    pub fn delivery_tag(mut self, delivery_tag: u64) -> Self {
        SetRejectMethodFields::set_delivery_tag(&mut self.payload, delivery_tag);
        self
    } // set_delivery_tag()
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetRejectMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> RejectBuilder<T>
pub trait ReturnMethod<'a> {
    type Payload: Default + SetReturnMethodFields<'a>;
} // pub trait ReturnMethod<'a>

pub trait SetReturnMethodFields<'a> {
    fn set_app_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_cluster_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_encoding<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_type<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_correlation_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_delivery_mode(&mut self, _: u8) {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_expiration<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_message_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_priority(&mut self, _: u8) {}
    fn set_reply_code(&mut self, _: u16) {}
    fn set_reply_text<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_reply_to<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_timestamp(&mut self, _: u64) {}
    fn set_ty<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_user_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetReturnMethodFields<'a>

pub struct ReturnBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ReturnBuilder


impl<T> ReturnBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ReturnBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ReturnBuilder<T>

impl<T> Default for ReturnBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ReturnBuilder { payload: Default::default() }
    }
} // impl Default for ReturnBuilder
impl<'a, T> ReturnBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetReturnMethodFields<'a>
{
    pub fn app_id<V>(mut self, app_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_app_id(&mut self.payload, app_id.into());
        self
    } // set_app_id()
    pub fn cluster_id<V>(mut self, cluster_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_cluster_id(&mut self.payload, cluster_id.into());
        self
    } // set_cluster_id()
    pub fn content_encoding<V>(mut self, content_encoding: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_content_encoding(&mut self.payload, content_encoding.into());
        self
    } // set_content_encoding()
    pub fn content_type<V>(mut self, content_type: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_content_type(&mut self.payload, content_type.into());
        self
    } // set_content_type()
    pub fn correlation_id<V>(mut self, correlation_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_correlation_id(&mut self.payload, correlation_id.into());
        self
    } // set_correlation_id()
    pub fn delivery_mode(mut self, delivery_mode: u8) -> Self {
        SetReturnMethodFields::set_delivery_mode(&mut self.payload, delivery_mode);
        self
    } // set_delivery_mode()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn expiration<V>(mut self, expiration: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_expiration(&mut self.payload, expiration.into());
        self
    } // set_expiration()
    pub fn headers<V>(mut self, headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetReturnMethodFields::set_headers(&mut self.payload, headers.into());
        self
    } // set_headers()
    pub fn message_id<V>(mut self, message_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_message_id(&mut self.payload, message_id.into());
        self
    } // set_message_id()
    pub fn priority(mut self, priority: u8) -> Self {
        SetReturnMethodFields::set_priority(&mut self.payload, priority);
        self
    } // set_priority()
    pub fn reply_code(mut self, reply_code: u16) -> Self {
        SetReturnMethodFields::set_reply_code(&mut self.payload, reply_code);
        self
    } // set_reply_code()
    pub fn reply_text<V>(mut self, reply_text: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_reply_text(&mut self.payload, reply_text.into());
        self
    } // set_reply_text()
    pub fn reply_to<V>(mut self, reply_to: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_reply_to(&mut self.payload, reply_to.into());
        self
    } // set_reply_to()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn timestamp(mut self, timestamp: u64) -> Self {
        SetReturnMethodFields::set_timestamp(&mut self.payload, timestamp);
        self
    } // set_timestamp()
    pub fn ty<V>(mut self, ty: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_ty(&mut self.payload, ty.into());
        self
    } // set_ty()
    pub fn user_id<V>(mut self, user_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetReturnMethodFields::set_user_id(&mut self.payload, user_id.into());
        self
    } // set_user_id()
    pub fn set_headers<V>(self, _: V) -> Self
        where V: Into<<T as ::Content<'a>>::Headers>
    {
        self
    }

    pub fn set_body<V>(self, _: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        self
    }
} // impl<'a, T> ReturnBuilder<T>
