// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
pub trait CommitMethod {
    type Payload: Default;
} // pub trait CommitMethod

pub struct CommitBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CommitBuilder


impl<T> CommitBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CommitBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CommitBuilder<T>

impl<T> Default for CommitBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CommitBuilder { payload: Default::default() }
    }
} // impl Default for CommitBuilder
pub trait CommitOkMethod {
    type Payload: Default;
} // pub trait CommitOkMethod

pub struct CommitOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CommitOkBuilder


impl<T> CommitOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CommitOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CommitOkBuilder<T>

impl<T> Default for CommitOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CommitOkBuilder { payload: Default::default() }
    }
} // impl Default for CommitOkBuilder
pub trait RollbackMethod {
    type Payload: Default;
} // pub trait RollbackMethod

pub struct RollbackBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RollbackBuilder


impl<T> RollbackBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RollbackBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RollbackBuilder<T>

impl<T> Default for RollbackBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RollbackBuilder { payload: Default::default() }
    }
} // impl Default for RollbackBuilder
pub trait RollbackOkMethod {
    type Payload: Default;
} // pub trait RollbackOkMethod

pub struct RollbackOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RollbackOkBuilder


impl<T> RollbackOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RollbackOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RollbackOkBuilder<T>

impl<T> Default for RollbackOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RollbackOkBuilder { payload: Default::default() }
    }
} // impl Default for RollbackOkBuilder
pub trait SelectMethod {
    type Payload: Default;
} // pub trait SelectMethod

pub struct SelectBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct SelectBuilder


impl<T> SelectBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> SelectBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> SelectBuilder<T>

impl<T> Default for SelectBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        SelectBuilder { payload: Default::default() }
    }
} // impl Default for SelectBuilder
pub trait SelectOkMethod {
    type Payload: Default;
} // pub trait SelectOkMethod

pub struct SelectOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct SelectOkBuilder


impl<T> SelectOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> SelectOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> SelectOkBuilder<T>

impl<T> Default for SelectOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        SelectOkBuilder { payload: Default::default() }
    }
} // impl Default for SelectOkBuilder
