// Generated by build.rs script in the amqp0-primitives crate.
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate.
//
// To regenerate, ignoring the pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden or removed.
pub trait BindMethod<'a> {
    type Payload: Default + SetBindMethodFields<'a>;
} // pub trait BindMethod<'a>

pub trait SetBindMethodFields<'a> {
    fn set_arguments<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_no_wait(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetBindMethodFields<'a>

pub struct BindBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct BindBuilder


impl<T> BindBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> BindBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> BindBuilder<T>

impl<T> Default for BindBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        BindBuilder { payload: Default::default() }
    }
} // impl Default for BindBuilder
impl<'a, T> BindBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetBindMethodFields<'a>
{
    pub fn arguments<V>(mut self, arguments: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetBindMethodFields::set_arguments(&mut self.payload, arguments.into());
        self
    } // set_arguments()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetBindMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetBindMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetBindMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetBindMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetBindMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> BindBuilder<T>
pub trait BindOkMethod {
    type Payload: Default;
} // pub trait BindOkMethod

pub struct BindOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct BindOkBuilder


impl<T> BindOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> BindOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> BindOkBuilder<T>

impl<T> Default for BindOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        BindOkBuilder { payload: Default::default() }
    }
} // impl Default for BindOkBuilder
pub trait DeclareMethod<'a> {
    type Payload: Default + SetDeclareMethodFields<'a>;
} // pub trait DeclareMethod<'a>

pub trait SetDeclareMethodFields<'a> {
    fn set_arguments<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_auto_delete(&mut self, _: bool) {}
    fn set_durable(&mut self, _: bool) {}
    fn set_exclusive(&mut self, _: bool) {}
    fn set_no_wait(&mut self, _: bool) {}
    fn set_passive(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetDeclareMethodFields<'a>

pub struct DeclareBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct DeclareBuilder


impl<T> DeclareBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> DeclareBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> DeclareBuilder<T>

impl<T> Default for DeclareBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        DeclareBuilder { payload: Default::default() }
    }
} // impl Default for DeclareBuilder
impl<'a, T> DeclareBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetDeclareMethodFields<'a>
{
    pub fn arguments<V>(mut self, arguments: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetDeclareMethodFields::set_arguments(&mut self.payload, arguments.into());
        self
    } // set_arguments()
    pub fn auto_delete(mut self, auto_delete: bool) -> Self {
        SetDeclareMethodFields::set_auto_delete(&mut self.payload, auto_delete);
        self
    } // set_auto_delete()
    pub fn durable(mut self, durable: bool) -> Self {
        SetDeclareMethodFields::set_durable(&mut self.payload, durable);
        self
    } // set_durable()
    pub fn exclusive(mut self, exclusive: bool) -> Self {
        SetDeclareMethodFields::set_exclusive(&mut self.payload, exclusive);
        self
    } // set_exclusive()
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetDeclareMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
    pub fn passive(mut self, passive: bool) -> Self {
        SetDeclareMethodFields::set_passive(&mut self.payload, passive);
        self
    } // set_passive()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeclareMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetDeclareMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> DeclareBuilder<T>
pub trait DeclareOkMethod<'a> {
    type Payload: Default + SetDeclareOkMethodFields<'a>;
} // pub trait DeclareOkMethod<'a>

pub trait SetDeclareOkMethodFields<'a> {
    fn set_consumer_count(&mut self, _: u32) {}
    fn set_message_count(&mut self, _: u32) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetDeclareOkMethodFields<'a>

pub struct DeclareOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct DeclareOkBuilder


impl<T> DeclareOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> DeclareOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> DeclareOkBuilder<T>

impl<T> Default for DeclareOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        DeclareOkBuilder { payload: Default::default() }
    }
} // impl Default for DeclareOkBuilder
impl<'a, T> DeclareOkBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetDeclareOkMethodFields<'a>
{
    pub fn consumer_count(mut self, consumer_count: u32) -> Self {
        SetDeclareOkMethodFields::set_consumer_count(&mut self.payload, consumer_count);
        self
    } // set_consumer_count()
    pub fn message_count(mut self, message_count: u32) -> Self {
        SetDeclareOkMethodFields::set_message_count(&mut self.payload, message_count);
        self
    } // set_message_count()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeclareOkMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
} // impl<'a, T> DeclareOkBuilder<T>
pub trait DeleteMethod<'a> {
    type Payload: Default + SetDeleteMethodFields<'a>;
} // pub trait DeleteMethod<'a>

pub trait SetDeleteMethodFields<'a> {
    fn set_if_empty(&mut self, _: bool) {}
    fn set_if_unused(&mut self, _: bool) {}
    fn set_no_wait(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetDeleteMethodFields<'a>

pub struct DeleteBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct DeleteBuilder


impl<T> DeleteBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> DeleteBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> DeleteBuilder<T>

impl<T> Default for DeleteBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        DeleteBuilder { payload: Default::default() }
    }
} // impl Default for DeleteBuilder
impl<'a, T> DeleteBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetDeleteMethodFields<'a>
{
    pub fn if_empty(mut self, if_empty: bool) -> Self {
        SetDeleteMethodFields::set_if_empty(&mut self.payload, if_empty);
        self
    } // set_if_empty()
    pub fn if_unused(mut self, if_unused: bool) -> Self {
        SetDeleteMethodFields::set_if_unused(&mut self.payload, if_unused);
        self
    } // set_if_unused()
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetDeleteMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetDeleteMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetDeleteMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> DeleteBuilder<T>
pub trait DeleteOkMethod {
    type Payload: Default + SetDeleteOkMethodFields;
} // pub trait DeleteOkMethod

pub trait SetDeleteOkMethodFields {
    fn set_message_count(&mut self, _: u32) {}
} // pub trait SetDeleteOkMethodFields

pub struct DeleteOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct DeleteOkBuilder


impl<T> DeleteOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> DeleteOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> DeleteOkBuilder<T>

impl<T> Default for DeleteOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        DeleteOkBuilder { payload: Default::default() }
    }
} // impl Default for DeleteOkBuilder
impl<T> DeleteOkBuilder<T>
    where T: ::Encodable + SetDeleteOkMethodFields
{
    pub fn message_count(mut self, message_count: u32) -> Self {
        SetDeleteOkMethodFields::set_message_count(&mut self.payload, message_count);
        self
    } // set_message_count()
} // impl<T> DeleteOkBuilder<T>
pub trait PurgeMethod<'a> {
    type Payload: Default + SetPurgeMethodFields<'a>;
} // pub trait PurgeMethod<'a>

pub trait SetPurgeMethodFields<'a> {
    fn set_no_wait(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetPurgeMethodFields<'a>

pub struct PurgeBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct PurgeBuilder


impl<T> PurgeBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> PurgeBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> PurgeBuilder<T>

impl<T> Default for PurgeBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        PurgeBuilder { payload: Default::default() }
    }
} // impl Default for PurgeBuilder
impl<'a, T> PurgeBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetPurgeMethodFields<'a>
{
    pub fn no_wait(mut self, no_wait: bool) -> Self {
        SetPurgeMethodFields::set_no_wait(&mut self.payload, no_wait);
        self
    } // set_no_wait()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetPurgeMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetPurgeMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> PurgeBuilder<T>
pub trait PurgeOkMethod {
    type Payload: Default + SetPurgeOkMethodFields;
} // pub trait PurgeOkMethod

pub trait SetPurgeOkMethodFields {
    fn set_message_count(&mut self, _: u32) {}
} // pub trait SetPurgeOkMethodFields

pub struct PurgeOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct PurgeOkBuilder


impl<T> PurgeOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> PurgeOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> PurgeOkBuilder<T>

impl<T> Default for PurgeOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        PurgeOkBuilder { payload: Default::default() }
    }
} // impl Default for PurgeOkBuilder
impl<T> PurgeOkBuilder<T>
    where T: ::Encodable + SetPurgeOkMethodFields
{
    pub fn message_count(mut self, message_count: u32) -> Self {
        SetPurgeOkMethodFields::set_message_count(&mut self.payload, message_count);
        self
    } // set_message_count()
} // impl<T> PurgeOkBuilder<T>
pub trait UnbindMethod<'a> {
    type Payload: Default + SetUnbindMethodFields<'a>;
} // pub trait UnbindMethod<'a>

pub trait SetUnbindMethodFields<'a> {
    fn set_arguments<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetUnbindMethodFields<'a>

pub struct UnbindBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct UnbindBuilder


impl<T> UnbindBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> UnbindBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> UnbindBuilder<T>

impl<T> Default for UnbindBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        UnbindBuilder { payload: Default::default() }
    }
} // impl Default for UnbindBuilder
impl<'a, T> UnbindBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetUnbindMethodFields<'a>
{
    pub fn arguments<V>(mut self, arguments: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetUnbindMethodFields::set_arguments(&mut self.payload, arguments.into());
        self
    } // set_arguments()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetUnbindMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetUnbindMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetUnbindMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetUnbindMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> UnbindBuilder<T>
pub trait UnbindOkMethod {
    type Payload: Default;
} // pub trait UnbindOkMethod

pub struct UnbindOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct UnbindOkBuilder


impl<T> UnbindOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> UnbindOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> UnbindOkBuilder<T>

impl<T> Default for UnbindOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        UnbindOkBuilder { payload: Default::default() }
    }
} // impl Default for UnbindOkBuilder
