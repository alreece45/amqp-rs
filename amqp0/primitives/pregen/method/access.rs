// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
pub trait RequestMethod<'a> {
    type Payload: Default + SetRequestMethodFields<'a>;
} // pub trait RequestMethod<'a>

pub trait SetRequestMethodFields<'a> {
    fn set_active(&mut self, _: bool) {}
    fn set_exclusive(&mut self, _: bool) {}
    fn set_passive(&mut self, _: bool) {}
    fn set_read(&mut self, _: bool) {}
    fn set_realm<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_write(&mut self, _: bool) {}
} // pub trait SetRequestMethodFields<'a>

pub struct RequestBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RequestBuilder


impl<T> RequestBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RequestBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RequestBuilder<T>

impl<T> Default for RequestBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RequestBuilder { payload: Default::default() }
    }
} // impl Default for RequestBuilder
impl<'a, T> RequestBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetRequestMethodFields<'a>
{
    pub fn active(mut self, active: bool) -> Self {
        SetRequestMethodFields::set_active(&mut self.payload, active);
        self
    } // set_active()
    pub fn exclusive(mut self, exclusive: bool) -> Self {
        SetRequestMethodFields::set_exclusive(&mut self.payload, exclusive);
        self
    } // set_exclusive()
    pub fn passive(mut self, passive: bool) -> Self {
        SetRequestMethodFields::set_passive(&mut self.payload, passive);
        self
    } // set_passive()
    pub fn read(mut self, read: bool) -> Self {
        SetRequestMethodFields::set_read(&mut self.payload, read);
        self
    } // set_read()
    pub fn realm<V>(mut self, realm: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRequestMethodFields::set_realm(&mut self.payload, realm.into());
        self
    } // set_realm()
    pub fn write(mut self, write: bool) -> Self {
        SetRequestMethodFields::set_write(&mut self.payload, write);
        self
    } // set_write()
} // impl<'a, T> RequestBuilder<T>
pub trait RequestOkMethod {
    type Payload: Default + SetRequestOkMethodFields;
} // pub trait RequestOkMethod

pub trait SetRequestOkMethodFields {
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetRequestOkMethodFields

pub struct RequestOkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RequestOkBuilder


impl<T> RequestOkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RequestOkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RequestOkBuilder<T>

impl<T> Default for RequestOkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RequestOkBuilder { payload: Default::default() }
    }
} // impl Default for RequestOkBuilder
impl<T> RequestOkBuilder<T>
    where T: ::Encodable + SetRequestOkMethodFields
{
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetRequestOkMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<T> RequestOkBuilder<T>
