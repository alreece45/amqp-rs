// Generated by build.rs script in amqp0-primitives
// Pre-generated files are used by default. Generation is done with the amqp0-codegen crate
//
// To regenerate, and not use pre-generated files, use: cargo --features="amqp0-build-primitives"
// To format and replace the pre-generated files, use: cargo --features="amqp0-pregen-primitives"
//
// EDITORS BEWARE: Your modifications may be overridden
pub trait AppendMethod<'a> {
    type Payload: Default + SetAppendMethodFields<'a>;
} // pub trait AppendMethod<'a>

pub trait SetAppendMethodFields<'a> {
    fn set_bytes<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
    fn set_reference<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetAppendMethodFields<'a>

pub struct AppendBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct AppendBuilder


impl<T> AppendBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> AppendBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> AppendBuilder<T>

impl<T> Default for AppendBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        AppendBuilder { payload: Default::default() }
    }
} // impl Default for AppendBuilder
impl<'a, T> AppendBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetAppendMethodFields<'a>
{
    pub fn bytes<V>(mut self, bytes: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetAppendMethodFields::set_bytes(&mut self.payload, bytes.into());
        self
    } // set_bytes()
    pub fn reference<V>(mut self, reference: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetAppendMethodFields::set_reference(&mut self.payload, reference.into());
        self
    } // set_reference()
} // impl<'a, T> AppendBuilder<T>
pub trait CancelMethod<'a> {
    type Payload: Default + SetCancelMethodFields<'a>;
} // pub trait CancelMethod<'a>

pub trait SetCancelMethodFields<'a> {
    fn set_destination<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetCancelMethodFields<'a>

pub struct CancelBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CancelBuilder


impl<T> CancelBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CancelBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CancelBuilder<T>

impl<T> Default for CancelBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CancelBuilder { payload: Default::default() }
    }
} // impl Default for CancelBuilder
impl<'a, T> CancelBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCancelMethodFields<'a>
{
    pub fn destination<V>(mut self, destination: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCancelMethodFields::set_destination(&mut self.payload, destination.into());
        self
    } // set_destination()
} // impl<'a, T> CancelBuilder<T>
pub trait CheckpointMethod<'a> {
    type Payload: Default + SetCheckpointMethodFields<'a>;
} // pub trait CheckpointMethod<'a>

pub trait SetCheckpointMethodFields<'a> {
    fn set_identifier<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_reference<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetCheckpointMethodFields<'a>

pub struct CheckpointBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CheckpointBuilder


impl<T> CheckpointBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CheckpointBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CheckpointBuilder<T>

impl<T> Default for CheckpointBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CheckpointBuilder { payload: Default::default() }
    }
} // impl Default for CheckpointBuilder
impl<'a, T> CheckpointBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCheckpointMethodFields<'a>
{
    pub fn identifier<V>(mut self, identifier: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetCheckpointMethodFields::set_identifier(&mut self.payload, identifier.into());
        self
    } // set_identifier()
    pub fn reference<V>(mut self, reference: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetCheckpointMethodFields::set_reference(&mut self.payload, reference.into());
        self
    } // set_reference()
} // impl<'a, T> CheckpointBuilder<T>
pub trait CloseMethod<'a> {
    type Payload: Default + SetCloseMethodFields<'a>;
} // pub trait CloseMethod<'a>

pub trait SetCloseMethodFields<'a> {
    fn set_reference<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetCloseMethodFields<'a>

pub struct CloseBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct CloseBuilder


impl<T> CloseBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> CloseBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> CloseBuilder<T>

impl<T> Default for CloseBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        CloseBuilder { payload: Default::default() }
    }
} // impl Default for CloseBuilder
impl<'a, T> CloseBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetCloseMethodFields<'a>
{
    pub fn reference<V>(mut self, reference: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetCloseMethodFields::set_reference(&mut self.payload, reference.into());
        self
    } // set_reference()
} // impl<'a, T> CloseBuilder<T>
pub trait ConsumeMethod<'a> {
    type Payload: Default + SetConsumeMethodFields<'a>;
} // pub trait ConsumeMethod<'a>

pub trait SetConsumeMethodFields<'a> {
    fn set_destination<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_exclusive(&mut self, _: bool) {}
    fn set_filter<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_no_ack(&mut self, _: bool) {}
    fn set_no_local(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetConsumeMethodFields<'a>

pub struct ConsumeBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ConsumeBuilder


impl<T> ConsumeBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ConsumeBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ConsumeBuilder<T>

impl<T> Default for ConsumeBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ConsumeBuilder { payload: Default::default() }
    }
} // impl Default for ConsumeBuilder
impl<'a, T> ConsumeBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetConsumeMethodFields<'a>
{
    pub fn destination<V>(mut self, destination: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetConsumeMethodFields::set_destination(&mut self.payload, destination.into());
        self
    } // set_destination()
    pub fn exclusive(mut self, exclusive: bool) -> Self {
        SetConsumeMethodFields::set_exclusive(&mut self.payload, exclusive);
        self
    } // set_exclusive()
    pub fn filter<V>(mut self, filter: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetConsumeMethodFields::set_filter(&mut self.payload, filter.into());
        self
    } // set_filter()
    pub fn no_ack(mut self, no_ack: bool) -> Self {
        SetConsumeMethodFields::set_no_ack(&mut self.payload, no_ack);
        self
    } // set_no_ack()
    pub fn no_local(mut self, no_local: bool) -> Self {
        SetConsumeMethodFields::set_no_local(&mut self.payload, no_local);
        self
    } // set_no_local()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetConsumeMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetConsumeMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> ConsumeBuilder<T>
pub trait EmptyMethod {
    type Payload: Default;
} // pub trait EmptyMethod

pub struct EmptyBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct EmptyBuilder


impl<T> EmptyBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> EmptyBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> EmptyBuilder<T>

impl<T> Default for EmptyBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        EmptyBuilder { payload: Default::default() }
    }
} // impl Default for EmptyBuilder
pub trait GetMethod<'a> {
    type Payload: Default + SetGetMethodFields<'a>;
} // pub trait GetMethod<'a>

pub trait SetGetMethodFields<'a> {
    fn set_destination<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_no_ack(&mut self, _: bool) {}
    fn set_queue<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ticket(&mut self, _: u16) {}
} // pub trait SetGetMethodFields<'a>

pub struct GetBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct GetBuilder


impl<T> GetBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> GetBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> GetBuilder<T>

impl<T> Default for GetBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        GetBuilder { payload: Default::default() }
    }
} // impl Default for GetBuilder
impl<'a, T> GetBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetGetMethodFields<'a>
{
    pub fn destination<V>(mut self, destination: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetMethodFields::set_destination(&mut self.payload, destination.into());
        self
    } // set_destination()
    pub fn no_ack(mut self, no_ack: bool) -> Self {
        SetGetMethodFields::set_no_ack(&mut self.payload, no_ack);
        self
    } // set_no_ack()
    pub fn queue<V>(mut self, queue: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetGetMethodFields::set_queue(&mut self.payload, queue.into());
        self
    } // set_queue()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetGetMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
} // impl<'a, T> GetBuilder<T>
pub trait OffsetMethod {
    type Payload: Default + SetOffsetMethodFields;
} // pub trait OffsetMethod

pub trait SetOffsetMethodFields {
    fn set_value(&mut self, _: u64) {}
} // pub trait SetOffsetMethodFields

pub struct OffsetBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OffsetBuilder


impl<T> OffsetBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OffsetBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OffsetBuilder<T>

impl<T> Default for OffsetBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OffsetBuilder { payload: Default::default() }
    }
} // impl Default for OffsetBuilder
impl<T> OffsetBuilder<T>
    where T: ::Encodable + SetOffsetMethodFields
{
    pub fn value(mut self, value: u64) -> Self {
        SetOffsetMethodFields::set_value(&mut self.payload, value);
        self
    } // set_value()
} // impl<T> OffsetBuilder<T>
pub trait OkMethod {
    type Payload: Default;
} // pub trait OkMethod

pub struct OkBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OkBuilder


impl<T> OkBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OkBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OkBuilder<T>

impl<T> Default for OkBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OkBuilder { payload: Default::default() }
    }
} // impl Default for OkBuilder
pub trait OpenMethod<'a> {
    type Payload: Default + SetOpenMethodFields<'a>;
} // pub trait OpenMethod<'a>

pub trait SetOpenMethodFields<'a> {
    fn set_reference<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetOpenMethodFields<'a>

pub struct OpenBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct OpenBuilder


impl<T> OpenBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> OpenBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> OpenBuilder<T>

impl<T> Default for OpenBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        OpenBuilder { payload: Default::default() }
    }
} // impl Default for OpenBuilder
impl<'a, T> OpenBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetOpenMethodFields<'a>
{
    pub fn reference<V>(mut self, reference: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetOpenMethodFields::set_reference(&mut self.payload, reference.into());
        self
    } // set_reference()
} // impl<'a, T> OpenBuilder<T>
pub trait QosMethod {
    type Payload: Default + SetQosMethodFields;
} // pub trait QosMethod

pub trait SetQosMethodFields {
    fn set_global(&mut self, _: bool) {}
    fn set_prefetch_count(&mut self, _: u16) {}
    fn set_prefetch_size(&mut self, _: u32) {}
} // pub trait SetQosMethodFields

pub struct QosBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct QosBuilder


impl<T> QosBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> QosBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> QosBuilder<T>

impl<T> Default for QosBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        QosBuilder { payload: Default::default() }
    }
} // impl Default for QosBuilder
impl<T> QosBuilder<T>
    where T: ::Encodable + SetQosMethodFields
{
    pub fn global(mut self, global: bool) -> Self {
        SetQosMethodFields::set_global(&mut self.payload, global);
        self
    } // set_global()
    pub fn prefetch_count(mut self, prefetch_count: u16) -> Self {
        SetQosMethodFields::set_prefetch_count(&mut self.payload, prefetch_count);
        self
    } // set_prefetch_count()
    pub fn prefetch_size(mut self, prefetch_size: u32) -> Self {
        SetQosMethodFields::set_prefetch_size(&mut self.payload, prefetch_size);
        self
    } // set_prefetch_size()
} // impl<T> QosBuilder<T>
pub trait RecoverMethod {
    type Payload: Default + SetRecoverMethodFields;
} // pub trait RecoverMethod

pub trait SetRecoverMethodFields {
    fn set_requeue(&mut self, _: bool) {}
} // pub trait SetRecoverMethodFields

pub struct RecoverBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RecoverBuilder


impl<T> RecoverBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RecoverBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RecoverBuilder<T>

impl<T> Default for RecoverBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RecoverBuilder { payload: Default::default() }
    }
} // impl Default for RecoverBuilder
impl<T> RecoverBuilder<T>
    where T: ::Encodable + SetRecoverMethodFields
{
    pub fn requeue(mut self, requeue: bool) -> Self {
        SetRecoverMethodFields::set_requeue(&mut self.payload, requeue);
        self
    } // set_requeue()
} // impl<T> RecoverBuilder<T>
pub trait RejectMethod<'a> {
    type Payload: Default + SetRejectMethodFields<'a>;
} // pub trait RejectMethod<'a>

pub trait SetRejectMethodFields<'a> {
    fn set_code(&mut self, _: u16) {}
    fn set_text<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetRejectMethodFields<'a>

pub struct RejectBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct RejectBuilder


impl<T> RejectBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> RejectBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> RejectBuilder<T>

impl<T> Default for RejectBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        RejectBuilder { payload: Default::default() }
    }
} // impl Default for RejectBuilder
impl<'a, T> RejectBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetRejectMethodFields<'a>
{
    pub fn code(mut self, code: u16) -> Self {
        SetRejectMethodFields::set_code(&mut self.payload, code);
        self
    } // set_code()
    pub fn text<V>(mut self, text: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetRejectMethodFields::set_text(&mut self.payload, text.into());
        self
    } // set_text()
} // impl<'a, T> RejectBuilder<T>
pub trait ResumeMethod<'a> {
    type Payload: Default + SetResumeMethodFields<'a>;
} // pub trait ResumeMethod<'a>

pub trait SetResumeMethodFields<'a> {
    fn set_identifier<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_reference<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
} // pub trait SetResumeMethodFields<'a>

pub struct ResumeBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct ResumeBuilder


impl<T> ResumeBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> ResumeBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> ResumeBuilder<T>

impl<T> Default for ResumeBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        ResumeBuilder { payload: Default::default() }
    }
} // impl Default for ResumeBuilder
impl<'a, T> ResumeBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetResumeMethodFields<'a>
{
    pub fn identifier<V>(mut self, identifier: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetResumeMethodFields::set_identifier(&mut self.payload, identifier.into());
        self
    } // set_identifier()
    pub fn reference<V>(mut self, reference: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetResumeMethodFields::set_reference(&mut self.payload, reference.into());
        self
    } // set_reference()
} // impl<'a, T> ResumeBuilder<T>
pub trait TransferMethod<'a> {
    type Payload: Default + SetTransferMethodFields<'a>;
} // pub trait TransferMethod<'a>

pub trait SetTransferMethodFields<'a> {
    fn set_app_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_application_headers<V>(&mut self, _: V) where V: Into<::field::TableEntries<'a>> {}
    fn set_body<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
    fn set_content_encoding<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_content_type<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_correlation_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_delivery_mode(&mut self, _: u8) {}
    fn set_destination<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_exchange<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_expiration(&mut self, _: u64) {}
    fn set_immediate(&mut self, _: bool) {}
    fn set_message_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_priority(&mut self, _: u8) {}
    fn set_redelivered(&mut self, _: bool) {}
    fn set_reply_to<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_routing_key<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_security_token<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, [u8]>> {}
    fn set_ticket(&mut self, _: u16) {}
    fn set_timestamp(&mut self, _: u64) {}
    fn set_transaction_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
    fn set_ttl(&mut self, _: u64) {}
    fn set_user_id<V>(&mut self, _: V) where V: Into<::std::borrow::Cow<'a, str>> {}
} // pub trait SetTransferMethodFields<'a>

pub struct TransferBuilder<T>
    where T: ::Encodable
{
    payload: T,
} // struct TransferBuilder


impl<T> TransferBuilder<T>
    where T: Default + ::Encodable
{
    pub fn new() -> Self {
        Default::default()
    }
} // impl Builder (new)

impl<T> TransferBuilder<T>
    where T: ::Encodable
{
    pub fn build(self) -> T {
        self.payload
    }
} // impl<T> TransferBuilder<T>

impl<T> Default for TransferBuilder<T>
    where T: ::Encodable + Default
{
    fn default() -> Self {
        TransferBuilder { payload: Default::default() }
    }
} // impl Default for TransferBuilder
impl<'a, T> TransferBuilder<T>
    where T: ::Encodable + ::Content<'a> + SetTransferMethodFields<'a>
{
    pub fn app_id<V>(mut self, app_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_app_id(&mut self.payload, app_id.into());
        self
    } // set_app_id()
    pub fn application_headers<V>(mut self, application_headers: V) -> Self
        where V: Into<::field::TableEntries<'a>>
    {
        SetTransferMethodFields::set_application_headers(&mut self.payload,
                                                         application_headers.into());
        self
    } // set_application_headers()
    pub fn body<V>(mut self, body: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetTransferMethodFields::set_body(&mut self.payload, body.into());
        self
    } // set_body()
    pub fn content_encoding<V>(mut self, content_encoding: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_content_encoding(&mut self.payload, content_encoding.into());
        self
    } // set_content_encoding()
    pub fn content_type<V>(mut self, content_type: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_content_type(&mut self.payload, content_type.into());
        self
    } // set_content_type()
    pub fn correlation_id<V>(mut self, correlation_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_correlation_id(&mut self.payload, correlation_id.into());
        self
    } // set_correlation_id()
    pub fn delivery_mode(mut self, delivery_mode: u8) -> Self {
        SetTransferMethodFields::set_delivery_mode(&mut self.payload, delivery_mode);
        self
    } // set_delivery_mode()
    pub fn destination<V>(mut self, destination: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_destination(&mut self.payload, destination.into());
        self
    } // set_destination()
    pub fn exchange<V>(mut self, exchange: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_exchange(&mut self.payload, exchange.into());
        self
    } // set_exchange()
    pub fn expiration(mut self, expiration: u64) -> Self {
        SetTransferMethodFields::set_expiration(&mut self.payload, expiration);
        self
    } // set_expiration()
    pub fn immediate(mut self, immediate: bool) -> Self {
        SetTransferMethodFields::set_immediate(&mut self.payload, immediate);
        self
    } // set_immediate()
    pub fn message_id<V>(mut self, message_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_message_id(&mut self.payload, message_id.into());
        self
    } // set_message_id()
    pub fn priority(mut self, priority: u8) -> Self {
        SetTransferMethodFields::set_priority(&mut self.payload, priority);
        self
    } // set_priority()
    pub fn redelivered(mut self, redelivered: bool) -> Self {
        SetTransferMethodFields::set_redelivered(&mut self.payload, redelivered);
        self
    } // set_redelivered()
    pub fn reply_to<V>(mut self, reply_to: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_reply_to(&mut self.payload, reply_to.into());
        self
    } // set_reply_to()
    pub fn routing_key<V>(mut self, routing_key: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_routing_key(&mut self.payload, routing_key.into());
        self
    } // set_routing_key()
    pub fn security_token<V>(mut self, security_token: V) -> Self
        where V: Into<::std::borrow::Cow<'a, [u8]>>
    {
        SetTransferMethodFields::set_security_token(&mut self.payload, security_token.into());
        self
    } // set_security_token()
    pub fn ticket(mut self, ticket: u16) -> Self {
        SetTransferMethodFields::set_ticket(&mut self.payload, ticket);
        self
    } // set_ticket()
    pub fn timestamp(mut self, timestamp: u64) -> Self {
        SetTransferMethodFields::set_timestamp(&mut self.payload, timestamp);
        self
    } // set_timestamp()
    pub fn transaction_id<V>(mut self, transaction_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_transaction_id(&mut self.payload, transaction_id.into());
        self
    } // set_transaction_id()
    pub fn ttl(mut self, ttl: u64) -> Self {
        SetTransferMethodFields::set_ttl(&mut self.payload, ttl);
        self
    } // set_ttl()
    pub fn user_id<V>(mut self, user_id: V) -> Self
        where V: Into<::std::borrow::Cow<'a, str>>
    {
        SetTransferMethodFields::set_user_id(&mut self.payload, user_id.into());
        self
    } // set_user_id()
} // impl<'a, T> TransferBuilder<T>
