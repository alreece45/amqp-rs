// Copyright 2016-17 Alexander Reece
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use std::io;

use WriteRust;
use common::{Class, ClassMethod};

use super::method_impl::MethodImplWriter;
use super::method_encodable_impl::EncodableMethodImplWriter;
use super::method_payload_impl::MethodPayloadImplWriter;

impl<'a> WriteRust for MethodStructWriter<'a> {
    fn write_rust_to<W>(&self, writer: &mut W) -> io::Result<()>
        where W: io::Write
    {
        try!(self.write_struct(writer));

        let inherit_impl = MethodImplWriter::new(self.method);
        try!(inherit_impl.write_rust_to(writer));

        let encodable_impl = EncodableMethodImplWriter::new(self.method);
        try!(encodable_impl.write_rust_to(writer));

        let payload_impl = MethodPayloadImplWriter::new(self.class, self.method);
        try!(payload_impl.write_rust_to(writer));

        Ok(())
    }
}

pub struct MethodStructWriter<'a> {
    class: &'a Class,
    method: &'a ClassMethod,
    has_fields: bool,
}

impl<'a> MethodStructWriter<'a> {
    pub fn new(class: &'a Class, method: &'a ClassMethod) -> Self {
        let has_fields = method.fields().iter().any(|f| !f.is_reserved());

        MethodStructWriter {
            class: class,
            method: method,
            has_fields: has_fields,
        }
    }

    pub fn write_struct<W>(&self, writer: &mut W) -> io::Result<()>
        where W: io::Write
    {
        try!(writeln!(writer, "\n// generated by primalgen::codegen::spec-module::class_mod::method_struct"));
        try!(writeln!(writer, "#[derive(Debug)]"));
        if !self.has_fields {
            try!(writeln!(writer, "pub struct {};", self.method.pascal_case()));
            return Ok(());
        }

        let lifetimes = if self.method.has_lifetimes() { "<'a>" } else { "" };

        try!(writeln!(writer, "pub struct {}{} {{", self.method.pascal_case(), lifetimes));
        for field in self.method.fields() {
            if field.is_reserved() {
                continue;
            }
            try!(write!(writer, "{}: ", field.var_name()));
            if field.ty().is_copy() || field.ty().is_owned() {
                try!(writeln!(writer, "{},", field.ty().owned_type()));
            }
            else {
                try!(writeln!(writer, "{},", field.ty().cow_definition("a")));
            }
        }
        try!(writeln!(writer, "}} // struct {}{}", self.method.pascal_case(), lifetimes));
        Ok(())
    }
}
